This patch is the diff between v9.1.0 release and the VEX branch as of
2016-05-04.  This is the last commit on VEX before the merge to 9.2.0
that brings in the inline file name bug.

This adds support for AVX instructions on x86_64.

VEX:

commit 0e9c1b1af9d2a263b34a0630751d2cecfa3cae05
Author: John Detter <jdetter@wisc.edu>
Date:   Wed May 4 00:41:28 2016 -0500

    Fixed issue with null pointer dereference in InstructionAPI

v9.1.0:

commit df6d090061bae7ff2ba5a6bd57bb2ecbf538ef7a (tag: v9.1.0, origin/v9.1.x)
Merge: 62d674d 19281e1
Author: Paradyn <paradyn@cs.wisc.edu>
Date:   Wed Dec 16 11:09:59 2015 -0600

    Merge branch 'v9.1.x' of
    ssh://follis/p/paradyn/development/bill/head/dyninst into v9.1.x



diff --git a/.gitignore b/.gitignore
index fe232a0..46ac4d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -74,6 +74,9 @@ tags
 *.vcxproj.user
 ipch/*
 *.swp
+*.swo
+*.swn
+.__afs*
 *patch
 *.diff
 *.msi
diff --git a/common/h/dyn_regs.h b/common/h/dyn_regs.h
index ca89405..97fbfc8 100644
--- a/common/h/dyn_regs.h
+++ b/common/h/dyn_regs.h
@@ -325,11 +325,14 @@ namespace Dyninst
       const signed int SEG   = 0x00020000;
       const signed int FLAG  = 0x00030000;
       const signed int MISC  = 0x00040000;
-      const signed int XMM   = 0x00050000;
-      const signed int MMX   = 0x00060000;
-      const signed int CTL   = 0x00070000;
-      const signed int DBG   = 0x00080000;
-      const signed int TST   = 0x00090000;
+      const signed int KMASK = 0x00050000;
+      const signed int XMM   = 0x00060000;
+      const signed int YMM   = 0x00070000;
+      const signed int ZMM   = 0x00080000;
+      const signed int MMX   = 0x00090000;
+      const signed int CTL   = 0x000A0000;
+      const signed int DBG   = 0x000B0000;
+      const signed int TST   = 0x000C0000;
       const signed int FLAGS = 0x00000000;
       const signed int BASEA  = 0x0;
       const signed int BASEC  = 0x1;
@@ -451,22 +454,110 @@ namespace Dyninst
       DEF_REGISTER(orax,   0x0    | FULL  | MISC | Arch_x86_64, "x86_64");
       DEF_REGISTER(fsbase, 0x1    | FULL  | MISC | Arch_x86_64, "x86_64");
       DEF_REGISTER(gsbase, 0x2    | FULL  | MISC | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm0,  0x0     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm1,  0x1     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm2,  0x2     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm3,  0x3     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm4,  0x4     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm5,  0x5     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm6,  0x6     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm7,  0x7     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm8,  0x8     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm9,  0x9     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm10, 0xA     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm11, 0xB     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm12, 0xC     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm13, 0xD     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm14, 0xE     | OCT   | XMM  | Arch_x86_64, "x86_64");
-      DEF_REGISTER(xmm15, 0xF     | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(k0,    0x00    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k1,    0x01    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k2,    0x02    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k3,    0x03    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k4,    0x04    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k5,    0x05    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k6,    0x06    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(k7,    0x07    | OCT   | KMASK| Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm0,  0x00    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm1,  0x01    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm2,  0x02    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm3,  0x03    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm4,  0x04    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm5,  0x05    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm6,  0x06    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm7,  0x07    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm8,  0x08    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm9,  0x09    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm10, 0x0A    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm11, 0x0B    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm12, 0x0C    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm13, 0x0D    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm14, 0x0E    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm15, 0x0F    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm16, 0x10    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm17, 0x11    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm18, 0x12    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm19, 0x13    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm20, 0x14    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm21, 0x15    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm22, 0x16    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm23, 0x17    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm24, 0x18    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm25, 0x19    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm26, 0x1A    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm27, 0x1B    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm28, 0x1C    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm29, 0x1D    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm30, 0x1E    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(xmm31, 0x1F    | OCT   | XMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm0,  0x00    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm1,  0x01    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm2,  0x02    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm3,  0x03    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm4,  0x04    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm5,  0x05    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm6,  0x06    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm7,  0x07    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm8,  0x08    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm9,  0x09    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm10, 0x0A    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm11, 0x0B    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm12, 0x0C    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm13, 0x0D    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm14, 0x0E    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm15, 0x0F    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm16, 0x10    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm17, 0x11    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm18, 0x12    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm19, 0x13    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm20, 0x14    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm21, 0x15    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm22, 0x16    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm23, 0x17    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm24, 0x18    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm25, 0x19    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm26, 0x1A    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm27, 0x1B    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm28, 0x1C    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm29, 0x1D    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm30, 0x1E    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(ymm31, 0x1F    | OCT   | YMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm0,  0x00    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm1,  0x01    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm2,  0x02    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm3,  0x03    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm4,  0x04    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm5,  0x05    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm6,  0x06    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm7,  0x07    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm8,  0x08    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm9,  0x09    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm10, 0x0A    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm11, 0x0B    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm12, 0x0C    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm13, 0x0D    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm14, 0x0E    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm15, 0x0F    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm16, 0x10    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm17, 0x11    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm18, 0x12    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm19, 0x13    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm20, 0x14    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm21, 0x15    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm22, 0x16    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm23, 0x17    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm24, 0x18    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm25, 0x19    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm26, 0x1A    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm27, 0x1B    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm28, 0x1C    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm29, 0x1D    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm30, 0x1E    | OCT   | ZMM  | Arch_x86_64, "x86_64");
+      DEF_REGISTER(zmm31, 0x1F    | OCT   | ZMM  | Arch_x86_64, "x86_64");
       DEF_REGISTER(mm0,   0x0     | FPDBL | MMX  | Arch_x86_64, "x86_64");
       DEF_REGISTER(mm1,   0x1     | FPDBL | MMX  | Arch_x86_64, "x86_64");
       DEF_REGISTER(mm2,   0x2     | FPDBL | MMX  | Arch_x86_64, "x86_64");
diff --git a/common/h/entryIDs.h b/common/h/entryIDs.h
index 610863c..62bbfe7 100644
--- a/common/h/entryIDs.h
+++ b/common/h/entryIDs.h
@@ -525,6 +525,17 @@ enum entryID {
   e_shrd,
   e_shufpd,
   e_shufps,
+  e_sha1rnds4,
+  e_sha1nexte,
+  e_sha1msg1,
+  e_sha1msg2,
+  e_sha256rnds2,
+  e_sha256msg1,
+  e_sha256msg2,
+  e_prefetchwt1,
+  e_clflushopt,
+  e_clwb,
+  e_pcommit,
   e_sidt,
   e_sldt,
   e_smsw,
@@ -561,6 +572,551 @@ enum entryID {
   e_unpcklps,
   e_verr,
   e_verw,
+
+  e_vaddpd,
+  e_vaddps,
+  e_vaddsd,
+  e_vaddss,
+  e_vandnpd,
+  e_vandnps,
+  e_vandpd,
+  e_vandps,
+  e_valignd,
+  e_valignq,
+  e_vbroadcastf128,
+  e_vbroadcasti128,
+  e_vbroadcastsd,
+  e_vbroadcastss,
+  e_vblendmps,
+  e_vblendmpd,
+  e_vblendps,
+  e_vblendvps,
+  e_vblendvpd,
+  e_vpblendmw,
+  e_vpblendmb,
+  e_vpblendvb,
+  e_vcmppd,
+  e_vcmpps,
+  e_vcmpsd,
+  e_vcmpss,
+  e_vcomisd,
+  e_vcomiss,
+  e_vexpandpd,
+  e_vexpandps,
+  e_vexp2pd,
+  e_vexp2ps,
+  e_vroundpd,
+  e_vroundps,
+  e_vroundsd,
+  e_vroundss,
+  e_vrcp28pd,
+  e_vrcp28sd,
+  e_vrcp28ps,
+  e_vrcp28ss,
+  e_vrsqrt28pd,
+  e_vrsqrt28sd,
+  e_vrsqrt28ps,
+  e_vrsqrt28ss,
+  e_vcvtpd2qq,
+  e_vcvtdq2pd,
+  e_vcvtdq2ps,
+  e_vcvtpd2dq,
+  e_vcvtpd2ps,
+  e_vcvtph2ps,
+  e_vcvtps2dq,
+  e_vcvtps2pd,
+  e_vcvtps2ph,
+  e_vcvtsd2si,
+  e_vcvtsd2ss,
+  e_vcvtsi2sd,
+  e_vcvtsi2ss,
+  e_vcvtss2sd,
+  e_vcvtss2si,
+  e_vcvttpd2dq,
+  e_vcvttps2dq,
+  e_vcvttsd2si,
+  e_vcvttss2si,
+  e_vdivpd,
+  e_vdivps,
+  e_vdivsd,
+  e_vdivss,
+  e_vextractf128, 
+  e_vextracti128, 
+  e_vextractf32x4,
+  e_vextractf64x2,
+  e_vextractf32x8,
+  e_vextractf64x4,
+  e_vextracti32x4, 
+  e_vextracti64x2, 
+  e_vextracti32x8, 
+  e_vextracti64x4, 
+  e_vextractps,
+  e_vfixupimmpd,
+  e_vfixupimmps,
+  e_vfixupimmsd,
+  e_vfixupimmss,
+  e_vfmadd132pd,
+  e_vfmadd132ps,
+  e_vfmadd132sd,
+  e_vfmadd132ss,
+  e_vfmadd213pd,
+  e_vfmadd213ps,
+  e_vfmadd213sd,
+  e_vfmadd213ss,
+  e_vfmadd231pd,
+  e_vfmadd231ps,
+  e_vfmadd231sd,
+  e_vfmadd231ss,
+  e_vfmaddsub132pd,
+  e_vfmaddsub132ps,
+  e_vfmaddsub213pd,
+  e_vfmaddsub213ps,
+  e_vfmaddsub231pd,
+  e_vfmaddsub231ps,
+  e_vfmsub132pd,
+  e_vfmsub132ps,
+  e_vfmsub132sd,
+  e_vfmsub132ss,
+  e_vfmsub213pd,
+  e_vfmsub213ps,
+  e_vfmsub213sd,
+  e_vfmsub213ss,
+  e_vfmsub231pd,
+  e_vfmsub231ps,
+  e_vfmsub231sd,
+  e_vfmsub231ss,
+  e_vfmsubadd132pd,
+  e_vfmsubadd132ps,
+  e_vfmsubadd213pd,
+  e_vfmsubadd213ps,
+  e_vfmsubadd231pd,
+  e_vfmsubadd231ps,
+  e_vfnmadd132pd,
+  e_vfnmadd132ps,
+  e_vfnmadd132sd,
+  e_vfnmadd132ss,
+  e_vfnmadd213pd,
+  e_vfnmadd213ps,
+  e_vfnmadd213sd,
+  e_vfnmadd213ss,
+  e_vfnmadd231pd,
+  e_vfnmadd231ps,
+  e_vfnmadd231sd,
+  e_vfnmadd231ss,
+  e_vfnmsub132pd,
+  e_vfnmsub132ps,
+  e_vfnmsub132sd,
+  e_vfnmsub132ss,
+  e_vfnmsub213pd,
+  e_vfnmsub213ps,
+  e_vfnmsub213sd,
+  e_vfnmsub213ss,
+  e_vfnmsub231pd,
+  e_vfnmsub231ps,
+  e_vfnmsub231sd,
+  e_vfnmsub231ss,
+  e_vfpclassps,
+  e_vfpclasspd,
+  e_vfpclasssd,
+  e_vfpclassss,
+  e_vgatherdpd,
+  e_vgatherdps,
+  e_vgatherqpd,
+  e_vgatherqps,
+  e_vgetexpps,
+  e_vgetexppd,
+  e_vgetexpsd,
+  e_vgetexpss,
+  e_vgetmantps,
+  e_vgetmantpd,
+  e_vgetmantss,
+  e_vgetmantsd,
+  e_vinsertf128,
+  e_vinserti128,
+  e_vinsertps,
+  e_vinsertf32x4,
+  e_vinsertf64x2,
+  e_vinsertf32x8,
+  e_vinsertf64x4,
+  e_vinserti32x4,
+  e_vinserti64x2,
+  e_vinserti32x8,
+  e_vinserti64x4,
+  e_vmaskmovpd,
+  e_vmaskmovps,
+  e_vmaxpd,
+  e_vmaxps,
+  e_vmaxsd,
+  e_vmaxss,
+  e_vminpd,
+  e_vminps,
+  e_vminsd,
+  e_vminss,
+  e_vmovapd,
+  e_vmovaps,
+  e_vmovddup,
+  e_vmovdqa,
+  e_vmovdqa32,
+  e_vmovdqa64,
+  e_vmovdqu32,
+  e_vmovdqu64,
+  e_vmovdqu8,
+  e_vmovdqu16,
+  e_vmovdqu,
+  e_vmovhlps,
+  e_vmovhpd,
+  e_vmovhps,
+  e_vmovlhps,
+  e_vmovlpd,
+  e_vmovlps,
+  e_vmovntps,
+  e_vmovq,
+  e_vmovsd,
+  e_vmovshdup,
+  e_vmovsldup,
+  e_vmovss,
+  e_vmovupd,
+  e_vmovups,
+  e_vmulpd,
+  e_vmulps,
+  e_vmulsd,
+  e_vmulss,
+  e_vorpd,
+  e_vorps,
+  e_vpabsb,
+  e_vpabsd,
+  e_vpabsw,
+  e_vpackssdw,
+  e_vpacksswb,
+  e_vpackusdw,
+  e_vpackuswb,
+  e_vpaddb,
+  e_vpaddd,
+  e_vpaddq,
+  e_vpaddsb,
+  e_vpaddsw,
+  e_vpaddusb,
+  e_vpaddusw,
+  e_vpaddw,
+  e_vpalignr,
+  e_vpand,
+  e_vpandn,
+  e_vpandd,
+  e_vpandq,
+  e_vpandnd,
+  e_vpandnq,
+  e_vpavgb,
+  e_vpavgw,
+  e_vpblendd,
+  e_vpbroadcastb,
+  e_vpbroadcastd,
+  e_vpbroadcastq,
+  e_vpbroadcastw,
+  e_vpcmpeqb,
+  e_vpcmpeqd,
+  e_vpcmpeqq,
+  e_vpcmpeqw,
+  e_vpcmpgtb,
+  e_vpcmpgtd,
+  e_vpcmpgtq,
+  e_vpcmpgtw,
+  e_vpcompressd,
+  e_vpcompressq,
+  e_vpconflictd,
+  e_vpconflictq,
+  e_vperm2f128,
+  e_vperm2i128,
+  e_vpermd,
+  e_vpermi2b,
+  e_vpermi2w,
+  e_vpermi2d,
+  e_vpermi2q,
+  e_vpermi2ps, 
+  e_vpermi2pd, 
+  e_vpermt2b,
+  e_vpermt2w,
+  e_vpermt2d,
+  e_vpermt2q,
+  e_vpermt2ps, 
+  e_vpermt2pd, 
+  e_vpermb,
+  e_vpermw,
+  e_vpermilpd,
+  e_vpermilps,
+  e_vpermpd,
+  e_vpermps,
+  e_vpermq,
+  e_vpexpandd,
+  e_vpexpandq,
+  e_vplzcntd,
+  e_vplzcntq,
+  e_vpextrb,
+  e_vpextrd,
+  e_vpextrq,
+  e_vpextrw,
+  e_vpgatherdd,
+  e_vpgatherdq,
+  e_vpgatherqd,
+  e_vpgatherqq,
+  e_vpinsrb,
+  e_vpinsrd,
+  e_vpinsrq,
+  e_vpinsrw,
+  e_vpmaddubsw,
+  e_vpmaddwd,
+  e_vpmaskmovd,
+  e_vpmaskmovq,
+  e_vpmaxsb,
+  e_vpmaxsd,
+  e_vpmaxsw,
+  e_vpmaxub,
+  e_vpmaxud,
+  e_vpmaxuw,
+  e_vpmaxsq,
+  e_vpmaxuq,
+  e_vpminsb,
+  e_vpminsd,
+  e_vpminsw,
+  e_vpminub,
+  e_vpminud,
+  e_vpminuw,
+  e_vpminsq,
+  e_vpminuq,
+  e_vpmovsdb,
+  e_vpmovsdw,
+  e_vpmovsqb,
+  e_vpmovsqd,
+  e_vpmovsqw,
+  e_vpmovswb,
+  e_vpmovsxbd,
+  e_vpmovsxbq,
+  e_vpmovsxbw,
+  e_vpmovsxdq,
+  e_vpmovsxwd,
+  e_vpmovsxwq,
+  e_vpmovzxbd,
+  e_vpmovzxbq,
+  e_vpmovzxbw,
+  e_vpmovzxdq,
+  e_vpmovzxwd,
+  e_vpmovzxwq,
+  e_vpmuldq,
+  e_vpmulhrsw,
+  e_vpmulhuw,
+  e_vpmulhw,
+  e_vpmulld,
+  e_vpmullw,
+  e_vpmuludq,
+  e_vpor,
+  e_vpord,
+  e_vporq,
+  e_vprolvd,
+  e_vprolvq,
+  e_vprold,
+  e_vprolq,
+  e_vprorvd,
+  e_vprorvq,
+  e_vprord,
+  e_vprorq,
+  e_vpscatterdd,
+  e_vpscatterdq,  
+  e_vpscatterqd,
+  e_vpscatterqq,
+  e_vpsadbw,
+  e_vpshufb,
+  e_vpshufd,
+  e_vpshufhw,
+  e_vpshuflw,
+  e_vpslld,
+  e_vpslldq,
+  e_vpsllq,
+  e_vpsllvd,
+  e_vpsllvq,
+  e_vpsllw,
+  e_vpsrad,
+  e_vpsravd,
+  e_vpsraw,
+  e_vpsrld,
+  e_vpsrldq,
+  e_vpsrlq,
+  e_vpsrlvd,
+  e_vpsrlvq,
+  e_vpsrlw,
+  e_vpsubb,
+  e_vpsubd,
+  e_vpsubq,
+  e_vpsubsb,
+  e_vpsubsw,
+  e_vpsubusb,
+  e_vpsubusw,
+  e_vpsubw,
+  e_vpunpckhbw,
+  e_vpunpckhdq,
+  e_vpunpckhqdq,
+  e_vpunpckhwd,
+  e_vpunpcklbw,
+  e_vpunpckldq,
+  e_vpunpcklqdq,
+  e_vpunpcklwd,
+  e_vpxor,
+  e_vshufpd,
+  e_vshufps,
+  e_vshuff32x4,
+  e_vshuff64x2,
+  e_vsqrtpd,
+  e_vsqrtps,
+  e_vsqrtsd,
+  e_vsqrtss,
+  e_vsubpd,
+  e_vsubps,
+  e_vsubsd,
+  e_vsubss,
+  e_vtestpd,
+  e_vtestps,
+  e_vucomisd,
+  e_vucomiss,
+  e_vunpckhpd,
+  e_vunpckhps,
+  e_vunpcklpd,
+  e_vunpcklps,
+  e_vxorpd,
+  e_vxorps,
+  e_vzeroall,
+  e_vzeroupper,
+  e_vmovntpd,
+  e_vcvttsd2usi,
+  e_vcvttss2usi,
+  e_vcvtsd2usi,
+  e_vcvtss2usi,
+  e_vcvtusi2sd,
+  e_vcvtusi2ss,
+  e_vmovntdq,
+  e_vpxord,
+  e_vpxorq,
+  e_vrangeps,
+  e_vrangepd,
+  e_vrangess,
+  e_vrangesd,
+  e_vrcp14ps,
+  e_vrcp14pd,
+  e_vrcp14ss,
+  e_vrcp14sd,
+  e_vreduceps,
+  e_vreducepd,
+  e_vreducess,
+  e_vreducesd,
+  e_vpsrlvw,
+  e_vpmovuswb,
+  e_vpsravw,
+  e_vpsravq,
+  e_vpmovusdb,
+  e_vpsllvw,
+  e_vscatterdps,
+  e_vscatterdpd,
+  e_vscatterqps,
+  e_vscatterqpd,
+  e_vrsqrt14ps,
+  e_vrsqrt14pd,
+  e_vrsqrt14ss,
+  e_vrsqrt14sd,
+  e_vpmovusqb,
+  e_vpmovusdw,
+  e_vpmovusqw,
+  e_vpmovusqd,
+  e_vbroadcastf32x4,
+  e_vpabsq,
+  e_vmovntdqa,
+  e_vpbroadcastmb2q,
+  e_vpmovwb,
+  e_vpmovdb,
+  e_vpmovqb,
+  e_vpmovdw,
+  e_vpmovqw,
+  e_vpmovqd,
+  e_vpmultishiftqb,
+  e_vpmadd52luq,
+  e_vpmadd52huq,
+  e_vpternlogd,
+  e_vpternlogq,
+  e_vrndscaleps,
+  e_vrndscalepd,
+  e_vrndscaless,
+  e_vrndscalesd,
+  e_vdbpsadbw,
+  e_vmpsadbw,
+  e_vphaddw,
+  e_vphaddd,
+  e_vphaddsw,
+  e_vphsubw,
+  e_vphsubd,
+  e_vphsubsw,
+  e_vpmovmskb,
+  e_andn,
+  e_bextr,
+  e_blsi,
+  e_blsmsk,
+  e_blsr,
+  e_bzhi,
+  e_lzcnt,
+  e_mulx,
+  e_pdep,
+  e_pext,
+  e_rorx,
+  e_shlx,
+  e_shrx,
+  e_sarx,
+  e_tzcnt,
+
+  e_vcvtsi2sdl,
+  e_vcvtsi2ssl,
+  e_kandb,
+  e_kandd,
+  e_kandw,
+  e_kandq,
+  e_kandnb,
+  e_kandnd,
+  e_kandnw,
+  e_kandnq,
+  e_knotb,
+  e_knotd,
+  e_knotw,
+  e_knotq,
+  e_korb,
+  e_kord,
+  e_korw,
+  e_korq,
+  e_kxnorb,
+  e_kxnord,
+  e_kxnorw,
+  e_kxnorq,
+  e_kxorb,
+  e_kxord,
+  e_kxorw,
+  e_kxorq,
+  e_kaddb,
+  e_kaddd,
+  e_kaddw,
+  e_kaddq,
+  e_kunpckbw,
+  e_kunpckwd,
+  e_kunpckdq,
+  e_kmovb,
+  e_kmovd,
+  e_kmovw,
+  e_kmovq,
+  e_kortestd,
+  e_ktestb,
+  e_ktestd,
+  e_ktestw,
+  e_ktestq,
+  e_vcmpeqpd,
+  e_vcmpeqsd,
+  e_vcmpeqss,
+  e_vcmpeqps,
+  e_kortestb,
+  e_kortestw,
+  e_kortestq,
+
   e_vmread,
   e_vmwrite,
   e_vsyscall,
diff --git a/common/src/arch-x86.C b/common/src/arch-x86.C
index 5ab218a..3b91c8e 100644
--- a/common/src/arch-x86.C
+++ b/common/src/arch-x86.C
@@ -57,6 +57,9 @@
 #include "common/src/wtxKludges.h"
 #endif
 
+// #define VEX_DEBUG
+// #define VEX_PEDANTIC
+
 using namespace std;
 using namespace boost::assign;
 
@@ -74,17 +77,22 @@ enum {
 };
 
 // SSE
+/** START_DYNINST_TABLE_DEF(sse_table, SSE, NO) */
 enum {
-  SSE10=0, SSE11, SSE12, SSE13, SSE14, SSE15, SSE16, SSE17,
+  SSE10 = 0, SSE11, SSE12, SSE13, SSE14, SSE15, SSE16, SSE17, 
   SSE28, SSE29, SSE2A, SSE2B, SSE2C, SSE2D, SSE2E, SSE2F,
+         SSE41, SSE42,        SSE44, SSE45, SSE46, SSE47,
+  SSE4A, SSE4B,
   SSE50, SSE51, SSE52, SSE53, SSE54, SSE55, SSE56, SSE57,
   SSE58, SSE59, SSE5A, SSE5B, SSE5C, SSE5D, SSE5E, SSE5F,
   SSE60, SSE61, SSE62, SSE63, SSE64, SSE65, SSE66, SSE67,
   SSE68, SSE69, SSE6A, SSE6B, SSE6C, SSE6D, SSE6E, SSE6F,
-  SSE70, SSE74, SSE75, SSE76,
-  SSE78, SSE79, SSE7C, SSE7D, SSE7E, SSE7F,
-  SSEB8,
-  SSEC2, SSEC4, SSEC5, SSEC6,
+  SSE70, SSE71, SSE72, SSE73, SSE74, SSE75, SSE76, SSE77,
+  SSE78, SSE79,        SSE7B, SSE7C, SSE7D, SSE7E, SSE7F,
+  SSE90, SSE91,        SSE93,
+  SSE98, SSE99,
+  SSEB8,                                    SSEBE,
+                SSEC2, SSEC4, SSEC5, SSEC6,
   SSED0, SSED1, SSED2, SSED3, SSED4, SSED5, SSED6, SSED7,
   SSED8, SSED9, SSEDA, SSEDB, SSEDC, SSEDD, SSEDE, SSEDF,
   SSEE0, SSEE1, SSEE2, SSEE3, SSEE4, SSEE5, SSEE6, SSEE7,
@@ -92,30 +100,372 @@ enum {
   SSEF0, SSEF1, SSEF2, SSEF3, SSEF4, SSEF5, SSEF6, SSEF7,
   SSEF8, SSEF9, SSEFA, SSEFB, SSEFC, SSEFD, SSEFE, SSEFF
 };
+/** END_DYNINST_TABLE_DEF */
+
+// SSE VEX multiplexing table
+/** START_DYNINST_TABLE_DEF(sse_vex_table, SSE, YES) */
+enum { /** AUTOGENERATED */
+  SSE10_66 = 0, SSE10_F2, SSE10_F3, SSE10_NO,
+  SSE12_F2,           SSE12_F3, SSE12_NO,
+  SSE13_66,                     SSE13_NO,
+  SSE14_66,                     SSE14_NO,
+  SSE15_66,                     SSE15_NO,
+  SSE16_66,           SSE16_F3, SSE16_NO,
+  SSE28_66,                     SSE28_NO,
+  SSE2A_F2,           SSE2A_F3,
+  SSE2B_66,                     SSE2B_NO,
+  SSE2C_F2,           SSE2C_F3,
+  SSE2D_F2,           SSE2D_F3,
+  SSE2E_66,                     SSE2E_NO,
+  SSE2F_66,                     SSE2F_NO,
+  SSE41_66,                     SSE41_NO,
+  SSE42_66,                     SSE42_NO,
+  SSE44_66,                     SSE44_NO,
+  SSE45_66,                     SSE45_NO,
+  SSE46_66,                     SSE46_NO,
+  SSE47_66,                     SSE47_NO,
+  SSE4A_66,                     SSE4A_NO,
+  SSE4B_66,                     SSE4B_NO,
+  SSE51_66, SSE51_F2, SSE51_F3, SSE51_NO,
+  SSE54_66,                     SSE54_NO,
+  SSE55_66,                     SSE55_NO,
+  SSE56_66,                     SSE56_NO,
+  SSE57_66,                     SSE57_NO,
+  SSE58_66, SSE58_F2, SSE58_F3, SSE58_NO,
+  SSE59_66, SSE59_F2, SSE59_F3, SSE59_NO,
+  SSE5A_66, SSE5A_F2, SSE5A_F3, SSE5A_NO,
+  SSE5B_66, SSE5B_F3,           SSE5B_NO,
+  SSE5C_66, SSE5C_F2, SSE5C_F3, SSE5C_NO,
+  SSE5D_66, SSE5D_F2, SSE5D_F3, SSE5D_NO,
+  SSE5E_66, SSE5E_F2, SSE5E_F3, SSE5E_NO,
+  SSE5F_66, SSE5F_F2, SSE5F_F3, SSE5F_NO,
+  SSE60_66,
+  SSE61_66,
+  SSE62_66,
+  SSE63_66,
+  SSE64_66,
+  SSE65_66,
+  SSE66_66,
+  SSE67_66,
+  SSE68_66,
+  SSE69_66,
+  SSE6A_66,
+  SSE6B_66,
+  SSE6C_66,
+  SSE6D_66,
+  SSE6F_66, SSE6F_F2, SSE6F_F3,
+  SSE70_66, SSE70_F2, SSE70_F3,
+  SSE71_66,
+  SSE72_66,
+  SSE73_66,
+  SSE74_66,
+  SSE75_66,
+  SSE76_66,
+  SSE78_66, SSE78_F2, SSE78_F3, SSE78_NO,
+  SSE79_66, SSE79_F2, SSE79_F3, SSE79_NO,
+  SSE7A_66, SSE7A_F2, SSE7A_F3,
+  SSE7B_66, SSE7B_F2, SSE7B_F3,
+  SSE7E_F3,
+  SSE90_66,                     SSE90_NO,
+  SSE91_66,                     SSE91_NO,
+  SSE93_66, SSE93_F2,           SSE93_NO,
+  SSE98_66,                     SSE98_NO,
+  SSE99_66,                     SSE99_NO,
+  SSEC2_66, SSEC2_F2, SSEC2_F3, SSEC2_NO,
+  SSEC4_66,
+  SSEC5_66,
+  SSEC6_66,                     SSEC6_NO,
+  SSED1_66,
+  SSED2_66,
+  SSED3_66,
+  SSED4_66,
+  SSED5_66,
+  SSED8_66,
+  SSED9_66,
+  SSEDA_66,
+  SSEDB_66,
+  SSEDC_66,
+  SSEDD_66,
+  SSEDE_66,
+  SSEDF_66,
+  SSEE0_66,
+  SSEE1_66,
+  SSEE2_66,
+  SSEE3_66,
+  SSEE4_66,
+  SSEE5_66,
+  SSEE6_66, SSEE6_F2, SSEE6_F3,
+  SSEE7_66,
+  SSEE8_66,
+  SSEE9_66,
+  SSEEA_66,
+  SSEEB_66,
+  SSEEC_66,
+  SSEED_66,
+  SSEEE_66,
+  SSEEF_66,
+  SSEF1_66,
+  SSEF2_66,
+  SSEF3_66,
+  SSEF4_66,
+  SSEF5_66,
+  SSEF6_66,
+  SSEF8_66,
+  SSEF9_66,
+  SSEFA_66,
+  SSEFB_66,
+  SSEFC_66,
+  SSEFD_66,
+  SSEFE_66,
+};
+/** END_DYNINST_TABLE_DEF */
 
 // SSE BIS
+/** START_DYNINST_TABLE_DEF(sse_bis_table, SSEB, YES) */
 enum {
-	SSEB00=0, SSEB01, SSEB02, SSEB03, SSEB04, SSEB05, SSEB06, SSEB07,
-	SSEB08, SSEB09,	SSEB0A, SSEB0B,
-	SSEB10, SSEB14, SSEB15, SSEB17,
-	SSEB1C, SSEB1D, SSEB1E,
+SSEB00 = 0, SSEB01, SSEB02, SSEB03, SSEB04, SSEB05, SSEB06, SSEB07,
+    SSEB08, SSEB09,	SSEB0A, SSEB0B, SSEB0C, SSEB0D, SSEB0E, SSEB0F,
+    SSEB10, SSEB11, SSEB12, SSEB13, SSEB14, SSEB15, SSEB16, SSEB17,
+    SSEB18, SSEB19, SSEB1A, SSEB1B, SSEB1C, SSEB1D, SSEB1E, SSEB1F,
 	SSEB20, SSEB21, SSEB22, SSEB23, SSEB24, SSEB25, 
-	SSEB28, SSEB29, SSEB2A, SSEB2B,
-	SSEB30, SSEB31, SSEB32, SSEB33, SSEB34, SSEB35, SSEB37,
+	SSEB28, SSEB29, SSEB2A, SSEB2B, SSEB2C, SSEB2D, SSEB2E, SSEB2F,
+	SSEB30, SSEB31, SSEB32, SSEB33, SSEB34, SSEB35, SSEB36, SSEB37,
 	SSEB38, SSEB39,	SSEB3A, SSEB3B, SSEB3C, SSEB3D, SSEB3E, SSEB3F,
-	SSEB40, SSEB41,
-	SSEBF0, SSEBF1
+	SSEB40, SSEB41, SSEB42, SSEB43, SSEB44, SSEB45, SSEB46, SSEB47,
+                                    SSEB4C, SSEB4D, SSEB4E, SSEB4F,
+    SSEB58, SSEB59, SSEB5A,
+                                            SSEB65, SSEB66,
+                                            SSEB75, SSEB76, SSEB77,
+    SSEB78, SSEB79,                         SSEB7D, SSEB7E, SSEB7F,
+                            SSEB83,
+    SSEB88, SSEB89,         SSEB8B, SSEB8C, SSEB8D, SSEB8E,
+    SSEB90, SSEB91, SSEB92, SSEB93,
+                                                    SSEB96, SSEB97,
+    SSEB98, SSEB99, SSEB9A, SSEB9B, SSEB9C, SSEB9D, SSEB9E, SSEB9F,
+    SSEBA0, SSEBA1, SSEBA2, SSEBA3,                 SSEBA6, SSEBA7,
+    SSEBA8, SSEBA9, SSEBAA, SSEBAB, SSEBAC, SSEBAD, SSEBAE, SSEBAF,
+                                    SSEBB4, SSEBB5, SSEBB6, SSEBB7,
+    SSEBB8, SSEBB9, SSEBBA, SSEBBB, SSEBBC, SSEBBD, SSEBBE, SSEBBF,
+                                    SSEBC4,
+    SSEBC8,         SSEBCA, SSEBCB, SSEBCC, SSEBCD,
+    SSEBF0, SSEBF1, SSEBF2,                 SSEBF5, SSEBF6, SSEBF7
 };
+/** END_DYNINST_TABLE_DEF */
+
+
+// SSEB rows: not, F3, 66, F2, 66&F2
+// SSE BIS VEX mult table
+/** START_DYNINST_TABLE_DEF(sse_bis_vex_table, SSEB, YES) */
+enum { /** AUTOGENERATED */
+    SSEB00_66 = 0,
+    SSEB01_66,
+    SSEB02_66,
+    SSEB03_66,
+    SSEB04_66,
+    SSEB05_66,
+    SSEB06_66,
+    SSEB07_66,
+    SSEB0B_66,
+    SSEB0C_66,
+    SSEB0D_66,
+    SSEB10_66,              SSEB10_F3,
+    SSEB11_66,              SSEB11_F3,
+    SSEB12_66,              SSEB12_F3,
+    SSEB13_66,              SSEB13_F3,
+    SSEB14_66,              SSEB14_F3,
+    SSEB15_66,              SSEB15_F3,
+    SSEB16_66,
+    SSEB18_66,
+    SSEB19_66,
+    SSEB1A_66,
+    SSEB1C_66,
+    SSEB1D_66,
+    SSEB1E_66,
+    SSEB1F_66,
+    SSEB20_66,              SSEB20_F3,
+    SSEB21_66,              SSEB21_F3,
+    SSEB22_66,              SSEB22_F3,
+    SSEB23_66,              SSEB23_F3,
+    SSEB24_66,              SSEB24_F3,
+    SSEB25_66,              SSEB25_F3,
+    SSEB26_F3,
+    SSEB27_F3,
+    SSEB28_66,              SSEB28_F3,
+    SSEB29_66,              SSEB29_F3,
+    SSEB2A_66,              SSEB2A_F3,
+    SSEB2B_66,
+    SSEB30_66,              SSEB30_F3,
+    SSEB31_66,              SSEB31_F3,
+    SSEB32_66,              SSEB32_F3,
+    SSEB33_66,              SSEB33_F3,
+    SSEB34_66,              SSEB34_F3,
+    SSEB35_66,              SSEB35_F3,
+    SSEB36_66,
+    SSEB37_66,
+    SSEB38_66,              SSEB38_F3,
+    SSEB39_66,              SSEB39_F3,
+    SSEB3A_66,
+    SSEB3B_66,
+    SSEB3C_66,
+    SSEB3D_66,
+    SSEB3E_66,
+    SSEB3F_66,
+    SSEB40_66,
+    SSEB42_66,
+    SSEB43_66,
+    SSEB44_66,
+    SSEB45_66,
+    SSEB46_66,
+    SSEB47_66,
+    SSEB4C_66,
+    SSEB4D_66,
+    SSEB4E_66,
+    SSEB4F_66,
+    SSEB65_66,
+    SSEB66_66,
+    SSEB75_66,
+    SSEB76_66,
+    SSEB77_66,
+    SSEB7D_66,
+    SSEB7E_66,
+    SSEB7F_66,
+    SSEB83_66,
+    SSEB88_66,
+    SSEB89_66,
+    SSEB8B_66,
+    SSEB8C_66,
+    SSEB8D_66,
+    SSEB8E_66,
+    SSEB90_66,
+    SSEB91_66,
+    SSEB92_66,
+    SSEB93_66,
+    SSEB96_66,
+    SSEB97_66,
+    SSEB98_66,
+    SSEB99_66,
+    SSEB9A_66,
+    SSEB9B_66,
+    SSEB9C_66,
+    SSEB9D_66,
+    SSEB9E_66,
+    SSEB9F_66,
+    SSEBA0_66,
+    SSEBA1_66,
+    SSEBA2_66,
+    SSEBA3_66,
+    SSEBA6_66,
+    SSEBA7_66,
+    SSEBA8_66,
+    SSEBA9_66,
+    SSEBAA_66,
+    SSEBAB_66,
+    SSEBAC_66,
+    SSEBAD_66,
+    SSEBAE_66,
+    SSEBAF_66,
+    SSEBB4_66,
+    SSEBB5_66,
+    SSEBB6_66,
+    SSEBB7_66,
+    SSEBB8_66,
+    SSEBB9_66,
+    SSEBBA_66,
+    SSEBBB_66,
+    SSEBBC_66,
+    SSEBBD_66,
+    SSEBBE_66,
+    SSEBBF_66,
+    SSEBC4_66,
+    SSEBC6_66,
+    SSEBC7_66,
+    SSEBC8_66,
+    SSEBCA_66,
+    SSEBCB_66,
+    SSEBCC_66,
+    SSEBCD_66,
+                                     SSEBF2_NO,
+               SSEBF5_F2, SSEBF5_F3, SSEBF5_NO,
+               SSEBF6_F2, SSEBF6_F3,
+    SSEBF7_66, SSEBF7_F2, SSEBF7_F3,  SSEBF7_NO
+};
+/** END_DYNINST_TABLE_DEF */
 
 // SSE TER 
+/** START_DYNINST_TABLE_DEF(sse_ter_table, SSET, NO) */
 enum {
-	SSET08=0, SSET09,
-	SSET0A, SSET0B, SSET0C, SSET0D, SSET0E, SSET0F,
-	SSET14, SSET15, SSET16, SSET17,
-	SSET20, SSET21, SSET22,
-	SSET40, SSET41, SSET42,
-	SSET60, SSET61, SSET62, SSET63
+SSET00 = 0, SSET01, SSET02, SSET03, SSET04, SSET05, SSET06,
+    SSET08, SSET09, SSET0A, SSET0B, SSET0C, SSET0D, SSET0E, SSET0F,
+	                                SSET14, SSET15, SSET16, SSET17,
+	SSET18, SSET19, SSET1A, SSET1B,         SSET1D,
+	SSET20, SSET21, SSET22, SSET23,         SSET25, SSET26, SSET27,
+    SSET30,         SSET32, SSET33,
+    SSET38, SSET39, SSET3A, SSET3B,
+	SSET40, SSET41, SSET42,                         SSET46,
+                    SSET4A, SSET4B, SSET4C,
+    SSET50, SSET51,                 SSET54, SSET55, SSET56, SSET57,
+	SSET60, SSET61, SSET62, SSET63,                 SSET66, SSET67,
+    SSETF0
+};
+/** END_DYNINST_TABLE_DEF */
+
+// SSET rows:  not, 66, F2
+// SSE TER VEX Mult
+/** START_DYNINST_TABLE_DEF(sse_vex_ter_table, SSET, NO) */
+enum { /** AUTOGENERATED */
+  SSET00_66 = 0,
+  SSET01_66,
+  SSET03_66,
+  SSET04_66,
+  SSET05_66,
+  SSET08_66,
+  SSET09_66,
+  SSET0A_66,
+  SSET0B_66,
+  SSET0C_66,
+  SSET0F_66,
+  SSET14_66,
+  SSET16_66,
+  SSET17_66,
+  SSET18_66,
+  SSET19_66,
+  SSET1A_66,
+  SSET1B_66,
+  SSET1D_66,
+  SSET1E_66,
+  SSET1F_66,
+  SSET20_66,
+  SSET21_66,
+  SSET22_66,
+  SSET23_66,
+  SSET25_66,
+  SSET26_66,
+  SSET27_66,
+  SSET30_66,
+  SSET31_66,
+  SSET32_66,
+  SSET33_66,
+  SSET38_66,
+  SSET39_66,
+  SSET3A_66,
+  SSET3B_66,
+  SSET3E_66,
+  SSET3F_66,
+  SSET42_66,
+  SSET4A_66,
+  SSET4B_66,
+  SSET4C_66,
+  SSET50_66,
+  SSET51_66,
+  SSET54_66,
+  SSET55_66,
+  SSET56_66,
+  SSET57_66,
+  SSET66_66,
+  SSET67_66,
+  SSETF0_F2
 };
+/** END_DYNINST_TABLE_DEF */
 
 // SSE groups
 enum {
@@ -128,9 +478,49 @@ enum {
     GrpD8=0, GrpD9, GrpDA, GrpDB, GrpDC, GrpDD, GrpDE, GrpDF
 };
 
+// VEX tables
+enum {
+  VEXL00=0
+};
+
+/* Vex instructions that need extra decoding with the W bit */
+/** START_DYNINST_TABLE_DEF(vex_w_table, VEXW, NO) */
+enum {
+VEXW00 = 0, VEXW01, VEXW02, VEXW03, VEXW04, VEXW05, VEXW06, VEXW07,
+  VEXW08, VEXW09, VEXW0A, VEXW0B, VEXW0C, VEXW0D, VEXW0E, VEXW0F,
+  VEXW10, VEXW11, VEXW12, VEXW13, VEXW14, VEXW15, VEXW16, VEXW17,
+  VEXW18, VEXW19, VEXW1A, VEXW1B, VEXW1C, VEXW1D, VEXW1E, VEXW1F,
+  VEXW20, VEXW21, VEXW22, VEXW23, VEXW24, VEXW25, VEXW26, VEXW27,
+  VEXW28, VEXW29, VEXW2A, VEXW2B, VEXW2C, VEXW2D, VEXW2E, VEXW2F,
+  VEXW30, VEXW31, VEXW32, VEXW33, VEXW34, VEXW35, VEXW36, VEXW37,
+  VEXW38, VEXW39, VEXW3A, VEXW3B, VEXW3C, VEXW3D, VEXW3E, VEXW3F,
+  VEXW40, VEXW41, VEXW42, VEXW43, VEXW44, VEXW45, VEXW46, VEXW47,
+  VEXW48, VEXW49, VEXW4A, VEXW4B, VEXW4C, VEXW4D, VEXW4E, VEXW4F,
+  VEXW50, VEXW51, VEXW52, VEXW53, VEXW54, VEXW55, VEXW56, VEXW57,
+  VEXW58, VEXW59, VEXW5A, VEXW5B, VEXW5C, VEXW5D, VEXW5E, VEXW5F,
+  VEXW60, VEXW61, VEXW62, VEXW63, VEXW64, VEXW65, VEXW66, VEXW67,
+  VEXW68, VEXW69, VEXW6A, VEXW6B, VEXW6C, VEXW6D, VEXW6E, VEXW6F,
+  VEXW70, VEXW71, VEXW72, VEXW73, VEXW74, VEXW75, VEXW76, VEXW77,
+  VEXW78, VEXW79, VEXW7A, VEXW7B, VEXW7C, VEXW7D, VEXW7E, VEXW7F,
+  VEXW80, VEXW81, VEXW82, VEXW83, VEXW84, VEXW85, VEXW86, VEXW87,
+  VEXW88, VEXW89, VEXW8A, VEXW8B, VEXW8C, VEXW8D, VEXW8E, VEXW8F,
+  VEXW90, VEXW91, VEXW92
+};
+/** END_DYNINST_TABLE_DEF */
+
+#define VEXW_MAX VEXW92
+
+/* SIMD op conversion table */
+static char vex3_simdop_convert[3][4] = {
+  {0, 2,  1, 3},
+  {0, 2,  1, 3},
+  {0, 1, -1, 2}
+};
+
 #define Zz   { 0, 0 }
 #define ImplImm { am_ImplImm, op_b }
 #define Ap   { am_A, op_p }
+#define Bv   { am_B, op_v}
 #define Cd   { am_C, op_d }
 #define Dd   { am_D, op_d }
 #define Eb   { am_E, op_b }
@@ -140,7 +530,7 @@ enum {
 #define Ep   { am_E, op_p }
 #define Ev   { am_E, op_v }
 #define Ew   { am_E, op_w }
-#define Ey	 { am_E, op_y }
+ #define Ey	 { am_E, op_y }
 #define Fv   { am_F, op_v }
 #define Gb   { am_G, op_b }
 #define Gd   { am_G, op_d }
@@ -148,6 +538,12 @@ enum {
 #define Gw   { am_G, op_w }
 #define Gf   { am_G, op_f }
 #define Gfd  { am_G, op_dbl }
+#define Hps  { am_H, op_ps }
+#define Hpd  { am_H, op_pd }
+#define Hss  { am_H, op_ss }
+#define Hsd  { am_H, op_sd }
+#define Hdq  { am_H, op_dq }
+#define Hqq  { am_H, op_qq }
 #define Ib   { am_I, op_b }
 #define Iv   { am_I, op_v }
 #define Iw   { am_I, op_w }
@@ -167,6 +563,7 @@ enum {
 #define Mf   { am_M, op_f }
 #define Mfd  { am_M, op_dbl }
 #define M14  { am_M, op_14 }
+#define Nss  { am_N, op_ss }
 #define Ob   { am_O, op_b }
 #define Ov   { am_O, op_v }
 #define Pd   { am_P, op_d }
@@ -182,20 +579,24 @@ enum {
 #define RMw  { am_RM, op_w }
 #define Td   { am_T, op_d }
 #define UMd	 { am_UM, op_d }
+#define Ups  { am_U, op_ps }
+#define Upd  { am_U, op_pd }
 #define Sw   { am_S, op_w }
 #define Vd   { am_V, op_d }
 #define Vdq  { am_V, op_dq }
 #define Vpd  { am_V, op_pd }
 #define Vps  { am_V, op_ps }
 #define Vq   { am_V, op_q }
-#define VRq  { am_VR, op_q }
-#define VRdq { am_VR, op_dq }
 #define Vss  { am_V, op_ss }
 #define Vsd  { am_V, op_sd }
 #define Wdq  { am_W, op_dq }
 #define Wpd  { am_W, op_pd }
+#define Wqq  { am_W, op_qq }
 #define Wps  { am_W, op_ps }
 #define Wq   { am_W, op_q }
+#define Wb   { am_W, op_b }
+#define Ww   { am_W, op_w }
+#define Wd   { am_W, op_d }
 #define Ws   { am_W, op_s }
 #define Wsd  { am_W, op_sd }
 #define Wss  { am_W, op_ss }
@@ -651,6 +1052,7 @@ COMMON_EXPORT dyn_hash_map<entryID, std::string> entryNames_IAPI = map_list_of
   (e_phsubd, "phsubd")
   (e_phsubsw, "phsubsw")
   (e_phsubw, "phsubw")
+  (e_phsubsw, "phsubsw")
   (e_pinsrb, "pinsrb")
   (e_pinsrd_pinsrq, "pinsrd/pinsrq")
   (e_pinsrw, "pinsrw")
@@ -792,6 +1194,19 @@ COMMON_EXPORT dyn_hash_map<entryID, std::string> entryNames_IAPI = map_list_of
   (e_shrd, "shrd")
   (e_shufpd, "shufpd")
   (e_shufps, "shufps")
+  (e_sha1rnds4, "sha1rnds4")
+  (e_sha1nexte, "sha1nexte")
+  (e_sha1msg1, "sha1msg1")
+  (e_sha1msg2, "sha1msg2")
+  (e_sha256rnds2, "sha256rnds2")
+  (e_sha256msg1, "sha256msg1")
+  (e_sha256msg2, "sha256msg2")
+  (e_shlx, "shlx")
+  (e_sarx, "sarx")
+  (e_prefetchwt1, "prefetchwt1")
+  (e_clflushopt, "clflushopt")
+  (e_clwb, "clwb")
+  (e_pcommit, "pcommit")
   (e_sidt, "sidt")
   (e_sldt, "sldt")
   (e_smsw, "smsw")
@@ -836,9 +1251,568 @@ COMMON_EXPORT dyn_hash_map<entryID, std::string> entryNames_IAPI = map_list_of
   (e_xor, "xor")
   (e_xorpd, "xorpd")
   (e_xorps, "xorps")
-  (e_fp_generic, "[FIXME: GENERIC FPU INSN]")
-  (e_3dnow_generic, "[FIXME: GENERIC 3DNow INSN]")
-  (e_No_Entry, "No_Entry")
+   
+  (e_vmpsadbw, "vmpsadbw") 
+  (e_vphaddw, "vphaddw")
+  (e_vphaddd, "vphaddd")
+  (e_vphaddsw, "vpaddsw")
+  (e_vphsubw, "vphsubw")
+  (e_vphsubd, "vphsubd")
+  (e_vpmaddubsw, "vpmaddubsw")
+  (e_vpmaddwd, "vpmaddwd")
+  (e_vpmovmskb, "vpmovmskb")
+  (e_andn, "andn")
+  (e_bextr, "bextr")
+  (e_blsi, "blsi")
+  (e_blsmsk, "blsmsk")
+  (e_blsr, "blsr")
+  (e_bzhi, "bzhi")
+  (e_lzcnt, "lzcnt")
+  (e_mulx, "mulx")
+  (e_pdep, "pdep")
+  (e_pext, "pext")
+  (e_rorx, "rorx")
+  (e_sarx, "sarx")
+  (e_shlx, "shlx")
+  (e_shrx, "shrx")
+  (e_tzcnt, "tzcnt")
+  (e_vaddpd, "vaddpd")
+  (e_vaddps, "vaddps")
+  (e_vaddsd, "vaddsd")
+  (e_vaddss, "vaddss")
+  (e_vandnpd, "vandnpd")
+  (e_vandnps, "vandnps")
+  (e_vandpd, "vandpd")
+  (e_vandps, "vandps")
+  (e_valignd, "valignd")
+  (e_valignq, "valignq")
+  (e_vbroadcastf128, "vbroadcastf128")
+  (e_vbroadcasti128, "vbroadcasti128")
+  (e_vbroadcastsd, "vbroadcastsd")
+  (e_vbroadcastss, "vbroadcastss")
+  (e_vblendmps, "vblendmps")
+  (e_vblendmpd, "vblendmpd")
+  (e_vblendps, "vblendps")
+  (e_vblendvpd, "vblendpd")
+  (e_vblendvps, "vblendvps")
+  (e_vblendvpd, "vblendvpd")
+  (e_vpblendmb, "vpblendmb")
+  (e_vpblendmw, "vpblendmw")
+  (e_vpblendvb, "vpblendvb")
+  (e_vcmppd, "vcmppd")
+  (e_vcmpps, "vcmpps")
+  (e_vcmpsd, "vcmpsd")
+  (e_vcmpss, "vcmpss")
+  (e_vcomisd, "vcomisd")
+  (e_vcomiss, "vcomiss")
+  (e_vcvtpd2qq, "vcvtpd2qq")
+  (e_vcvtdq2pd, "vcvtdq2pd")
+  (e_vcvtdq2ps, "vcvtdq2ps")
+  (e_vcvtpd2dq, "vcvtpd2dq")
+  (e_vcvtpd2ps, "vcvtpd2ps")
+  (e_vcvtph2ps, "vcvtph2ps")
+  (e_vcvtps2dq, "vcvtps2dq")
+  (e_vcvtps2pd, "vcvtps2pd")
+  (e_vcvtps2ph, "vcvtps2ph")
+  (e_vcvtsd2si, "vcvtsd2si")
+  (e_vcvtsd2ss, "vcvtsd2ss")
+  (e_vcvtsi2sd, "vcvtsi2sd")
+  (e_vcvtsi2ss, "vcvtsi2ss")
+  (e_vcvtss2sd, "vcvtss2sd")
+  (e_vcvtss2si, "vcvtss2si")
+  (e_vcvttpd2dq, "vcvttpd2dq")
+  (e_vcvttps2dq, "vcvttps2dq")
+  (e_vcvttsd2si, "vcvttsd2si")
+  (e_vcvttss2si, "vcvttss2si")
+  (e_vdivpd, "vdivpd")
+  (e_vdivps, "vdivps")
+  (e_vdivsd, "vdivsd")
+  (e_vdivss, "vdivss")
+  (e_vexpandpd, "vexpandpd")
+  (e_vexpandps, "vexpandps")
+  (e_vextractf128, "vextractf128")
+  (e_vextracti128, "vextracti128")
+  (e_vextractf32x4, "vextractf32x4")
+  (e_vextractf64x2, "vextractf64x2")
+  (e_vextractf32x8, "vextractf32x8")
+  (e_vextractf64x4, "vextractf64x4")
+  (e_vextracti32x4, "vextracti32x4")
+  (e_vextracti64x2, "vextracti64x2")
+  (e_vextracti32x8, "vextracti32x8")
+  (e_vextracti64x4, "vextracti64x4")
+  (e_vextractps, "vextractps")
+  (e_vexp2pd, "vexp2pd")
+  (e_vexp2ps, "vexp2ps")
+  (e_vroundpd, "vroundpd")
+  (e_vroundps, "vroundps")
+  (e_vroundsd, "vroundsd")
+  (e_vroundss, "vroundss")
+  (e_vrcp28pd, "vrcp28pd")
+  (e_vrcp28sd, "vrcp28sd")
+  (e_vrcp28ps, "vrcp28ps")
+  (e_vrcp28ss, "vrcp28ss")
+  (e_vrsqrt28pd, "vrsqrt28pd")
+  (e_vrsqrt28sd, "vrsqrt28sd")
+  (e_vrsqrt28ps, "vrsqrt28ps")
+  (e_vrsqrt28ss, "vrsqrt28ss")
+  (e_vfixupimmpd, "vfixupimmpd")
+  (e_vfixupimmps, "vfixupimmps")
+  (e_vfixupimmsd, "vfixupimmsd")
+  (e_vfixupimmss, "vfixupimmss")
+  (e_vfmadd132pd, "vfmadd132pd")
+  (e_vfmadd132ps, "vfmadd132ps")
+  (e_vfmadd132sd, "vfmadd132sd")
+  (e_vfmadd132ss, "vfmadd132ss")
+  (e_vfmadd213pd, "vfmadd213pd")
+  (e_vfmadd213ps, "vfmadd213ps")
+  (e_vfmadd213sd, "vfmadd213sd")
+  (e_vfmadd213ss, "vfmadd213ss")
+  (e_vfmadd231pd, "vfmadd231pd")
+  (e_vfmadd231ps, "vfmadd231ps")
+  (e_vfmadd231sd, "vfmadd231sd")
+  (e_vfmadd231ss, "vfmadd231ss")
+  (e_vfmaddsub132pd, "vfmaddsub132pd")
+  (e_vfmaddsub132ps, "vfmaddsub132ps")
+  (e_vfmaddsub213pd, "vfmaddsub213pd")
+  (e_vfmaddsub213ps, "vfmaddsub213ps")
+  (e_vfmaddsub231pd, "vfmaddsub231pd")
+  (e_vfmaddsub231ps, "vfmaddsub231ps")
+  (e_vfpclassps, "vfpclassps")
+  (e_vfpclasspd, "vfpclasspd")
+  (e_vfpclassss, "vfpclassss")
+  (e_vfpclasssd, "vfpclasssd")
+  (e_vfmsub132pd, "vfmsub132pd")
+  (e_vfmsub132ps, "vfmsub132ps")
+  (e_vfmsub132sd, "vfmsub132sd")
+  (e_vfmsub132ss, "vfmsub132ss")
+  (e_vfmsub213pd, "vfmsub213pd")
+  (e_vfmsub213ps, "vfmsub213ps")
+  (e_vfmsub213sd, "vfmsub213sd")
+  (e_vfmsub213ss, "vfmsub213ss")
+  (e_vfmsub231pd, "vfmsub231pd")
+  (e_vfmsub231ps, "vfmsub231ps")
+  (e_vfmsub231sd, "vfmsub231sd")
+  (e_vfmsub231ss, "vfmsub231ss")
+  (e_vfmsubadd132pd, "vfmsubadd132pd")
+  (e_vfmsubadd132ps, "vfmsubadd132ps")
+  (e_vfmsubadd213pd, "vfmsubadd213pd")
+  (e_vfmsubadd213ps, "vfmsubadd213ps")
+  (e_vfmsubadd231pd, "vfmsubadd231pd")
+  (e_vfmsubadd231ps, "vfmsubadd231ps")
+  (e_vfnmadd132pd, "vfnmadd132pd")
+  (e_vfnmadd132ps, "vfnmadd132ps")
+  (e_vfnmadd132sd, "vfnmadd132sd")
+  (e_vfnmadd132ss, "vfnmadd132ss")
+  (e_vfnmadd213pd, "vfnmadd213pd")
+  (e_vfnmadd213ps, "vfnmadd213ps")
+  (e_vfnmadd213sd, "vfnmadd213sd")
+  (e_vfnmadd213ss, "vfnmadd213ss")
+  (e_vfnmadd231pd, "vfnmadd231pd")
+  (e_vfnmadd231ps, "vfnmadd231ps")
+  (e_vfnmadd231sd, "vfnmadd231sd")
+  (e_vfnmadd231ss, "vfnmadd231ss")
+  (e_vfnmsub132pd, "vfnmsub132pd")
+  (e_vfnmsub132ps, "vfnmsub132ps")
+  (e_vfnmsub132sd, "vfnmsub132sd")
+  (e_vfnmsub132ss, "vfnmsub132ss")
+  (e_vfnmsub213pd, "vfnmsub213pd")
+  (e_vfnmsub213ps, "vfnmsub213ps")
+  (e_vfnmsub213sd, "vfnmsub213sd")
+  (e_vfnmsub213ss, "vfnmsub213ss")
+  (e_vfnmsub231pd, "vfnmsub231pd")
+  (e_vfnmsub231ps, "vfnmsub231ps")
+  (e_vfnmsub231sd, "vfnmsub231sd")
+  (e_vfnmsub231ss, "vfnmsub231ss")
+  (e_vgatherdpd, "vgatherdpd")
+  (e_vgatherdps, "vgatherdps")
+  (e_vgatherqpd, "vgatherqpd")
+  (e_vgatherqps, "vgatherqps")
+  (e_vgetexpps, "vgetexpps")
+  (e_vgetexppd, "vgetexppd")
+  (e_vgetexpss, "vgetexpss")
+  (e_vgetexpsd, "vgetexpsd")
+  (e_vgetmantps, "vgetmantps")
+  (e_vgetmantpd, "vgetmantpd")
+  (e_vgetmantss, "vgetmantss")
+  (e_vgetmantsd, "vgetmantsd")
+  (e_vinsertf128, "vinsertf128")
+  (e_vinserti128, "vinserti128")
+  (e_vinsertps, "vinsertps")
+  (e_vinsertf32x4, "vinsertf32x4")
+  (e_vinsertf64x2, "vinsertf64x2")
+  (e_vinsertf32x8, "vinsertf32x8")
+  (e_vinsertf64x4, "vinsertf64x4")
+  (e_vinserti32x4, "vinserti32x4")
+  (e_vinserti64x2, "vinserti64x2")
+  (e_vinserti32x8, "vinserti32x8")
+  (e_vinserti64x4, "vinserti64x4")
+  (e_vmaskmovpd, "vmaskmovpd")
+  (e_vmaskmovps, "vmaskmovps")
+  (e_vmaxpd, "vmaxpd")
+  (e_vmaxps, "vmaxps")
+  (e_vmaxsd, "vmaxsd")
+  (e_vmaxss, "vmaxss")
+  (e_vminpd, "vminpd")
+  (e_vminps, "vminps")
+  (e_vminsd, "vminsd")
+  (e_vminss, "vminss")
+  (e_vmovapd, "vmovapd")
+  (e_vmovaps, "vmovaps")
+  (e_vmovddup, "vmovddup")
+  (e_vmovdqa, "vmovdqa")
+  (e_vmovdqa32, "vmovdqa32")
+  (e_vmovdqa64, "vmovdqa64")
+  (e_vmovdqu32, "vmovdqu32")
+  (e_vmovdqu64, "vmovdqu64")
+  (e_vmovdqu, "vmovdqu")
+  (e_vmovdqu8, "vmovdqu8")
+  (e_vmovdqu16, "vmovdqu16")
+  (e_vmovhlps, "vmovhlps")
+  (e_vmovhpd, "vmovhpd")
+  (e_vmovhps, "vmovhps")
+  (e_vmovlhps, "vmovlhps")
+  (e_vmovlpd, "vmovlpd")
+  (e_vmovlps, "vmovlps")
+  (e_vmovntps, "vmovntps")
+  (e_vmovq, "vmovq")
+  (e_vmovsd, "vmovsd")
+  (e_vmovshdup, "vmovshdup")
+  (e_vmovsldup, "vmovsldup")
+  (e_vmovss, "vmovss")
+  (e_vmovupd, "vmovupd")
+  (e_vmovups, "vmovups")
+  (e_vmulpd, "vmulpd")
+  (e_vmulps, "vmulps")
+  (e_vmulsd, "vmulsd")
+  (e_vmulss, "vmulss")
+  (e_vorpd, "vorpd")
+  (e_vorps, "vorps")
+  (e_vpabsb, "vpabsb")
+  (e_vpabsd, "vpabsd")
+  (e_vpabsw, "vpabsw")
+  (e_vpackssdw, "vpackssdw")
+  (e_vpacksswb, "vpacksswb")
+  (e_vpackusdw, "vpackusdw")
+  (e_vpackuswb, "vpackuswb")
+  (e_vpaddb, "vpaddb")
+  (e_vpaddd, "vpaddd")
+  (e_vpaddq, "vpaddq")
+  (e_vpaddsb, "vpaddsb")
+  (e_vpaddsw, "vpaddsw")
+  (e_vpaddusb, "vpaddusb")
+  (e_vpaddusw, "vpaddusw")
+  (e_vpaddw, "vpaddw")
+  (e_vpalignr, "vpalignr")
+  (e_vpand, "vpand")
+  (e_vpandn, "vpandn")
+  (e_vpandd, "vpandd")
+  (e_vpandq, "vpandq")
+  (e_vpandnd, "vpandnd")
+  (e_vpandnq, "vpandnq")
+  (e_vpavgb, "vpavgb")
+  (e_vpavgw, "vpavgw")
+  (e_vpblendd, "vpblendd")
+  (e_vpbroadcastb, "vpbroadcastb")
+  (e_vpbroadcastd, "vpbroadcastd")
+  (e_vpbroadcastq, "vpbroadcastq")
+  (e_vpbroadcastw, "vpbroadcastw")
+  (e_vpcmpeqb, "vpcmpeqb")
+  (e_vpcmpeqd, "vpcmpeqd")
+  (e_vpcmpeqq, "vpcmpeqq")
+  (e_vpcmpeqw, "vpcmpeqw")
+  (e_vpcmpgtb, "vpcmpgtb")
+  (e_vpcmpgtd, "vpcmpgtd")
+  (e_vpcmpgtq, "vpcmpgtq")
+  (e_vpcmpgtw, "vpcmpgtw")
+  (e_vpcompressd, "vpcompressd")
+  (e_vpcompressq, "vpcompressq")
+  (e_vpconflictd, "vpconflictd")
+  (e_vpconflictq, "vpconflictq")
+  (e_vperm2f128, "vperm2f128")
+  (e_vperm2i128, "vperm2i128")
+  (e_vpermd, "vpermd")
+  (e_vpermilpd, "vpermilpd")
+  (e_vpermilps, "vpermilps")
+  (e_vpermi2b, "vpermi2b")
+  (e_vpermi2w, "vpermi2w")
+  (e_vpermi2d, "vpermi2d")
+  (e_vpermi2q, "vpermi2q")
+  (e_vpermi2ps, "vpermi2ps")
+  (e_vpermi2pd, "vpermi2pd")
+  (e_vpermt2b, "vpermt2b")
+  (e_vpermt2w, "vpermt2w")
+  (e_vpermt2d, "vpermt2d")
+  (e_vpermt2q, "vpermt2q")
+  (e_vpermt2ps, "vpermt2ps")
+  (e_vpermt2pd, "vpermt2pd")
+  (e_vpermpd, "vpermpd")
+  (e_vpermps, "vpermps")
+  (e_vpermq, "vpermq")
+  (e_vpermb, "vpermb")
+  (e_vpermw, "vpermw")
+  (e_vpextrb, "vpextrb")
+  (e_vpextrd, "vpextrd")
+  (e_vpextrq, "vpextrq")
+  (e_vpextrw, "vpextrw")
+  (e_vpexpandd, "vpexpandd")
+  (e_vpexpandq, "vpexpandq")
+  (e_vplzcntd, "vplzcntd")
+  (e_vplzcntq, "vplzcntq")
+  (e_vpgatherdd, "vpgatherdd")
+  (e_vpgatherdq, "vpgatherdq")
+  (e_vpgatherqd, "vpgatherqd")
+  (e_vpgatherqq, "vpgatherqq")
+  (e_vpinsrb, "vpinsrb")
+  (e_vpinsrd, "vpinsrd")
+  (e_vpinsrq, "vpinsrq")
+  (e_vpinsrw, "vpinsrw")
+  (e_vpmaddubsw, "vpmaddubsw")
+  (e_vpmaddwd, "vpmaddwd")
+  (e_vpmaskmovd, "vpmaskmovd")
+  (e_vpmaskmovq, "vpmaskmovq")
+  (e_vpmaxsq, "vpmaxsq")
+  (e_vpmaxuq, "vpmaxuq")
+  (e_vpmaxsb, "vpmaxsb")
+  (e_vpmaxsd, "vpmaxsd")
+  (e_vpmaxsw, "vpmaxsw")
+  (e_vpmaxub, "vpmaxub")
+  (e_vpmaxud, "vpmaxud")
+  (e_vpmaxuw, "vpmaxuw")
+  (e_vpminsq, "vpminsq")
+  (e_vpminuq, "vpminuq")
+  (e_vpminsb, "vpminsb")
+  (e_vpminsd, "vpminsd")
+  (e_vpminsw, "vpminsw")
+  (e_vpminub, "vpminub")
+  (e_vpminud, "vpminud")
+  (e_vpminuw, "vpminuw")
+  (e_vpmovsdb, "vpmovsdb")
+  (e_vpmovsdw, "vpmovsdw")
+  (e_vpmovsqb, "vpmovsqb")
+  (e_vpmovsqd, "vpmovsqd")
+  (e_vpmovsqw, "vpmovsqw")
+  (e_vpmovswb, "vpmovswb")
+  (e_vpmovsxbd, "vpmovsxbd")
+  (e_vpmovsxbq, "vpmovsxbq")
+  (e_vpmovsxbw, "vpmovsxbw")
+  (e_vpmovsxdq, "vpmovsxdq")
+  (e_vpmovsxwd, "vpmovsxwd")
+  (e_vpmovsxwq, "vpmovsxwq")
+  (e_vpmovzxbd, "vpmovzxbd")
+  (e_vpmovzxbq, "vpmovzxbq")
+  (e_vpmovzxbw, "vpmovzxbw")
+  (e_vpmovzxdq, "vpmovzxdq")
+  (e_vpmovzxwd, "vpmovzxwd")
+  (e_vpmovzxwq, "vpmovzxwq")
+  (e_vpmuldq, "vpmuldq")
+  (e_vpmulhrsw, "vpmulhrsw")
+  (e_vpmulhuw, "vpmulhuw")
+  (e_vpmulhw, "vpmulhw")
+  (e_vpmulld, "vpmulld")
+  (e_vpmullw, "vpmullw")
+  (e_vpmuludq, "vpmuludq")
+  (e_vpor, "vpor")
+  (e_vpord, "vpord")
+  (e_vporq, "vporq")
+  (e_vprolvd, "vporlvd")
+  (e_vprolvq, "vporlvq")
+  (e_vprold, "vprold")
+  (e_vprolq, "vprolq")
+  (e_vprorvd, "vprorvd")
+  (e_vprorvq, "vprorvq")
+  (e_vprord, "vprord")
+  (e_vprorq, "vprorq")
+  (e_vrsqrt14ps, "vrsqrt14ps")
+  (e_vrsqrt14pd, "vrsqrt14pd")
+  (e_vrsqrt14ss, "vrsqrt14ss")
+  (e_vrsqrt14sd, "vrsqrt14sd")
+  (e_vscatterdps, "vscatterdps")
+  (e_vscatterdpd, "vscatterdpd")
+  (e_vscatterqps, "vscatterqps")
+  (e_vscatterqpd, "vscatterqpd")
+  (e_vpscatterdd, "vpscatterdd")
+  (e_vpscatterdq, "vpscatterdq")
+  (e_vpscatterqd, "vpscatterqd")
+  (e_vpscatterqq, "vpscatterqq")
+  (e_vpsadbw, "vpsadbw")
+  (e_vpshufb, "vpshufb")
+  (e_vpshufd, "vpshufd")
+  (e_vpshufhw, "vpshufhw")
+  (e_vpshuflw, "vpshuflw")
+  (e_vpslldq, "vpslldq")
+  (e_vpslld, "vpslld")
+  (e_vpsllq, "vpsllq")
+  (e_vpsllvd, "vpsllvd")
+  (e_vpsllvq, "vpsllvq")
+  (e_vpsllw, "vpsllw")
+  (e_vpsrad, "vpsrad")
+  (e_vpsravd, "vpsravd")
+  (e_vpsraw, "vpsraw")
+  (e_vpsrldq, "vpsrldq")
+  (e_vpsrld, "vpsrld")
+  (e_vpsrlq, "vpsrlq")
+  //(e_vprlvd, "vprlvd")
+  (e_vpsrlvd, "vpsrlvd")
+  (e_vpsrlvq, "vprlvq")
+  (e_vpsrlvq, "vpsrlvq")
+  (e_vpsrlw, "vpsrlw")
+  (e_vpsubb, "vpsubb")
+  (e_vpsubd, "vpsubd")
+  (e_vpsubq, "vpsubq")
+  (e_vpsubsb, "vpsubsb")
+  (e_vpsubsw, "vpsubsw")
+  (e_vpsubusb, "vpsubusb")
+  (e_vpsubusw, "vpsubusw")
+  (e_vpsubw, "vpsubw")
+  (e_vpternlogd, "vpternlogd")
+  (e_vpternlogq, "vpternlogq")
+  (e_vpunpckhbw, "vpunpckhbw")
+  (e_vpunpckhdq, "vpunpckhdq")
+  (e_vpunpckhqdq, "vpunpckhqdq")
+  (e_vpunpckhwd, "vpunpckhwd")
+  (e_vpunpcklbw, "vpunpcklbw")
+  (e_vpunpckldq, "vpunpckldq")
+  (e_vpunpcklqdq, "vpunpcklqdq")
+  (e_vpunpcklwd, "vpunpcklwd")
+  (e_vpxord, "vpxord")
+  (e_vpxorq, "vpxorq")
+  (e_vrangeps, "vrangeps")
+  (e_vrangepd, "vrangepd")
+  (e_vrangess, "vrangess")
+  (e_vrangesd, "vrangesd")
+  (e_vrcp14ps, "vrcp14ps")
+  (e_vrcp14pd, "vrcp14pd")
+  (e_vrcp14ss, "vrcp14ss")
+  (e_vrcp14sd, "vrcp14sd")
+  (e_vreduceps, "vreduceps")
+  (e_vreducepd, "vreducepd")
+  (e_vreducess, "vreducess")
+  (e_vreducesd, "vreducesd")
+  (e_vpxor, "vpxor")
+  (e_vshufpd, "vshufpd")
+  (e_vshufps, "vshufps")
+  (e_vshuff32x4, "vshuff32x4")
+  (e_vshuff64x2, "vshuff64x2")
+  (e_vsqrtpd, "vsqrtpd")
+  (e_vsqrtps, "vsqrtps")
+  (e_vsqrtsd, "vsqrtsd")
+  (e_vsqrtss, "vsqrtss")
+  (e_vsubpd, "vsubpd")
+  (e_vsubps, "vsubps")
+  (e_vsubsd, "vsubsd")
+  (e_vsubss, "vsubss")
+  (e_vtestpd, "vtestpd")
+  (e_vtestps, "vtestps")
+  (e_vucomisd, "vucomisd")
+  (e_vucomiss, "vucomiss")
+  (e_vunpckhpd, "vunpckhpd")
+  (e_vunpckhps, "vunpckhps")
+  (e_vunpcklpd, "vunpcklpd")
+  (e_vunpcklps, "vunpcklps")
+  (e_vxorpd, "vxorpd")
+  (e_vxorps, "vxorps")
+  (e_vzeroall, "vzeroall")
+  (e_vzeroupper, "vzeroupper")
+  (e_kandb, "kandb")
+  (e_kandd, "kandd")
+  (e_kandw, "kandw")
+  (e_kandq, "kandq")
+  (e_kandnb, "kandnb")
+  (e_kandnd, "kandnd")
+  (e_kandnw, "kandnw")
+  (e_kandnq, "kandnq")
+  (e_knotb, "knotb")
+  (e_knotd, "knotd")
+  (e_knotw, "knotw")
+  (e_knotq, "knotq")
+  (e_korb, "korb")
+  (e_kord, "kord")
+  (e_korw, "korw")
+  (e_korq, "korq")
+  (e_kxnorb, "kxnorb")
+  (e_kxnord, "kxnord")
+  (e_kxnorw, "kxnorw")
+  (e_kxnorq, "kxnorq")
+  (e_kxorb, "kxorb")
+  (e_kxord, "kxord")
+  (e_kxorw, "kxorw")
+  (e_kxorq, "kxorq")
+  (e_kaddb, "kaddb")
+  (e_kaddd, "kaddd")
+  (e_kaddw, "kaddw")
+  (e_kaddq, "kaddq")
+  (e_kunpckbw, "kunpckbw")
+  (e_kunpckwd, "kunpckwd")
+  (e_kunpckdq, "kunpckdq")
+  (e_kmovb, "kmovb")
+  (e_kmovd, "kmovd")
+  (e_kmovw, "kmovw")
+  (e_kmovq, "kmovq")
+  (e_kmovb, "kmovb")
+  (e_kmovd, "kmovd")
+  (e_kmovq, "kmovq")
+  (e_kmovw, "kmovw")
+  (e_kortestb, "kortestb")
+  (e_kortestd, "kortestd")
+  (e_kortestw, "kortestw")
+  (e_kortestq, "kortestq")
+  (e_ktestb, "ktestb")
+  (e_ktestd, "ktestd")
+  (e_ktestw, "ktestw")
+  (e_ktestq, "ktestq")
+  (e_vcmppd, "vcmppd")
+  (e_vcmpps, "vcmpps")
+  (e_vcmpsd, "vcmpsd")
+  (e_vcmpss, "vcmpss")
+  (e_vmovntpd, "vmovntpd")
+  (e_vcvttsd2usi, "vcvttsd2usi")
+  (e_vcvttss2usi, "vcvttss2usi")
+  (e_vcvtsd2usi, "vcvtsd2usi")
+  (e_vcvtss2usi, "vcvtss2usi")
+  (e_vcvtusi2sd, "vcvtusi2sd")
+  (e_vcvtusi2ss, "vcvtusi2ss")
+  (e_vmovntdq, "vmovntdq")
+  (e_vpsrlvw, "vpsrlvw")
+  (e_vpmovuswb, "vpmovuswb")
+  (e_vpsravw, "vpsravw")
+  (e_vpsravq, "vpsravq")
+  (e_vpmovusdb, "vpmovusdb")
+  (e_vpsllvw, "vpsllvw")
+  (e_vpmovusqb, "vpmovusqb")
+  (e_vpmovusdw, "vpmovusdw")
+  (e_vpmovusqw, "vpmovusqw")
+  (e_vpmovusqd, "vpmovusqd")
+  (e_vbroadcastf32x4, "vbroadcastf32x4")
+  (e_vpabsq, "vpabsq")
+  (e_vmovntdqa, "vmovntdqa")
+  (e_vpbroadcastmb2q, "vpbroadcastmb2q")
+  (e_vpmovwb, "vpmovwb")
+  (e_vpmovdb, "vpmovdb")
+  (e_vpmovqb, "vpmovqb")
+  (e_vpmovdw, "vpmovdw")
+  (e_vpmovqw, "vpmovqw")
+  (e_vpmovqd, "vpmovqd")
+  (e_vpmultishiftqb, "vpmultishiftqb")
+  (e_vpmadd52luq, "vpmadd52luq")
+  (e_vpmadd52huq, "vpmadd52huq")
+  (e_vrndscaleps, "vrndscaleps")
+  (e_vrndscalepd, "vrndscalepd")
+  (e_vrndscaless, "vrndscaless")
+  (e_vrndscalesd, "vrndscalesd")
+  (e_vdbpsadbw, "vdbpsadbw")
+  (e_vphsubsw, "vphsubsw")
+
+/* What are these? */
+ (e_vpmovswb, "vpmovswb")
+ (e_vpmovsdb, "vpmovsdb")
+ (e_vpmovsqb, "vpmovsqb")
+ (e_vpmovsdw, "vpmovsdw")
+ (e_vpmovsqw, "vpmovsqw")
+ (e_vpmovsqd, "vpmovsqd")
+
+ (e_fp_generic, "[FIXME: GENERIC FPU INSN]")
+ (e_3dnow_generic, "[FIXME: GENERIC 3DNow INSN]")
+ (e_No_Entry, "No_Entry")
         ;
 
 dyn_hash_map<prefixEntryID, std::string> prefixEntryNames_IAPI = map_list_of
@@ -1149,7 +2123,7 @@ true, { Eb, Gb, Zz }, 0, s1RW2R },
   /* 60 */
   { e_pushad, t_done, 0, false, { GPRS, eSP, Zz }, 0, s1R2RW },
   { e_popad,  t_done, 0, false, { GPRS, eSP, Zz }, 0, s1W2RW },
-  { e_bound,    t_done, 0, true, { Gv, Ma, Zz }, 0, s1R2R },
+  { e_bound,    t_done, 0, true, { Gv, Ma, Zz }, 0, s1R2R }, // or VEX
   { e_arpl,     t_done, 0, true, { Ew, Gw, Zz }, 0, s1R2R },
   { e_No_Entry,          t_ill,  0, false, { Zz, Zz, Zz }, 0, 0 }, // PREFIX_SEG_OVR
   { e_No_Entry,          t_ill,  0, false, { Zz, Zz, Zz }, 0, 0 }, // PREFIX_SEG_OVR
@@ -1200,7 +2174,7 @@ true, { Eb, Gb, Zz }, 0, s1RW2R },
   { e_lea, t_done, 0, true, { Gv, Mlea, Zz }, IS_NOP, s1W2R }, // this is just M in the book
                                                         // AFAICT the 2nd operand is not accessed
   { e_mov, t_done, 0, true, { Sw, Ew, Zz }, 0, s1W2R },
-  { e_pop, t_done, 0, true, { Ev, eSP, Zz }, 0, s1W2RW },
+  { e_pop, t_done, 0, true, { Ev, eSP, Zz }, 0, s1W2RW }, // or VEX XOP
   /* 90 */
   { e_nop,  t_done, 0, false, { Zz, Zz, Zz }, IS_NOP, sNONE }, // actually xchg eax,eax
   { e_xchg, t_done, 0, false, { rCX, rAX, Zz }, 0, s1RW2RW },
@@ -1261,8 +2235,8 @@ true, { Eb, Gb, Zz }, 0, s1RW2R },
   { e_No_Entry, t_grp, Grp2, true, { Ev, Ib, Zz }, 0, s1RW2R },
   { e_ret_near, t_done, 0, false, { Iw, Zz, Zz }, (IS_RET | IS_RETC), s1R | (fNEARRET << FPOS) },
   { e_ret_near, t_done, 0, false, { Zz, Zz, Zz }, (IS_RET), fNEARRET << FPOS },
-  { e_les,      t_done, 0, true, { ES, Gv, Mp }, 0, s1W2W3R },
-  { e_lds,      t_done, 0, true, { DS, Gv, Mp }, 0, s1W2W3R },
+  { e_les,      t_done, 0, true, { ES, Gv, Mp }, 0, s1W2W3R }, // or VEX
+  { e_lds,      t_done, 0, true, { DS, Gv, Mp }, 0, s1W2W3R }, // or VEX
   { e_No_Entry, t_grp, Grp11, true, { Eb, Ib, Zz }, 0, s1W2R },
   { e_No_Entry, t_grp, Grp11, true, { Ev, Iz, Zz }, 0, s1W2R },
   /* C8 */
@@ -1472,12 +2446,12 @@ static ia32_entry twoByteMap[256] = {
   { e_No_Entry, t_sse, SSE74, true, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_sse, SSE75, true, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_sse, SSE76, true, { Zz, Zz, Zz }, 0, 0 },
-  { e_emms, t_done, 0, false, { Zz, Zz, Zz }, 0, sNONE },
+  { e_No_Entry, t_sse, SSE77, false, { Zz, Zz, Zz }, 0, 0 },
   /* 78 */
   { e_No_Entry, t_sse, SSE78, 0, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_sse, SSE79, 0, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_ill, 0, 0, { Zz, Zz, Zz }, 0, 0 }, // SSE5A will go in 7A and 7B when it comes out
-  { e_No_Entry, t_ill, 0, 0, { Zz, Zz, Zz }, 0, 0 },
+  { e_No_Entry, t_sse, SSE7B, 0, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_sse, SSE7C, 0, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_sse, SSE7D, 0, { Zz, Zz, Zz }, 0, 0 },
   { e_No_Entry, t_sse, SSE7E, 0, { Zz, Zz, Zz }, 0, 0 },
@@ -1554,7 +2528,7 @@ static ia32_entry twoByteMap[256] = {
   { e_No_Entry, t_grp, Grp8, true, { Zz, Zz, Zz }, 0, 0 },
   { e_btc, t_done, 0, true, { Ev, Gv, Zz }, 0, s1RW2R },
   { e_bsf, t_done, 0, true, { Gv, Ev, Zz }, 0, s1W2R },
-  { e_bsr, t_done, 0, true, { Gv, Ev, Zz }, 0, s1W2R },
+  { e_No_Entry, t_sse, SSEBE, 0, { Zz, Zz, Zz }, 0, 0 },
   { e_movsx, t_done, 0, true, { Gv, Eb, Zz }, 0, s1W2R },
   { e_movsx, t_done, 0, true, { Gv, Ew, Zz }, 0, s1W2R },
   /* C0 */
@@ -1646,28 +2620,28 @@ static ia32_entry threeByteMap[256] = {
 		{ e_No_Entry, t_sse_bis, SSEB09, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB0A, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB0B, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB0C, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB0D, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB0E, false, { Zz, Zz, Zz }, 0, sNONE },
+		{ e_No_Entry, t_sse_bis, SSEB0F, false, { Zz, Zz, Zz }, 0, sNONE },
 		/* 10 */
 		{ e_No_Entry, t_sse_bis, SSEB10, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB11, true, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_bis, SSEB12, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB13, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB14, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB15, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB16, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB17, true, { Zz, Zz, Zz }, 0, 0 },
 		/* 18 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB18, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB19, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB1A, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB1B, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB1C, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB1D, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB1E, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB1F, true, { Zz, Zz, Zz }, 0, 0 },
 		/* 20 */
 		{ e_No_Entry, t_sse_bis, SSEB20, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB21, true, { Zz, Zz, Zz }, 0, 0 },
@@ -1682,10 +2656,10 @@ static ia32_entry threeByteMap[256] = {
 		{ e_No_Entry, t_sse_bis, SSEB29, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB2A, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB2B, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB2C, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB2D, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB2E, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB2F, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 30 */
 		{ e_No_Entry, t_sse_bis, SSEB30, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB31, true, { Zz, Zz, Zz }, 0, 0 },
@@ -1693,7 +2667,7 @@ static ia32_entry threeByteMap[256] = {
 		{ e_No_Entry, t_sse_bis, SSEB33, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB34, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB35, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB36, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB37, true, { Zz, Zz, Zz }, 0, 0 },
 		/* 38 */
 		{ e_No_Entry, t_sse_bis, SSEB38, true, { Zz, Zz, Zz }, 0, 0 },
@@ -1707,21 +2681,21 @@ static ia32_entry threeByteMap[256] = {
 		/* 40 */
 		{ e_No_Entry, t_sse_bis, SSEB40, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEB41, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB42, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB43, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB44, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB45, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB46, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB47, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 48 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB4C, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB4D, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB4E, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB4F, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 50 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -1732,22 +2706,22 @@ static ia32_entry threeByteMap[256] = {
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 58 */
+		{ e_No_Entry, t_sse_bis, SSEB58, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB59, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB5A, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		/* 60 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		/* 65 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB65, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB66, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 68 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -1764,106 +2738,111 @@ static ia32_entry threeByteMap[256] = {
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB75, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB76, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB77, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 78 */
+		{ e_No_Entry, t_sse_bis, SSEB78, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB79, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB7D, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB7E, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB7F, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 80 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB83, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 88 */
+		{ e_No_Entry, t_sse_bis, SSEB88, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB89, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB8B, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB8C, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB8D, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB8E, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 90 */
+		{ e_No_Entry, t_sse_bis, SSEB90, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB91, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB92, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB93, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB96, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB97, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 98 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB98, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB99, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB9A, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB9B, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB9C, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB9D, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB9E, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEB9F, false, { Zz, Zz, Zz }, 0, 0 },
 		/* A0 */
+		{ e_No_Entry, t_sse_bis, SSEBA0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA1, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA2, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA3, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA6, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA7, false, { Zz, Zz, Zz }, 0, 0 },
 		/* A8 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA8, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBA9, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBAA, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBAB, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBAC, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBAD, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBAE, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBAF, false, { Zz, Zz, Zz }, 0, 0 },
 		/* B0 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },	
+		{ e_No_Entry, t_sse_bis, SSEBB4, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBB5, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBB6, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBB7, false, { Zz, Zz, Zz }, 0, 0 },	
 		/* B8 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBB8, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBB9, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBBA, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBBB, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBBC, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBBD, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBBE, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBBF, false, { Zz, Zz, Zz }, 0, 0 },
 		/* C0 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBC4, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* C8 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBC8, false, { Zz, Zz, Zz }, 0, 0 },
+		// { e_sha1nexte, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+		{ e_sha1msg1, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+		{ e_No_Entry, t_sse_bis, SSEBCA, false, { Zz, Zz, Zz }, 0, 0 },
+		// { e_sha1msg2, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+		{ e_No_Entry, t_sse_bis, SSEBCB, false, { Zz, Zz, Zz }, 0, 0 },
+		// { e_sha256rnds2, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* IMPLICIT XMM0 */
+		{ e_No_Entry, t_sse_bis, SSEBCC, false, { Zz, Zz, Zz }, 0, 0 },
+		// { e_sha256msg1, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+		{ e_No_Entry, t_sse_bis, SSEBCD, false, { Zz, Zz, Zz }, 0, 0 },
+		// { e_sha256msg2, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* D0 */
@@ -1905,12 +2884,12 @@ static ia32_entry threeByteMap[256] = {
 		/* F0 */
 		{ e_No_Entry, t_sse_bis, SSEBF0, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_bis, SSEBF1, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBF2, true, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_grp, Grp17, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_grp, Grp17, true, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBF5, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBF6, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_bis, SSEBF7, true, { Zz, Zz, Zz }, 0, 0 },
 		/* F8 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -1924,15 +2903,15 @@ static ia32_entry threeByteMap[256] = {
 
 static ia32_entry threeByteMap2[256] = {
 		/* 00 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		/* 08*/
+		{ e_No_Entry, t_sse_ter, SSET00, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET01, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET02, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET03, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET04, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET05, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET06, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		/* 08 */
 		{ e_No_Entry, t_sse_ter, SSET08, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET09, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET0A, true, { Zz, Zz, Zz }, 0, 0 },
@@ -1951,23 +2930,23 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_sse_ter, SSET16, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET17, true, { Zz, Zz, Zz }, 0, 0 },
 		/* 18 */
+		{ e_No_Entry, t_sse_ter, SSET18, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET19, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET1A, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET1B, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET1D, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 20 */
 		{ e_No_Entry, t_sse_ter, SSET20, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET21, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_sse_ter, SSET22, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET23, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET25, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET26, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET27, true, { Zz, Zz, Zz }, 0, 0 },
 		/* 28 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -1987,10 +2966,10 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 38 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET38, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET39, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET3A, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET3B, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -2002,26 +2981,26 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET46, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 48 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET4A, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET4B, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET4C, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 50 */
+		{ e_No_Entry, t_sse_ter, SSET50, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET51, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET54, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET55, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET56, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET57, false, { Zz, Zz, Zz }, 0, 0 },
 		/* 58 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -2038,8 +3017,8 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_sse_ter, SSET63, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET66, true, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSET67, true, { Zz, Zz, Zz }, 0, 0 },
 		/* 68 */
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -2153,7 +3132,7 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_sha1rnds4, t_done, 0, true, { Wps, Vps, Ib }, 0, s1RW2R3R },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -2194,7 +3173,7 @@ static ia32_entry threeByteMap2[256] = {
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		/* F0 */
-		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+		{ e_No_Entry, t_sse_ter, SSETF0, true, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
 		{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -2684,9 +3663,9 @@ static ia32_entry groupMap2[][2][8] = {
     },
     {
       { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
-      { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
-      { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
-      { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
+      { e_blsr, t_done, 0, true, { Bv, Ev, Zz }, 0, s1W2R },
+      { e_blsmsk, t_done, 0, true, { Bv, Ev, Zz }, 0, s1W2R },
+      { e_blsi, t_done, 0, true, { Bv, Ev, Zz }, 0, s1W2R },
       { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
       { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
       { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
@@ -2715,17 +3694,16 @@ static ia32_entry groupMap2[][2][8] = {
       { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
     }
   }
-
-
 };
 
 /* rows are not, F3, 66, F2 prefixed in this order (see book) */
+/** START_DYNINST_TABLE_VERIFICATION(sse_table) */
 static ia32_entry sseMap[][4] = {
   { /* SSE10 */
-    { e_movups, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
-    { e_movss,  t_done, 0, true, { Vss, Wss, Zz }, 0, s1W2R },
-    { e_movupd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1W2R },
-    { e_movsd_sse,  t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1W2R },
+    { e_movups, t_sse_mult, SSE10_NO, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_movss,  t_sse_mult, SSE10_F3, true, { Vss, Wss, Zz }, 0, s1W2R },
+    { e_movupd, t_sse_mult, SSE10_66, true, { Vpd, Wpd, Zz }, 0, s1W2R },
+    { e_movsd_sse, t_sse_mult, SSE10_F2, true, { Vsd, Wsd, Zz }, 0, s1W2R },
   },
   { /* SSE11 */
     { e_movups, t_done, 0, true, { Wps, Vps, Zz }, 0, s1W2R },
@@ -2734,33 +3712,33 @@ static ia32_entry sseMap[][4] = {
     { e_movsd_sse,  t_done, 0, true, { Wsd, Vsd, Zz }, 0, s1W2R }, // Book is wrong, this is a W/V
   },
   { /* SSE12 */
-    { e_movlps_movhlps, t_done, 0, true, { Wq, Vq, Zz }, 0, s1W2R }, // FIXME: wierd 1st op
-    { e_movsldup, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+    { e_movlps_movhlps, t_sse_mult, SSE12_NO, true, { Wq, Vq, Zz }, 0, s1W2R }, // FIXME: wierd 1st op
+    { e_movsldup, t_sse_mult, SSE12_F3, true, { Vdq, Wdq, Zz }, 0, s1W2R },
     { e_movlpd, t_done, 0, true, { Vq, Ws, Zz }, 0, s1W2R },
-    { e_movddup, t_done, 0, true, { Vdq, Wq, Zz }, 0, s1W2R },
+    { e_movddup, t_sse_mult, SSE12_F2, true, { Vdq, Wq, Zz }, 0, s1W2R },
   },
   { /* SSE13 */
-    { e_movlps, t_done, 0, true, { Vq, Wq, Zz }, 0, s1W2R },
+    { e_movlps, t_sse_mult, SSE13_NO, true, { Vq, Wq, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_movlpd, t_done, 0, true, { Vq, Wq, Zz }, 0, s1W2R },
+    { e_movlpd, t_sse_mult, SSE13_66, true, { Vq, Wq, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE14 */
-    { e_unpcklps, t_done, 0, true, { Vps, Wq, Zz }, 0, s1RW2R },
+    { e_unpcklps, t_sse_mult, SSE14_NO, true, { Vps, Wq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_unpcklpd, t_done, 0, true, { Vpd, Wq, Zz }, 0, s1RW2R },
+    { e_unpcklpd, t_sse_mult, SSE14_66, true, { Vpd, Wq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE15 */
-    { e_unpckhps, t_done, 0, true, { Vps, Wq, Zz }, 0, s1RW2R },
+    { e_unpckhps, t_sse_mult, SSE15_NO, true, { Vps, Wq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_unpckhpd, t_done, 0, true, { Vpd, Wq, Zz }, 0, s1RW2R },
+    { e_unpckhpd, t_sse_mult, SSE15_66, true, { Vpd, Wq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE16 */
-    { e_movhps_movlhps, t_done, 0, true, { Vq, Wq, Zz }, 0, s1W2R }, // FIXME: wierd 2nd op
-    { e_movshdup, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-    { e_movhpd, t_done, 0, true, { Vq, Wq, Zz }, 0, s1W2R },
+    { e_movhps_movlhps, t_sse_mult, SSE16_NO, true, { Vq, Wq, Zz }, 0, s1W2R }, // FIXME: wierd 2nd op
+    { e_movshdup, t_sse_mult, SSE16_F3, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+    { e_movhpd, t_sse_mult, SSE16_66, true, { Vq, Wq, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE17 */
@@ -2770,9 +3748,9 @@ static ia32_entry sseMap[][4] = {
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE28 */
-    { e_movaps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_movaps, t_sse_mult, SSE28_NO, true, { Vps, Wps, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_movapd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1W2R },
+    { e_movapd, t_sse_mult, SSE28_66, true, { Vpd, Wpd, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE29 */
@@ -2783,38 +3761,86 @@ static ia32_entry sseMap[][4] = {
   },
   { /* SSE2A */
     { e_cvtpi2ps, t_done, 0, true, { Vps, Qq, Zz }, 0, s1W2R },
-    { e_cvtsi2ss, t_done, 0, true, { Vss, Ev, Zz }, 0, s1W2R },
+    { e_cvtsi2ss, t_sse_mult, SSE2A_F3, true, { Vss, Ev, Zz }, 0, s1W2R },
     { e_cvtpi2pd, t_done, 0, true, { Vpd, Qdq, Zz }, 0, s1W2R },
-    { e_cvtsi2sd, t_done, 0, true, { Vsd, Ev, Zz }, 0, s1W2R },
+    { e_cvtsi2sd, t_sse_mult, SSE2A_F2, true, { Vsd, Ev, Zz }, 0, s1W2R },
   },
   { /* SSE2B */
-    { e_movntps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1W2R | (fNT << FPOS) },
+    { e_movntps, t_sse_mult, SSE2B_NO, true, { Wps, Vps, Zz }, 0, s1W2R | (fNT << FPOS) },
     { e_movntss, t_done, 0, true, { Md, Vd, Zz }, 0, s1W2R | (fNT << FPOS) },
-    { e_movntpd, t_done, 0, true, { Wpd, Vpd, Zz }, 0, s1W2R | (fNT << FPOS) }, // bug in book
+    { e_movntpd, t_sse_mult, SSE2B_66, true, { Wpd, Vpd, Zz }, 0, s1W2R | (fNT << FPOS) }, // bug in book
     { e_movntsd, t_done, 0, true, { Wq, Vq, Zz }, 0, s1W2R | (fNT << FPOS) },
   },
   { /* SSE2C */
     { e_cvttps2pi, t_done, 0, true, { Qq, Wps, Zz }, 0, s1W2R },
-    { e_cvttss2si, t_done, 0, true, { Gv, Wss, Zz }, 0, s1W2R },
+    { e_cvttss2si, t_sse_mult, SSE2C_F3, true, { Gv, Wss, Zz }, 0, s1W2R },
     { e_cvttpd2pi, t_done, 0, true, { Qdq, Wpd, Zz }, 0, s1W2R },
-    { e_cvttsd2si, t_done, 0, true, { Gv, Wsd, Zz }, 0, s1W2R },
+    { e_cvttsd2si, t_sse_mult, SSE2C_F2, true, { Gv, Wsd, Zz }, 0, s1W2R },
   },
   { /* SSE2D */
     { e_cvtps2pi, t_done, 0, true, { Qq, Wps, Zz }, 0, s1W2R },
-    { e_cvtss2si, t_done, 0, true, { Gv, Wss, Zz }, 0, s1W2R },
+    { e_cvtss2si, t_sse_mult, SSE2D_F3, true, { Gv, Wss, Zz }, 0, s1W2R },
     { e_cvtpd2pi, t_done, 0, true, { Qdq, Wpd, Zz }, 0, s1W2R },
-    { e_cvtsd2si, t_done, 0, true, { Gv, Wsd, Zz }, 0, s1W2R },
+    { e_cvtsd2si, t_sse_mult, SSE2D_F2, true, { Gv, Wsd, Zz }, 0, s1W2R },
   },
   { /* SSE2E */
-    { e_ucomiss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1R2R },
+    { e_ucomiss, t_sse_mult, SSE2E_NO, true, { Vss, Wss, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_ucomisd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1R2R },
+    { e_ucomisd, t_sse_mult, SSE2E_66, true, { Vsd, Wsd, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE2F */
-    { e_comiss, t_done, 0, true, { Vps, Wps, Zz }, 0, s1R2R },
+    { e_comiss, t_sse_mult, SSE2F_NO, true, { Vps, Wps, Zz }, 0, s1R2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_comisd, t_sse_mult, SSE2F_66, true, { Vsd, Wsd, Zz }, 0, s1R2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE41 */
+    { e_No_Entry, t_sse_mult, SSE41_NO, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_comisd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1R2R },
+    { e_No_Entry, t_sse_mult, SSE41_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE42 */
+    { e_No_Entry, t_sse_mult, SSE42_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE42_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE44 */
+    { e_No_Entry, t_sse_mult, SSE44_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE44_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE45 */
+    { e_No_Entry, t_sse_mult, SSE45_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE45_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE46 */
+    { e_No_Entry, t_sse_mult, SSE46_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE46_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE47 */
+    { e_No_Entry, t_sse_mult, SSE47_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE47_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE4A */
+    { e_No_Entry, t_sse_mult, SSE4A_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE4A_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE4B */
+    { e_No_Entry, t_sse_mult, SSE4B_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE4B_66, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE50 */
@@ -2824,10 +3850,10 @@ static ia32_entry sseMap[][4] = {
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE51 */
-    { e_sqrtps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
-    { e_sqrtss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1W2R },
-    { e_sqrtpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1W2R },
-    { e_sqrtsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1W2R },
+    { e_sqrtps, t_sse_mult, SSE51_NO, true, { Zz, Zz, Zz }, 0, s1W2R },
+    { e_sqrtss, t_sse_mult, SSE51_F3, true, { Zz, Zz, Zz }, 0, s1W2R },
+    { e_sqrtpd, t_sse_mult, SSE51_66, true, { Zz, Zz, Zz }, 0, s1W2R },
+    { e_sqrtsd, t_sse_mult, SSE51_F2, true, { Zz, Zz, Zz }, 0, s1W2R },
   },
   { /* SSE52 */
     { e_rsqrtps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
@@ -2842,159 +3868,159 @@ static ia32_entry sseMap[][4] = {
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE54 */
-    { e_andps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_andps, t_sse_mult, SSE54_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_andpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_andpd, t_sse_mult, SSE54_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE55 */
-    { e_andnps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_andnps, t_sse_mult, SSE55_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_andnpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_andnpd, t_sse_mult, SSE55_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE56 */
-    { e_orps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_orps, t_sse_mult, SSE56_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_orpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_orpd, t_sse_mult, SSE56_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE57 */
-    { e_xorps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_xorps, t_sse_mult, SSE57_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_xorpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_xorpd, t_sse_mult, SSE57_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE58 */
-    { e_addps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
-    { e_addss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1RW2R },
-    { e_addpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
-    { e_addsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
+    { e_addps, t_sse_mult, SSE58_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_addss, t_sse_mult, SSE58_F3, true, { Vss, Wss, Zz }, 0, s1RW2R },
+    { e_addpd, t_sse_mult, SSE58_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_addsd, t_sse_mult, SSE58_F2, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
   },
   { /* SSE59 */
-    { e_mulps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
-    { e_mulss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1RW2R },
-    { e_mulpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
-    { e_mulsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
+    { e_mulps, t_sse_mult, SSE59_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_mulss, t_sse_mult, SSE59_F3, true, { Vss, Wss, Zz }, 0, s1RW2R },
+    { e_mulpd, t_sse_mult, SSE59_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_mulsd, t_sse_mult, SSE59_F2, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
   },
   { /* SSE5A */
-    { e_cvtps2pd, t_done, 0, true, { Vpd, Wps, Zz }, 0, s1W2R },
-    { e_cvtss2sd, t_done, 0, true, { Vss, Wss, Zz }, 0, s1W2R },
-    { e_cvtpd2ps, t_done, 0, true, { Vps, Wpd, Zz }, 0, s1W2R }, // FIXME: book bug ???
-    { e_cvtsd2ss, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1W2R },
+    { e_cvtps2pd, t_sse_mult, SSE5A_NO, true, { Vpd, Wps, Zz }, 0, s1W2R },
+    { e_cvtss2sd, t_sse_mult, SSE5A_F3, true, { Vss, Wss, Zz }, 0, s1W2R },
+    { e_cvtpd2ps, t_sse_mult, SSE5A_66, true, { Vps, Wpd, Zz }, 0, s1W2R }, // FIXME: book bug ???
+    { e_cvtsd2ss, t_sse_mult, SSE5A_F2, true, { Vsd, Wsd, Zz }, 0, s1W2R },
   },
   { /* SSE5B */
-    { e_cvtdq2ps, t_done, 0, true, { Vps, Wdq, Zz }, 0, s1W2R },
-    { e_cvttps2dq, t_done, 0, true, { Vdq, Wps, Zz }, 0, s1W2R }, // book has this/next swapped!!! 
-    { e_cvtps2dq, t_done, 0, true, { Vdq, Wps, Zz }, 0, s1W2R },  // FIXME: book bug ???
+    { e_cvtdq2ps, t_sse_mult, SSE5B_NO, true, { Vps, Wdq, Zz }, 0, s1W2R },
+    { e_cvttps2dq, t_sse_mult, SSE5B_F3, true, { Vdq, Wps, Zz }, 0, s1W2R }, // book has this/next swapped!!! 
+    { e_cvtps2dq, t_sse_mult, SSE5B_66, true, { Vdq, Wps, Zz }, 0, s1W2R },  // FIXME: book bug ???
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE5C */
-    { e_subps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
-    { e_subss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1RW2R },
-    { e_subpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
-    { e_subsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
+    { e_subps, t_sse_mult, SSE5C_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_subss, t_sse_mult, SSE5C_F3, true, { Vss, Wss, Zz }, 0, s1RW2R },
+    { e_subpd, t_sse_mult, SSE5C_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_subsd, t_sse_mult, SSE5C_F2, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
   },
   { /* SSE5D */
-    { e_minps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
-    { e_minss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1RW2R },
-    { e_minpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
-    { e_minsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
+    { e_minps, t_sse_mult, SSE5D_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_minss, t_sse_mult, SSE5D_F3, true, { Vss, Wss, Zz }, 0, s1RW2R },
+    { e_minpd, t_sse_mult, SSE5D_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_minsd, t_sse_mult, SSE5D_F2, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
   },
   { /* SSE5E */
-    { e_divps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
-    { e_divss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1RW2R },
-    { e_divpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
-    { e_divsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
+    { e_divps, t_sse_mult, SSE5E_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_divss, t_sse_mult, SSE5E_F3, true, { Vss, Wss, Zz }, 0, s1RW2R },
+    { e_divpd, t_sse_mult, SSE5E_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_divsd, t_sse_mult, SSE5E_F2, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
   },
   { /* SSE5F */
-    { e_maxps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1RW2R },
-    { e_maxss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1RW2R },
-    { e_maxpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
-    { e_maxsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
+    { e_maxps, t_sse_mult, SSE5F_NO, true, { Vps, Wps, Zz }, 0, s1RW2R },
+    { e_maxss, t_sse_mult, SSE5F_F3, true, { Vss, Wss, Zz }, 0, s1RW2R },
+    { e_maxpd, t_sse_mult, SSE5F_66, true, { Vpd, Wpd, Zz }, 0, s1RW2R },
+    { e_maxsd, t_sse_mult, SSE5F_F2, true, { Vsd, Wsd, Zz }, 0, s1RW2R },
   },
   { /* SSE60 */
     { e_punpcklbw, t_done, 0, true, { Pq, Qd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpcklbw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_punpcklbw, t_sse_mult, SSE60_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE61 */
     { e_punpcklwd, t_done, 0, true, { Pq, Qd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpcklwd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_punpcklwd, t_sse_mult, SSE61_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE62 */
     { e_punpcklqd, t_done, 0, true, { Pq, Qd, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpcklqd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_punpcklqd, t_sse_mult, SSE62_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE63 */
     { e_packsswb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_packsswb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_packsswb, t_sse_mult, SSE63_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE64 */
     { e_pcmpgtb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pcmpgtb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_pcmpgtb, t_sse_mult, SSE64_66, true, { Vdq, Wdq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE65 */
     { e_pcmpgtw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pcmpgtw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_pcmpgtw, t_sse_mult, SSE65_66, true, { Vdq, Wdq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE66 */
     { e_pcmpgdt, t_done, 0, true, { Pq, Qq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pcmpgdt, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_pcmpgdt, t_sse_mult, SSE66_66, true, { Vdq, Wdq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE67 */
     { e_packuswb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_packuswb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_packuswb, t_sse_mult, SSE67_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE68 */
     { e_punpckhbw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpckhbw, t_done, 0, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
+    { e_punpckhbw, t_sse_mult, SSE68_66, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE69 */
     { e_punpckhwd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpckhwd, t_done, 0, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
+    { e_punpckhwd, t_sse_mult, SSE69_66, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE6A */
     { e_punpckhdq, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpckhdq, t_done, 0, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
+    { e_punpckhdq, t_sse_mult, SSE6A_66, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE6B */
     { e_packssdw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_packssdw, t_done, 0, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
+    { e_packssdw, t_sse_mult, SSE6B_66, true, { Pdq, Qdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE6C */
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpcklqld, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_punpcklqld, t_sse_mult, SSE6C_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE6D */
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_punpckhqd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_punpckhqd, t_sse_mult, SSE6D_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE6E */
@@ -3005,45 +4031,79 @@ static ia32_entry sseMap[][4] = {
   },
   { /* SSE6F */
     { e_movq, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
-    { e_movdqu, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R }, // book has this/next swapped!!!
-    { e_movdqa, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_movdqu, t_sse_mult, SSE6F_F3, true, { Vdq, Wdq, Zz }, 0, s1W2R }, // book has this/next swapped!!!
+    { e_movdqa, t_sse_mult, SSE6F_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+    { e_No_Entry, t_sse_mult, SSE6F_F2, false, { Zz, Zz, Zz }, 0, 0 }
   },
   { /* SSE70 */
     { e_pshufw, t_done, 0, true, { Pq, Qq, Ib }, 0, s1W2R3R },
-    { e_pshufhw, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R }, // book has this/next swapped!!!
-    { e_pshufd, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R },
-    { e_pshuflw, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R },
+    { e_pshufhw, t_sse_mult, SSE70_F3, true, { Vdq, Wdq, Ib }, 0, s1W2R3R }, // book has this/next swapped!!!
+    { e_pshufd, t_sse_mult, SSE70_66, true, { Vdq, Wdq, Ib }, 0, s1W2R3R },
+    { e_pshuflw, t_sse_mult, SSE70_F2, true, { Vdq, Wdq, Ib }, 0, s1W2R3R },
+  },
+  { /* SSE71 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE71_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE72 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE72_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE73 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE73_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE74 */
     { e_pcmpeqb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pcmpeqb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_pcmpeqb, t_sse_mult, SSE74_66, true, { Vdq, Wdq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE75 */
     { e_pcmpeqw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pcmpeqw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_pcmpeqw, t_sse_mult, SSE75_66, true, { Vdq, Wdq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE76 */
     { e_pcmpeqd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1R2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pcmpeqd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_pcmpeqd, t_sse_mult, SSE76_66, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
+  { /* SSE77 */
+    { e_No_Entry, t_vexl, VEXL00, false, { Zz, Zz, Zz }, 0, 0 }, /* vzeroall or vzeroupper */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
   },
   { /* SSE78 */
     { e_vmread, t_done, 0, true, { Ed, Gd, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_grp, Grp17, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_insertq, t_done, 0, true, {Vdq, VRq, Iw}, 0, s1RW2R3R}, // This is actually 2 8-bit immediates, treat as 1 16-bit for decode
+    { e_insertq, t_done, 0, true, {Vdq, Wdq, Ib}, 0, s1RW2R3R4R}
   },
   { /* SSE79 */
     { e_vmwrite, t_done, 0, true, { Ed, Gd, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_extrq, t_done, 0, true, {Vdq, VRq, Zz}, 0, s1RW2R},
-    { e_insertq, t_done, 0, true, {Vdq, VRdq, Zz}, 0, s1RW2R},
+    { e_extrq, t_done, 0, true, {Vdq, Ib, Ib}, 0, s1RW2R},
+    { e_insertq, t_done, 0, true, {Vdq, Wdq, Ib}, 0, s1RW2R3R4R},
+  },
+  { /* SSE7B */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE7B_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    // { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    //{ e_No_Entry, t_sse_mult, SSE7B_F3, false, { Zz, Zz, Zz }, 0, 0 },
+    //{ e_No_Entry, t_sse_mult, SSE7B_66, false, { Zz, Zz, Zz }, 0, 0 },
+    //{ e_No_Entry, t_sse_mult, SSE7B_F2, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSE7C */
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
@@ -3059,7 +4119,7 @@ static ia32_entry sseMap[][4] = {
   },
   { /* SSE7E */
     { e_movd, t_done, 0, true, { Ev, Pd, Zz }, 0, s1W2R },
-    { e_movq, t_done, 0, true, { Vq, Wq, Zz }, 0, s1W2R }, // book has this and next swapped!!!
+    { e_movq, t_sse_mult, SSE7E_F3, true, { Vq, Wq, Zz }, 0, s1W2R }, // book has this and next swapped!!!
     { e_movd, t_done, 0, true, { Ev, Vdq, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
@@ -3069,34 +4129,70 @@ static ia32_entry sseMap[][4] = {
     { e_movdqa, t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
+  { /* SSE90 */
+    { e_No_Entry, t_sse_mult, SSE90_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE90_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  },
+  { /* SSE91 */
+    { e_No_Entry, t_sse_mult, SSE91_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE91_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 } 
+  },
+  { /* SSE93 */
+    { e_No_Entry, t_sse_mult, SSE93_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE93_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE93_F2, false, { Zz, Zz, Zz }, 0, 0 }
+  },
+  { /* SSE98 */
+    { e_No_Entry, t_sse_mult, SSE98_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE98_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  },
+  { /* SSE99 */
+    { e_No_Entry, t_sse_mult, SSE99_NO, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_sse_mult, SSE99_66, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  },
   { /* SSEB8 */
     { e_jmpe, t_done, 0, false, { Jz, Zz, Zz }, 0, s1R },
     { e_popcnt, t_done, 0, true, { Gv, Ev, Zz }, 0, s1W2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
+  { /* SSEBE */
+    { e_bsr, t_done, 0, true, { Gv, Ev, Zz }, 0, s1W2R },
+    { e_lzcnt, t_done, 0, true, { Gv, Ev, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  },
   { /* SSEC2 */
-    { e_cmpps, t_done, 0, true, { Vps, Wps, Ib }, 0, s1RW2R3R }, // comparison writes to dest!
-    { e_cmpss, t_done, 0, true, { Vss, Wss, Ib }, 0, s1RW2R3R },
-    { e_cmppd, t_done, 0, true, { Vpd, Wpd, Ib }, 0, s1RW2R3R },
-    { e_cmpsd_sse, t_done, 0, true, { Vsd, Wsd, Ib }, 0, s1RW2R3R },
+    { e_cmpps, t_sse_mult, SSEC2_NO, true, { Vps, Wps, Ib }, 0, s1RW2R3R }, // comparison writes to dest!
+    { e_cmpss, t_sse_mult, SSEC2_F3, true, { Vss, Wss, Ib }, 0, s1RW2R3R },
+    { e_cmppd, t_sse_mult, SSEC2_66, true, { Vpd, Wpd, Ib }, 0, s1RW2R3R },
+    { e_cmpsd_sse, t_sse_mult, SSEC2_F2, true, { Vsd, Wsd, Ib }, 0, s1RW2R3R},
   },
   { /* SSEC4 */
     { e_pinsrw, t_done, 0, true, { Pq, Ed, Ib }, 0, s1RW2R3R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pinsrw, t_done, 0, true, { Vdq, Ed, Ib }, 0, s1RW2R3R },
+    { e_pinsrw, t_sse_mult, SSEC4_66, true, { Vdq, Ed, Ib }, 0, s1RW2R3R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEC5 */
     { e_pextrw, t_done, 0, true, { Gd, Pq, Ib }, 0, s1W2R3R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pextrw, t_done, 0, true, { Gd, Vdq, Ib }, 0, s1W2R3R },
+    { e_pextrw, t_sse_mult, SSEC5_66, true, { Gd, Vdq, Ib }, 0, s1W2R3R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEC6 */
-    { e_shufps, t_done, 0, true, { Vps, Wps, Ib }, 0, s1RW2R3R },
+    { e_shufps, t_sse_mult, SSEC6_NO, true, { Vps, Wps, Ib }, 0, s1RW2R3R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_shufpd, t_done, 0, true, { Vpd, Wpd, Ib }, 0, s1RW2R3R },
+    { e_shufpd, t_sse_mult, SSEC6_66, true, { Vpd, Wpd, Ib }, 0, s1RW2R3R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED0 */
@@ -3108,31 +4204,31 @@ static ia32_entry sseMap[][4] = {
   { /* SSED1 */
     { e_psrlw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psrlw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psrlw, t_sse_mult, SSED1_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED2 */
     { e_psrld, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psrld, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psrld, t_sse_mult, SSED2_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED3 */
     { e_psrlq, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psrlq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psrlq, t_sse_mult, SSED3_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED4 */
     { e_paddq, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddq, t_sse_mult, SSED4_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED5 */
     { e_pmullw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmullw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmullw, t_sse_mult, SSED5_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED6 */
@@ -3150,145 +4246,145 @@ static ia32_entry sseMap[][4] = {
   { /* SSED8 */
     { e_psubusb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubusb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubusb, t_sse_mult, SSED8_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSED9 */
     { e_psubusw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubusw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubusw, t_sse_mult, SSED9_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEDA */
     { e_pminub, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pminub, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pminub, t_sse_mult, SSEDA_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEDB */
     { e_pand, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pand, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pand, t_sse_mult, SSEDB_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEDC */
     { e_paddusb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddusb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddusb, t_sse_mult, SSEDC_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEDD */
     { e_paddusw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddusw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddusw, t_sse_mult, SSEDD_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEDE */
     { e_pmaxub, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmaxub, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmaxub, t_sse_mult, SSEDE_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEDF */
-    { e_pandn, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+    { e_pandn, t_sse_mult, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pandn, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pandn, t_sse_mult, SSEDF_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE0 */
     { e_pavgb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pavgb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pavgb, t_sse_mult, SSEE0_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE1 */
     { e_psraw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psraw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psraw, t_sse_mult, SSEE1_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE2 */
     { e_psrad, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psrad, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psrad, t_sse_mult, SSEE2_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE3 */
     { e_pavgw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pavgw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pavgw, t_sse_mult, SSEE3_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE4 */
     { e_pmulhuw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmulhuw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmulhuw, t_sse_mult, SSEE4_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE5 */
     { e_pmulhw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmulhw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmulhw, t_sse_mult, SSEE5_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE6 */
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_cvtdq2pd, t_done, 0, true, { Vpd, Wdq, Zz }, 0, s1W2R }, // lines jumbled in book
-    { e_cvttpd2dq, t_done, 0, true, { Vdq, Wpd, Zz }, 0, s1W2R },
-    { e_cvtpd2dq, t_done, 0, true, { Vdq, Wpd, Zz }, 0, s1W2R },
+    { e_cvtdq2pd, t_sse_mult, SSEE6_F3, true, { Vpd, Wdq, Zz }, 0, s1W2R }, // lines jumbled in book
+    { e_cvttpd2dq, t_sse_mult, SSEE6_66, true, { Vdq, Wpd, Zz }, 0, s1W2R },
+    { e_cvtpd2dq, t_sse_mult, SSEE6_F2, true, { Vdq, Wpd, Zz }, 0, s1W2R },
   },
   { /* SSEE7 */
     { e_movntq, t_done, 0, true, { Wq, Vq, Zz }, 0, s1W2R | (fNT << FPOS) },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_movntdq, t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R | (fNT << FPOS) },
+    { e_movntdq, t_sse_mult, SSEE7_66, true, { Wdq, Vdq, Zz }, 0, s1W2R | (fNT << FPOS) },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE8 */
     { e_psubsb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubsb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubsb, t_sse_mult, SSEE8_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEE9 */
     { e_psubsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubsw, t_sse_mult, SSEE9_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEEA */
     { e_pminsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pminsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pminsw, t_sse_mult, SSEEA_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEEB */
     { e_por, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_por, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_por, t_sse_mult, SSEEB_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEEC */
     { e_paddsb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddsb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddsb, t_sse_mult, SSEEC_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEED */
     { e_paddsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddsw, t_sse_mult, SSEED_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEEE */
     { e_pmaxsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmaxsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmaxsw, t_sse_mult, SSEEE_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEEF */
     { e_pxor, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pxor, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pxor, t_sse_mult, SSEEF_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF0 */
@@ -3300,37 +4396,37 @@ static ia32_entry sseMap[][4] = {
   { /* SSEF1 */
     { e_psllw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psllw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psllw, t_sse_mult, SSEF1_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF2 */
     { e_pslld, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pslld, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pslld, t_sse_mult, SSEF2_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF3 */
     { e_psllq, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psllq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psllq, t_sse_mult, SSEF3_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF4 */
     { e_pmuludq, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmuludq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmuludq, t_sse_mult, SSEF4_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF5 */
     { e_pmaddwd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_pmaddwd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_pmaddwd, t_sse_mult, SSEF5_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF6 */
     { e_psadbw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psadbw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psadbw, t_sse_mult, SSEF6_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF7 */
@@ -3342,43 +4438,43 @@ static ia32_entry sseMap[][4] = {
   { /* SSEF8 */
     { e_psubb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubb, t_sse_mult, SSEF8_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEF9 */
     { e_psubw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubw, t_sse_mult, SSEF9_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEFA */
     { e_psubd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubd, t_sse_mult, SSEFA_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEFB */ // FIXME: Same????
     { e_psubd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_psubd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_psubd, t_sse_mult, SSEFB_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEFC */
     { e_paddb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddb, t_sse_mult, SSEFC_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEFD */
     { e_paddw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddw, t_sse_mult, SSEFD_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEFE */
     { e_paddd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-    { e_paddd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+    { e_paddd, t_sse_mult, SSEFE_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   },
   { /* SSEFF */
@@ -3388,500 +4484,2824 @@ static ia32_entry sseMap[][4] = {
     { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
   }
 };
+/** END_DYNINST_TABLE_VERIFICATION */
 
 /* rows are not, F3, 66, F2, 66&F2 prefixed in this order (see book) */
+/** START_DYNINST_TABLE_VERIFICATION(sse_bis_table) */
 static ia32_entry sseMapBis[][5] = {
-		{ /* SSEB00 */
-				{ e_pshufb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pshufb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB01 */
-				{ e_phaddw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phaddw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB02 */
-				{ e_phaddd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phaddd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB03 */
-				{ e_phaddsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phaddsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB04 */
-				{ e_pmaddubsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmaddubsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB05 */
-				{ e_phsubw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phsubw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB02 */
-				{ e_phsubd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phsubd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB07 */
-				{ e_phsubsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phsubsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB08 */
-				{ e_psignb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_psignb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB09 */
-				{ e_psignw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_psignw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB0A */
-				{ e_psignd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_psignd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB0B */
-				{ e_pmulhrsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmulhrsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB10 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pblendvb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R3R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB14 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_blendvps, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R3R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB15 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_blendvpd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R3R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB17 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_ptest, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB1C */
-				{ e_pabsb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pabsb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB1D */
-				{ e_pabsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pabsw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB1E */
-				{ e_pabsd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pabsd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB20 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovsxbw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB21 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovsxbd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB22 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovsxbq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB23 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovsxwd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB24 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovsxwq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB25 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovsxdq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB28 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmuldq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB29 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pcmpeqq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB2A */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_movntdqa, t_done, 0, true, { Mdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB2B */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_packusdw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB30 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovzxbw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB31 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovzxbd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB32 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovzxbq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB33 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovzxwd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB34 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovzxwq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB35 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmovzxdq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB37 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pcmpgtq, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB38 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pminsb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB39 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pminsd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB3A */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pminuw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB3B */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pminud, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB3C */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmaxsb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB3D */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmaxsd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB3E */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmaxuw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB3F */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmaxud, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB40 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pmulld, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEB41 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_phminposuw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEBF0 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_crc32, t_done, 0, true, { Gv, Eb, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		},
-		{ /* SSEBF1 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_crc32, t_done, 0, true, { Gv, Ev, Zz }, 0, s1RW2R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
-		}
-		
+    { /* SSEB00 */
+        { e_pshufb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pshufb, t_sse_bis_mult, SSEB00_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB01 */
+        { e_phaddw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phaddw, t_sse_bis_mult, SSEB01_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB02 */
+        { e_phaddd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phaddd, t_sse_bis_mult, SSEB02_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB03 */
+        { e_phaddsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phaddsw, t_sse_bis_mult, SSEB03_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB04 */
+        { e_pmaddubsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmaddubsw, t_sse_bis_mult, SSEB04_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB05 */
+        { e_phsubw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phsubw, t_sse_bis_mult, SSEB05_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB06 */
+        { e_phsubd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phsubd, t_sse_bis_mult, SSEB06_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB07 */
+        { e_phsubsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phsubsw, t_sse_bis_mult, SSEB07_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB08 */
+        { e_psignb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_psignb, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB09 */
+        { e_psignw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_psignw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB0A */
+        { e_psignd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_psignd, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB0B */
+        { e_pmulhrsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmulhrsw, t_sse_bis_mult, SSEB0B_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB0C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermilps, t_sse_bis_mult, SSEB0C_66, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB0D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermilpd, t_sse_bis_mult, SSEB0D_66, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB0E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vtestps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB0F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vtestpd, t_done, 0, true, { Vpd, Wpd, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB10 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB10_F3, true, { Zz, Zz, Zz }, 0, 0 },
+        { e_pblendvb, t_sse_bis_mult, SSEB10_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB11 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB11_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB11_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB12 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB12_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB12_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB13 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB13_F3, true, { Vps, Wdq, Zz }, 0, s1W2R },
+        { e_vcvtph2ps, t_sse_bis_mult, SSEB13_66, true, { Vps, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB14 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB14_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_blendvps, t_sse_bis_mult, SSEB14_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB15 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB15_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_blendvpd, t_sse_bis_mult, SSEB15_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB16 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermps, t_sse_bis_mult, SSEB16_66, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB17 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_ptest, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1R2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB18 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vbroadcastss, t_done, 0, true, { Vss, Wss, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB19 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vbroadcastsd, t_done, 0, true, { Vsd, Wsd, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB1A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vbroadcastf128, t_done, 0, true, { Vsd, Wq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB1B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB1C */
+        { e_pabsb, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pabsb, t_sse_bis_mult, SSEB1C_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB1D */
+        { e_pabsw, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pabsw, t_sse_bis_mult, SSEB1D_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB1E */
+        { e_pabsd, t_done, 0, true, { Pq, Qq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pabsd, t_sse_bis_mult, SSEB1E_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB1F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB1F_66, false, { Zz, Zz, Zz }, 0, 0},
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB20 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpmovswb,  t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
+        { e_pmovsxbw, t_sse_bis_mult, SSEB20_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB21 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpmovsdb,  t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
+        { e_pmovsxbd, t_sse_bis_mult, SSEB21_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB22 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpmovsqb,  t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
+        { e_pmovsxbq, t_sse_bis_mult, SSEB22_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB23 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpmovsdw, t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
+        { e_pmovsxwd, t_sse_bis_mult, SSEB23_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB24 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpmovsqw, t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
+        { e_pmovsxwq, t_sse_bis_mult, SSEB24_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB25 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpmovsqd, t_done, 0, true, { Wdq, Vdq, Zz }, 0, s1W2R },
+        { e_pmovsxdq, t_sse_bis_mult, SSEB25_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB28 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmuldq, t_sse_bis_mult, SSEB28_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB29 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pcmpeqq, t_sse_bis_mult, SSEB29_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB2A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_movntdqa, t_sse_bis_mult, SSEB2A_66, true, { Mdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB2B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_packusdw, t_sse_bis_mult, SSEB2B_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB2C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vmaskmovps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB2D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vmaskmovpd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB2E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vmaskmovps, t_done, 0, true, { Wps, Hps, Vps }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB2F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vmaskmovpd, t_done, 0, true, { Wpd, Hpd, Vpd }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB30 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB30_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmovzxbw, t_sse_bis_mult, SSEB30_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB31 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB31_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmovzxbd, t_sse_bis_mult, SSEB31_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB32 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB32_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmovzxbq, t_sse_bis_mult, SSEB32_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB33 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB33_F3, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_pmovzxwd, t_sse_bis_mult, SSEB33_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB34 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmovzxwq, t_sse_bis_mult, SSEB34_F3, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_pmovzxwq, t_sse_bis_mult, SSEB34_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB35 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB35_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmovzxdq, t_sse_bis_mult, SSEB35_66, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB36 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermd, t_sse_bis_mult, SSEB36_66, true, { Vdq, Hdq, Wdq }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB37 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pcmpgtq, t_sse_bis_mult, SSEB37_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB38 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pminsb, t_sse_bis_mult, SSEB38_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB39 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB39_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pminsd, t_sse_bis_mult, SSEB39_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB3A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pminuw, t_sse_bis_mult, SSEB3A_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB3B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pminud, t_sse_bis_mult, SSEB3B_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB3C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmaxsb, t_sse_bis_mult, SSEB3C_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB3D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmaxsd, t_sse_bis_mult, SSEB3D_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB3E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmaxuw, t_sse_bis_mult, SSEB3E_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB3F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmaxud, t_sse_bis_mult, SSEB3F_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB40 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pmulld, t_sse_bis_mult, SSEB40_66, true, { Vdq, Wdq, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB41 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_phminposuw, t_done, 0, true, { Vdq, Wdq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB42 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB42_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB43 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB43_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB44 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB44_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB45 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB45_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB46 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpsravd, t_sse_bis_mult, SSEB46_66, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB47 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB47_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB4C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB4C_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB4D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB4D_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB4E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB4E_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB4F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB4F_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB58 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpbroadcastd, t_done, 0, true, { Vps, Wd, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB59 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpbroadcastq, t_done, 0, true, { Vps, Wq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB5A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vbroadcastf128, t_done, 0, true, { Vsd, Wq, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB65 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB65_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB66_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB75 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB75_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB76 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB76_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB77 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB77_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB78 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpbroadcastb, t_done, 0, true, { Vps, Wb, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB79 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpbroadcastw, t_done, 0, true, { Vps, Ww, Zz }, 0, s1W2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB7D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB7D_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB7E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB7E_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB7F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB7F_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB83 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB83_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB88 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB88_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB89 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB89_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB8B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB8B_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB8C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB8C_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB8D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB8D_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB8E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB8E_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB90 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB90_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB91 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB91_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB92 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB92_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB93 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB93_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB96 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB96_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB97 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB97_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB98 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB98_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB99 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB99_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB9A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB9A_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB9B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB9B_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB9C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB9C_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 } 
+    }, { /* SSEB9D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB9D_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB9E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB9E_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEB9F */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEB9F_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA0 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA0_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA1 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA1_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA2 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA2_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA3 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA3_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA6 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA6_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA7 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA7_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA8 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA8_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBA9 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBA9_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBAA */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBAA_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBAB */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBAB_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBAC */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBAC_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 } 
+    }, { /* SSEBAD */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBAD_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBAE */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBAE_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBAF */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBAF_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBB4 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBB4_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBB5 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBB5_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBB6 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBB6_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBB7 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBB7_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBB8 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBB8_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBB9 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBB9_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBBA */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBBA_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBBB */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBBB_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBBC */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBBC_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBBD */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBBD_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBBE */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBBE_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBBF */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBBF_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBC4 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBC4_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBC8 */
+        { e_sha1nexte, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBC8_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBCA */
+        { e_sha1msg2, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBCA_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBCB */
+        { e_sha256rnds2, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* IMPLICIT XMM0 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBCB_66, false, { Zz, Zz, Zz }, 0, 0 }, /* IMPLICIT XMM0 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBCC */
+        { e_sha256msg1, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBCC_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBCD */
+        { e_sha256msg2, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBCD_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBF0 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_crc32, t_done, 0, true, { Gv, Eb, Zz }, 0, s1RW2R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBF1 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBF2 */
+        { e_No_Entry, t_sse_bis_mult, SSEBF2_NO, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBF5 */
+        { e_No_Entry, t_sse_bis_mult, SSEBF5_NO, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF5_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF5_F2, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBF6 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF6_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF6_F2, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSEBF7 */
+        { e_No_Entry, t_sse_bis_mult, SSEBF7_NO, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF7_F3, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF7_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_bis_mult, SSEBF7_F2, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }
 };
+/** END_DYNINST_TABLE_VERIFICATION */
 
 /* rows are not, 66, F2 prefixed in this order (see book) */
+/** START_DYNINST_TABLE_VERIFICATION(sse_ter_table) */
 static ia32_entry sseMapTer[][3] = {
-		{ /* SSET08 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_roundps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET09 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_roundpd, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET0A */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_roundss, t_done, 0, true, { Vss, Wss, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET0B */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_roundsd, t_done, 0, true, { Vsd, Wsd, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET0C */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_blendps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
-		},
-		{ /* SSET0D */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_blendps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
-		},
-		{ /* SSET0E */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pblendw, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
-		},		
-		{ /* SSET0F */
-				{ e_palignr, t_done, 0, true, { Pq, Qq, Ib }, 0, s1RW2R3R },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_palignr, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
-		},
-		{ /* SSET14 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pextrb, t_done, 0, true, { RMb, Vdq, Ib }, 0, s1W2R3R }, 
-		},
-		{ /* SSET15 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pextrw, t_done, 0, true, { RMw, Vdq, Ib }, 0, s1W2R3R }, 
-		},
-		{ /* SSET16 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pextrd_pextrq, t_done, 0, true, { Ey, Vdq, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET17 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_extractps, t_done, 0, true, { Ed, Vdq, Ib }, 0, s1W2R3R }, 
-		},
-		{ /* SSET20 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pinsrb, t_done, 0, true, { Vdq, RMb, Ib }, 0, s1W2R3R }, 
-		},
-		{ /* SSET21 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_insertps, t_done, 0, true, { Vdq, UMd, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET22 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pinsrd_pinsrq, t_done, 0, true, { Vdq, Ey, Ib }, 0, s1W2R3R },
-		},
-		{ /* SSET40 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_dpps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R }, 
-		},
-		{ /* SSET41 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_dppd, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R }, 
-		},
-		{ /* SSET42 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_mpsadbw, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R }, 
-		},
-		{ /* SSET60 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pcmpestrm, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }, 
-		},
-		{ /* SSET61 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pcmpestri, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }, 
-		},
-		{ /* SSET62 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pcmpistrm, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }, 
-		},
-		{ /* SSET63 */
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
-				{ e_pcmpistri, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }, 
-		}
-		
+    { /* SSET00 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermq, t_sse_ter_mult, SSET00_66, true, { Vdq, Wqq, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET01 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermpd, t_sse_ter_mult, SSET01_66, true, { Vpd, Wpd, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET02 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpblendd, t_done, 0, true, { Vpd, Hpd, Upd }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET03 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET03_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET04 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermilps, t_sse_ter_mult, SSET04_66, true, { Vps, Wps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET05 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermilpd, t_sse_ter_mult, SSET05_66, true, { Vpd, Wpd, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET06 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vperm2f128, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET08 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET08_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_roundps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R }
+    }, { /* SSET09 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET09_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_roundpd, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1W2R3R }
+    }, { /* SSET0A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET0A_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_roundss, t_done, 0, true, { Vss, Wss, Ib }, 0, s1W2R3R },
+    }, { /* SSET0B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET0B_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_roundsd, t_done, 0, true, { Vsd, Wsd, Ib }, 0, s1W2R3R },
+    }, { /* SSET0C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET0C_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_blendps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
+    }, { /* SSET0D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_blendps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
+    }, { /* SSET0E */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pblendw, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
+    }, { /* SSET0F */
+        { e_palignr, t_done, 0, true, { Pq, Qq, Ib }, 0, s1RW2R3R },
+        { e_No_Entry, t_sse_ter_mult, SSET0F_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_palignr, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R },
+    }, { /* SSET14 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET14_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pextrb, t_done, 0, true, { RMb, Vdq, Ib }, 0, s1W2R3R }
+    }, { /* SSET15 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pextrw, t_done, 0, true, { RMw, Vdq, Ib }, 0, s1W2R3R }, 
+    }, { /* SSET16 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET16_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pextrd_pextrq, t_done, 0, true, { Ey, Vdq, Ib }, 0, s1W2R3R },
+    }, { /* SSET17 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vextractps, t_sse_ter_mult, SSET17_66, true, { Ev, Vps, Ib }, 0, s1W2R3R },
+        { e_extractps, t_done, 0, true, { Ed, Vdq, Ib }, 0, s1W2R3R }, 
+    }, { /* SSET18 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vinsertf128, t_sse_ter_mult, SSET18_66, true, { Vdq, Hps, Wps }, 0, s1W2R3R4R }, 
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET19 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vextractf128, t_sse_ter_mult, SSET19_66, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET1A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET1A_66, true, { Zz, Zz, Zz }, 0, 0},
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET1B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET1B_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET1D */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vcvtps2ph, t_sse_ter_mult, SSET1D_66, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET20 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pinsrb, t_sse_ter_mult, SSET20_66, true, { Vdq, RMb, Ib }, 0, s1W2R3R }, 
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET21 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_insertps, t_sse_ter_mult, SSET21_66, true, { Vdq, UMd, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET22 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pinsrd_pinsrq, t_sse_ter_mult, SSET22_66, true, { Vdq, Ey, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET23 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pinsrd_pinsrq, t_sse_ter_mult, SSET23_66, true, { Vdq, Ey, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET25 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET25_66, true, { Zz, Zz, Zz }, 0, 0},
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET26 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET26_66, true, { Zz, Zz, Zz }, 0, 0},
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET27 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET27_66, true, { Zz, Zz, Zz }, 0, 0},
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET30 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET30_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET32 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET32_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET33 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET33_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET38 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vinserti128, t_sse_ter_mult, SSET38_66, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET39 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vextracti128, t_sse_ter_mult, SSET39_66, true, { Wps, Vps, Ib }, 0, s1RW2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET3A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET3A_66, true, { Zz, Zz, Zz }, 0, 0},
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET3B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET3B_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET40 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_dpps, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R }, 
+    }, { /* SSET41 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_dppd, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R }, 
+    }, { /* SSET42 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET42_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_mpsadbw, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1RW2R3R }, 
+    }, { /* SSET46 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vperm2i128, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET4A */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET4A_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET4B */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET4B_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET4C */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET4C_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET50 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET50_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET51 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET51_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET54 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET54_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET55 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET55_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET56 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET56_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET57 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET57_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET60 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pcmpestrm, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }
+    }, { /* SSET61 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pcmpestri, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }
+    }, { /* SSET62 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pcmpistrm, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }
+    }, { /* SSET63 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_pcmpistri, t_done, 0, true, { Vdq, Wdq, Ib }, 0, s1R2R3R }, 
+    }, { /* SSET66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET66_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET67 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSET67_66, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSETF0 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_sse_ter_mult, SSETF0_F2, false, { Zz, Zz, Zz }, 0, 0 },
+    }
 };
+/** END_DYNINST_TABLE_VERIFICATION */
+
+/**
+* SSE multiplexer tables:
+*
+* Some instructions share the same opcode and the only way
+ * to tell how many operands there are and the addressing
+ * mode is by looking at which vex prefix is used. This doesn't
+ * affect all sse/vex instructions so some skip this table
+ */
 
-/* rows are none or 66 prefixed in this order (see book) */
-static ia32_entry ssegrpMap[][2] = {
-  /* G12SSE010B */
-  {
-    { e_psrlw, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_psrlw, t_done, 0, true, { Pdq, Ib, Zz }, 0, s1RW2R }
-  },
-  /* G12SSE100B */
-  {
-    { e_psraw, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_psraw, t_done, 0, true, { Pdq, Ib, Zz }, 0, s1RW2R }
-  },
-  /* G12SSE110B */
-  {
-    { e_psllw, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_psllw, t_done, 0, true, { Pdq, Ib, Zz }, 0, s1RW2R }
-  },
-  /* G13SSE010B */
-  {
-    { e_psrld, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_psrld, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
-  },
-  /* G13SSE100B */
-  {
-    { e_psrad, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_psrad, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
-  },
-  /* G13SSE110B */
-  {
-    { e_pslld, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_pslld, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
-  },
-  /* G14SSE010B */
-  {
-    { e_psrlq, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
-    { e_psrlq, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
-  },
+/* SSE Table order:  NO, F3, 66, F2 */
+/* BSSE Table order: NO, F3, F2, 66F2 */
+/* TSSE Table order: NO, 66, F2 */
+
+/* rows are VEX2, VEX3, or EVEX prefixed in this order */
+/** START_DYNINST_TABLE_VERIFICATION(sse_vex_table) */
+ia32_entry sseMapMult[][3] = 
+{
+  { /* SSE10_66 */
+    { e_vmovupd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovupd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovupd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE10_F2 */
+    { e_vmovsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE10_F3 */
+    { e_vmovss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE10_NO */
+    { e_vmovups, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovups, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovups, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE12_F2 */
+    { e_vmovddup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovddup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovddup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE12_F3 */
+    { e_vmovsldup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovsldup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovsldup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE12_NO */
+    { e_vmovhlps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovhlps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE13_66 */
+    { e_vmovlpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovlpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE13_NO */
+    { e_vmovlps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovlps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE14_66 */
+    { e_vunpcklpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpcklpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpcklpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE14_NO */
+    { e_vunpcklps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpcklps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpcklps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE15_66 */
+    { e_vunpckhpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpckhpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpckhpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE15_NO */
+    { e_vunpckhps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpckhps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vunpckhps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE16_66 */
+    { e_vmovhpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovhpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE16_F3 */
+    { e_vmovshdup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovshdup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovshdup, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE16_NO */
+    { e_vmovhps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovhps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE28_66 */
+    { e_vmovapd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovapd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovapd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE28_NO */
+    { e_vmovaps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovaps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovaps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE2A_F2 */
+    { e_vcvtsi2sd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtsi2sd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2A_F3 */
+    { e_vcvtsi2ss, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtsi2ss, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vmovntpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSE2B_NO */
+    { e_vmovntps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1W2R3R },
+    { e_vmovntps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1W2R3R },
+    { e_vmovntps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1W2R3R },
+  }, { /* SSE2C_F2 */
+    { e_vcvttsd2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvttsd2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2C_F3 */
+    { e_vcvttss2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvttss2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2D_F2 */
+    { e_vcvtsd2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtsd2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2D_F3 */
+    { e_vcvtss2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtss2si, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2E_66 */
+    { e_vucomisd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vucomisd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2E_NO */
+    { e_vucomiss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vucomiss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2F_66 */
+    { e_vcomisd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vcomisd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE2F_NO */
+    { e_vcomiss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vcomiss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE41_66 */
+    { e_kandb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kandd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE41_NO */
+    { e_kandw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kandq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE42_66 */
+    { e_kandnb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kandnd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE42_NO */
+    { e_kandnw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kandnq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE44_66 */
+    { e_knotb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_knotd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE44_NO */
+    { e_knotw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_knotq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE45_66 */
+    { e_korb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kord, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE45_NO */
+    { e_korw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_korq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE46_66 */
+    { e_kxnorb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kxnord, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE46_NO */
+    { e_kxnorw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kxnorq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE47_66 */
+    { e_kxorb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kxord, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE47_NO */
+    { e_kxorw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kxorq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE4A_66 */
+    { e_kaddb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kaddd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE4A_NO */
+    { e_kaddw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kaddq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE4B_66 */
+    { e_kunpckbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE4B_NO */
+    { e_kunpckwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kunpckdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE51_66 */
+    { e_vsqrtpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE51_F2 */
+    { e_vsqrtsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE51_F3 */
+    { e_vsqrtss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE51_NO */
+    { e_vsqrtps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsqrtps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE54_66 */
+    { e_vandpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE54_NO */
+    { e_vandps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE55_66 */
+    { e_vandnpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandnpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandnpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE55_NO */
+    { e_vandnps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandnps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vandnps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE56_66 */
+    { e_vorpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vorpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vorpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE56_NO */
+    { e_vorps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vorps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vorps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE57_66 */
+    { e_vxorpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vxorpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vxorpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE57_NO */
+    { e_vxorps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vxorps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vxorps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE58_66 */
+    { e_vaddpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE58_F2 */
+    { e_vaddsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE58_F3 */
+    { e_vaddss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE58_NO */
+    { e_vaddps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vaddps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE59_66 */
+    { e_vmulpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE59_F2 */
+    { e_vmulsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE59_F3 */
+    { e_vmulss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE59_NO */
+    { e_vmulps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmulps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5A_66 */
+    { e_vcvtpd2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtpd2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    // { e_vcvtpd2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSE5A_F2 */
+    { e_vcvtsd2ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vcvtsd2ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vcvtsd2ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5A_F3 */
+    { e_vcvtss2sd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtss2sd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE5A_NO */
+    { e_vcvtps2pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtps2pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtps2pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSE5B_66 */
+    { e_vcvtps2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtps2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtps2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSE5B_F3 */
+    { e_vcvttps2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvttps2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvttps2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSE5B_NO */
+    { e_vcvtdq2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtdq2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtdq2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }, /* TODO: Generate collsion! */
+  }, { /* SSE5C_66 */
+    { e_vsubpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5C_F2 */
+    { e_vsubsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5C_F3 */
+    { e_vsubss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5C_NO */
+    { e_vsubps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vsubps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5D_66 */
+    { e_vminpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5D_F2 */
+    { e_vminsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5D_F3 */
+    { e_vminss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5D_NO */
+    { e_vminps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vminps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5E_66 */
+    { e_vdivpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5E_F2 */
+    { e_vdivsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5E_F3 */
+    { e_vdivss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5E_NO */
+    { e_vdivps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vdivps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5F_66 */
+    { e_vmaxpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5F_F2 */
+    { e_vmaxsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5F_F3 */
+    { e_vmaxss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE5F_NO */
+    { e_vmaxps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmaxps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE60_66 */
+    { e_vpunpcklbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpcklbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpcklbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE61_66 */
+    { e_vpunpcklwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpcklwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpcklwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE62_66 */
+    { e_vpunpckldq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckldq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckldq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE63_66 */
+    { e_vpacksswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpacksswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpacksswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE64_66 */
+    { e_vpcmpgtb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE65_66 */
+    { e_vpcmpgtw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE66_66 */
+    { e_vpcmpgtd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE67_66 */
+    { e_vpackuswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpackuswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpackuswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE68_66 */
+    { e_vpunpckhbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE69_66 */
+    { e_vpunpckhwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE6A_66 */
+    { e_vpunpckhdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE6B_66 */
+    { e_vpackssdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpackssdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpackssdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE6C_66 */
+    { e_vpunpcklqdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpcklqdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpcklqdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE6D_66 */
+    { e_vpunpckhqdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhqdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpunpckhqdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE6F_66 */
+    { e_vmovdqa, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovdqa, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW61, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSE6F_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW62, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE6F_F3 */
+    { e_vmovdqu, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovdqu, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW63, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE70_66 */
+    { e_vpshufd, t_done, 0, true, { Vps, Wps, Ib }, 0, s1W2R3R },
+    { e_vpshufd, t_done, 0, true, { Vps, Wps, Ib }, 0, s1W2R3R },
+    { e_vpshufd, t_done, 0, true, { Vps, Wps, Ib }, 0, s1W2R3R },
+  }, { /* SSE70_F2 */
+    { e_vpshuflw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    { e_vpshuflw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    { e_vpshuflw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+  }, { /* SSE70_F3 */
+    { e_vpshufhw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    { e_vpshufhw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    { e_vpshufhw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+  }, { /* SSE71_66 */
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE72_66 */
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW77, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE73_66 */
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW7C, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE74_66 */
+    { e_vpcmpeqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE75_66 */
+    { e_vpcmpeqw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE76_66 */
+    { e_vpcmpeqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSE78_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE78_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvttsd2usi, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }
+  }, { /* SSE78_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvttss2usi, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }
+  }, { /* SSE78_NO */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE79_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE79_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvtsd2usi, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }
+  }, { /* SSE79_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvtss2usi, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }
+  }, { /* SSE79_NO */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE7A_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE7A_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE7A_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE7B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvtpd2qq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }
+    // /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSE7B_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvtusi2sd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSE7B_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvtusi2ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSE7E_F3 */
+    { e_vmovq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE90_66 */
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE90_NO */
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE91_66 */
+    { e_kmovb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kmovd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE91_NO */
+    { e_kmovw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kmovq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE93_66 */
+    { e_kmovb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE93_F2 */
+    { e_kmovd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kmovq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE93_NO */
+    { e_kmovw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kmovw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE98_66 */
+    { e_kortestb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kortestd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE98_NO */
+    { e_kortestw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_kortestq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE99_66 */
+    { e_ktestb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_ktestd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSE99_NO */
+    { e_ktestw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_ktestq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEC2_66 */
+    { e_vcmppd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R4R },
+    { e_vcmppd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R4R },
+    { e_vcmppd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R4R },
+  }, { /* SSEC2_F2 */
+    { e_vcmpsd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1W2R3R4R },
+    { e_vcmpsd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1W2R3R4R },
+    { e_vcmpsd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1W2R3R4R },
+  }, { /* SSEC2_F3 */
+    { e_vcmpss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1W2R3R4R },
+    { e_vcmpss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1W2R3R4R },
+    { e_vcmpss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1W2R3R4R },
+  }, { /* SSEC2_NO */
+    { e_vcmpps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vcmpps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vcmpps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+  }, { /* SSEC4_66 */
+    { e_vpinsrw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vpinsrw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEC5_66 */
+    { e_vpextrw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    { e_vpextrw, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEC6_66 */
+    { e_vshufpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vshufpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vshufpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+  }, { /* SSEC6_NO */
+    { e_vshufps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vshufps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    { e_vshufps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+  }, { /* SSED1_66 */
+    { e_vpsrlw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrlw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrlw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSED2_66 */
+    { e_vpsrld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSED3_66 */
+    { e_vpsrlq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrlq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrlq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSED4_66 */
+    { e_vpaddq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSED5_66 */
+    { e_vpmullw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmullw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmullw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSED8_66 */
+    { e_vpsubusb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubusb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubusb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSED9_66 */
+    { e_vpsubusw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubusw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubusw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEDA_66 */
+    { e_vpminub, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpminub, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpminub, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEDB_66 */
+    { e_vpand, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R },
+    { e_No_Entry, t_vexw, VEXW91, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW64, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEDC_66 */
+    { e_vpaddusb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddusb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddusb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEDD_66 */
+    { e_vpaddusw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddusw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddusw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEDE_66 */
+    { e_vpmaxub, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaxub, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaxub, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEDF_66 */
+    { e_vpandn, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpandn, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW65, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEE0_66 */
+    { e_vpavgb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpavgb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpavgb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEE1_66 */
+    { e_vpsraw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsraw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsraw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEE2_66 */
+    { e_vpsrad, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsrad, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEE3_66 */
+    { e_vpavgw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpavgw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpavgw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEE4_66 */
+    { e_vpmulhuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmulhuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmulhuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEE5_66 */
+    { e_vpmulhw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmulhw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmulhw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEE6_66 */
+    { e_vcvttpd2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvttpd2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvttpd2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSEE6_F2 */
+    { e_vcvtpd2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtpd2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtpd2dq, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSEE6_F3 */
+    { e_vcvtdq2pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtdq2pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtdq2pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSEE7_66 */
+    { e_vmovntdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovntdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vmovntdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEE8_66 */
+    { e_vpsubsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEE9_66 */
+    { e_vpsubsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEEA_66 */
+    { e_vpminsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpminsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpminsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEEB_66 */
+    { e_vpor, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpor, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW75, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEEC_66 */
+    { e_vpaddsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEED_66 */
+    { e_vpaddsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEEE_66 */
+    { e_vpmaxsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaxsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaxsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEEF_66 */
+    { e_vpxor, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpxor, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW81, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEF1_66 */
+    { e_vpsllw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsllw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsllw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF2_66 */
+    { e_vpslld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpslld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpslld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF3_66 */
+    { e_vpsllq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsllq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsllq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF4_66 */
+    { e_vpmuludq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmuludq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmuludq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF5_66 */
+    { e_vpmaddwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaddwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaddwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF6_66 */
+    { e_vpsadbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsadbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsadbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF8_66 */
+    { e_vpsubb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEF9_66 */
+    { e_vpsubw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEFA_66 */
+    { e_vpsubd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEFB_66 */
+    { e_vpsubq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpsubq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEFC_66 */
+    { e_vpaddb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEFD_66 */
+    { e_vpaddw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEFE_66 */
+    { e_vpaddd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpaddd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }
+};
+/** END_DYNINST_TABLE_VERIFICATION */
+
+/* BSSE Table order: NO, F3, F2, 66F2 */
+/* rows are none, VEX2 or VEX3, EVEX prefixed in this order */
+/** START_DYNINST_TABLE_VERIFICATION(sse_bis_vex_table) */
+ia32_entry sseMapBisMult[][3] = 
+{
+  { /* SSEB00_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpshufb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpshufb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB01_66 */
+    { e_vphaddw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vphaddw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB02_66 */
+    { e_vphaddd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vphaddd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB03_66 */
+    { e_vphaddsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vphaddsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB04_66 */
+    { e_vpmaddubsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vpmaddubsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vpmaddubsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+  }, { /* SSEB05_66 */
+    { e_vphsubw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vphsubw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB06_66 */
+    { e_vphsubd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vphsubd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB07_66 */
+    { e_vphsubsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_vphsubsw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB0B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmulhrsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmulhrsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB0C_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpermilps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpermilps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB0D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpermilpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpermilpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB10_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpsrlvw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB10_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovuswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB11_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpsravw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB11_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovusdb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB12_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpsllvw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB12_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovusqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB13_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vcvtph2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+    { e_vcvtph2ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R },
+  }, { /* SSEB13_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovusdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB14_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW78, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB14_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovusqw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB15_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW76, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB15_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovusqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB16_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpermps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB18_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vbroadcastss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB19_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB1A_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vbroadcastf32x4, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB1C_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpabsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpabsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB1D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpabsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpabsw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB1E_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpabsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpabsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB1F_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpabsq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB20_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsxbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovsxbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB20_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovswb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB21_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsxbd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovsxbd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB21_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsdb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB22_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsxbq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovsxbq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB22_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB23_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsxwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovsxwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB23_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB24_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsxwq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovsxwq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB24_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsqw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB25_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsxdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovsxdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB25_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovsqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB26_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB27_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB28_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmuldq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmuldq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB28_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB29_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpcmpeqq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpeqq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB29_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB2A_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vmovntdqa, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB2A_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpbroadcastmb2q, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB2B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpackusdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpackusdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB30_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovzxbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovzxbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB30_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovwb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB31_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovzxbd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovzxbd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB31_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovdb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB32_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovzxbq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovzxbq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB32_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB33_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovzxwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovzxwd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB33_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovdw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB34_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovzxwq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovzxwq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB34_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovqw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB35_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovzxdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmovzxdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB35_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmovqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB36_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpermd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpermd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB37_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpcmpgtq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpcmpgtq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB38_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpminsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpminsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB38_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB39_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpminsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW73, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB39_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW73, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB3A_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpminuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpminuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB3B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpminud, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW74, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB3C_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmaxsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaxsb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB3D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmaxsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW71, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB3E_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmaxuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmaxuw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB3F_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmaxud, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW72, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB40_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmulld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vpmulld, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB42_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW59, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB43_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW5A, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB44_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW70, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB45_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW20, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW70, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB46_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpsravd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_vexw, VEXW80, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB47_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW21, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW7D, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB4C_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW84, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB4D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW85, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB4E_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW88, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB4F_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW89, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB65_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW2C, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB66_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW14, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW2C, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB75_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW68, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB76_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW69, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB77_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW6A, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB7D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW6B, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB7E_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW6C, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB7F_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW6D, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB83_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmultishiftqb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEB88_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW2E, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB89_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW6F, false, { Zz, Zz, Zz }, 0, 0 }, 
+  }, { /* SSEB8B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW66, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB8C_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB8D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW68, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB8E_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEB90_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW22, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW55, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB91_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW23, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW56, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB92_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW92, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW57, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB93_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW58, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB96_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW00, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW35, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB97_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW01, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW36, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB98_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW02, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW37, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEB99_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW03, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW38, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB9A_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW04, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW39, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB9B_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW05, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW3A, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB9C_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW06, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW3B, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB9D_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW07, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW3C, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEB9E_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vfnmsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_vfnmsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+  }, { /* SSEB9F_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW09, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW3E, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA0_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW7A, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA1_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW7B, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA2_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW8A, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA3_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW8B, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA6_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW0A, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW3F, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA7_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW0B, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW40, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA8_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW0C, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW41, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBA9_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW0D, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW42, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBAA_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW0E, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW43, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBAB_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW0F, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW44, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBAC_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW10, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW45, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBAD_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW11, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW46, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBAE_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW09, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW47, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBAF_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW13, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW48, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBB4_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmadd52luq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEBB5_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_vpmadd52huq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }
+  }, { /* SSEBB6_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW14, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW49, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBB7_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW15, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW4A, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBB8_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW16, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW4B, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBB9_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW17, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW4C, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBBA_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW18, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW4D, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBBB_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW19, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW4E, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBBC_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW1A, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW4F, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBBD_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW1B, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW52, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBBE_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW13, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW51, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBBF_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW1D, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW48, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBC4_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW67, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEBC6_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEBC7_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+  }, { /* SSEBC8_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW8C, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBCA_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW8D, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBCB_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW8E, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBCC_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW8F, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBCD_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_No_Entry, t_vexw, VEXW90, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBF2_NO */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_andn, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBF5_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_pdep, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEBF5_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_pext, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEBF5_NO */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_bzhi, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEBF6_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_mulx, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBF6_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_mulx, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+  }, { /* SSEBF7_66 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_shlx, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBF7_F2 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_shrx, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBF7_F3 */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_sarx, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }, { /* SSEBF7_NO */
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    { e_bextr, t_done, 0, true, { Gv, Ev, Bv }, 0, s1W2R3R },
+    { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+  }
+};
+/** END_DYNINST_TABLE_VERIFICATION */
+  
+/* TSSE Table order: NO, 66, F2 */
+/* rows are none, VEX2 or VEX3, EVEX prefixed in this order */
+/** START_DYNINST_TABLE_VERIFICATION(sse_vex_ter_table) */
+ia32_entry sseMapTerMult[][3] = 
+{
+    { /* SSET00_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermq, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_vpermq, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    }, { /* SSET01_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermpd, t_done, 0, true, { Wpd, Vpd, Ib }, 0, s1W2R3R },
+        { e_vpermpd, t_done, 0, true, { Vpd, Hpd, Ib }, 0, s1W2R3R },
+    }, { /* SSET03_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW2B, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET04_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermilps, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_vpermilps, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    }, { /* SSET05_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpermilpd, t_done, 0, true, { Wpd, Vpd, Ib }, 0, s1W2R3R },
+        { e_vpermilpd, t_done, 0, true, { Wpd, Vpd, Ib }, 0, s1W2R3R },
+    }, { /* SSET08_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vrndscaleps, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }
+    }, { /* SSET09_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vroundpd, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_vrndscalepd, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }
+    }, { /* SSET0A_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vrndscaless, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }
+    }, { /* SSET0B_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vrndscalesd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }
+    }, { /* SSET0C_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vblendps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }
+    }, { /* SSET0F_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpalignr, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }, /** Intel manual is wrong -- 4 operands */
+        { e_vpalignr, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+    }, { /* SSET14_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpextrb, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET16_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW26, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET17_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vextractps, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET18_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vinsertf128, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_vexw, VEXW5D, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET19_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vextractf128, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_vexw, VEXW2F, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET1A_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW5E, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET1B_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW30, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET1D_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vcvtps2ph, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_vcvtps2ph, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+    }, { /* SSET1E_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    }, { /* SSET1F_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    }, { /* SSET20_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpinsrb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET21_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vinsertps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET22_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW27, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET23_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW7E, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET25_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW7F, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET26_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW5B, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET27_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW5C, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET30_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET31_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET32_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET33_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET38_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vinserti128, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_vexw, VEXW5F, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET39_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vextracti128, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_vexw, VEXW31, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET3A_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW60, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET3B_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW32, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET3E_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    }, { /* SSET3F_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        /**/{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, // COLLISION HERE
+    }, { /* SSET42_66 */
+        { e_vmpsadbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_vdbpsadbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_vdbpsadbw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }
+    }, { /* SSET4A_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vblendvps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET4B_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vblendvpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET4C_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_vpblendvb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET50_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW82, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET51_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW83, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET54_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW33, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET55_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW34, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET56_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW86, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET57_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW87, false, { Zz, Zz, Zz }, 0, 0 }
+    }, { /* SSET66_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW53, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSET67_66 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_No_Entry, t_vexw, VEXW54, false, { Zz, Zz, Zz }, 0, 0 },
+    }, { /* SSETF0_F2 */
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+        { e_rorx, t_done, 0, true, { Gv, Bv, Ib }, 0, s1W2R3R },
+        { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 },
+    }
+};
+/** END_DYNINST_TABLE_VERIFICATION */
+
+/* rows are none or 66 prefixed in this order (see book) */
+static ia32_entry ssegrpMap[][2] = {
+  /* G12SSE010B */
+  {
+    { e_psrlw, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_psrlw, t_done, 0, true, { Pdq, Ib, Zz }, 0, s1RW2R }
+  },
+  /* G12SSE100B */
+  {
+    { e_psraw, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_psraw, t_done, 0, true, { Pdq, Ib, Zz }, 0, s1RW2R }
+  },
+  /* G12SSE110B */
+  {
+    { e_psllw, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_psllw, t_done, 0, true, { Pdq, Ib, Zz }, 0, s1RW2R }
+  },
+  /* G13SSE010B */
+  {
+    { e_psrld, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_psrld, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
+  },
+  /* G13SSE100B */
+  {
+    { e_psrad, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_psrad, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
+  },
+  /* G13SSE110B */
+  {
+    { e_pslld, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_pslld, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
+  },
+  /* G14SSE010B */
+  {
+    { e_psrlq, t_done, 0, true, { Pq, Ib, Zz }, 0, s1RW2R },
+    { e_psrlq, t_done, 0, true, { Wdq, Ib, Zz }, 0, s1RW2R }
+  },
   /* G14SSE011B */
   {
     { e_No_Entry, t_ill, 0, true, { Zz, Zz, Zz }, 0, 0 },
@@ -3899,6 +7319,483 @@ static ia32_entry ssegrpMap[][2] = {
   }
 };
 
+/**
+ * VEX (2 byte) prefixed instructions
+ *
+ * Instruction lookup: [index][L]
+ *    index: found by using opcode lookups in the oneByteMap.
+ *    L: The l bit of the prefix. L=1 is YMM registers, L=0 is XMM registers
+ */
+static struct ia32_entry vex2Map[][2] =
+{
+    { /* VEX200 */
+      { e_vzeroupper, t_done, 0, false, { Zz, Zz, Zz }, 0, sNONE }, /* L = 0 */
+      { e_vzeroall, t_done, 0, false, { Zz, Zz, Zz }, 0, sNONE }  /* L = 1 */
+    }
+};
+
+/**
+ * VEX (3 byte) prefixed instructions
+ *
+ * Instruction lookup (loop 1): [index][W]
+ *    index: found by using opcode lookups in the oneByteMap.
+ *    W: The w bit of the prefix. This can completely change the behavior
+ *        of certain VEX3 prefixed instructions.
+ */
+
+#define VEX3_ILL \
+  {{ e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }, \
+   { e_No_Entry, t_ill, 0, false, { Zz, Zz, Zz }, 0, 0 }}
+
+/** START_DYNINST_TABLE_VERIFICATION(vex_w_table) */
+static struct ia32_entry vexWMap[][2] =
+{
+    { /* VEXW00 */
+      { e_vfmaddsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmaddsub132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW01 */
+      { e_vfmsubadd132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsubadd132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW02 */
+      { e_vfmadd132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW03 */
+      { e_vfmadd132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW04 */
+      { e_vfmsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW05 */
+      { e_vfmsub132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW06 */
+      { e_vfnmadd132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW07 */
+      { e_vfnmadd132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW08 */
+      { e_vfnmsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW09 */
+      { e_vfnmsub132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW0A */
+      { e_vfmaddsub213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmaddsub213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW0B */
+      { e_vfmsubadd213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsubadd213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW0C */
+      { e_vfmadd213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW0D */
+      { e_vfmadd213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW0E */
+      { e_vfmsub213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW0F */
+      { e_vfmsub213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW10 */
+      { e_vfnmadd213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW11 */
+      { e_vfnmadd213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW12 */
+      { e_vfnmsub213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW13 */
+      { e_vfnmsub213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW14 */
+      { e_vfmaddsub231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmaddsub231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW15 */
+      { e_vfmsubadd231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsubadd231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW16 */
+      { e_vfmadd231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW17 */
+      { e_vfmadd231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW18 */
+      { e_vfmsub231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW19 */
+      { e_vfmsub231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW1A */
+      { e_vfnmadd231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW1B */
+      { e_vfnmadd231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW1C */
+      { e_vfnmsub231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW1D */
+      { e_vfnmsub231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW1E */
+      { e_vpmaskmovd, t_done, 0, true, { Wd, Hps, Vps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vpmaskmovq, t_done, 0, true, { Wq, Hps, Vps }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW1F*/
+      { e_vpmaskmovd, t_done, 0, true, { Vps, Hps, Wd }, 0, s1W2R3R }, /* W = 0 */
+      { e_vpmaskmovq, t_done, 0, true, { Vps, Hps, Wq }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW20 */
+      { e_vpsrlvd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vpsrlvq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW21 */
+      { e_vpsllvd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vpsllvq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW22 */
+      { e_vpgatherdd, t_done, 0, true, { Vpd, Wpd, Hpd }, 0, s1RW2R3RW }, /* W = 0 */
+      { e_vpgatherdq, t_done, 0, true, { Vdq, Wdq, Hdq }, 0, s1RW2R3RW }  /* W = 1 */
+    }, { /* VEXW23 */
+      { e_vpgatherqd, t_done, 0, true, { Vpd, Wpd, Hpd }, 0, s1RW2R3RW }, /* W = 0 */
+      { e_vpgatherqq, t_done, 0, true, { Vdq, Wdq, Hdq }, 0, s1RW2R3RW }  /* W = 1 */
+    }, { /* VEXW24 */
+      { e_vgatherdps, t_done, 0, true, { Vps, Wps, Hps }, 0, s1RW2R3RW }, /* W = 0 */
+      { e_vgatherdpd, t_done, 0, true, { Vpd, Wpd, Hpd }, 0, s1RW2R3RW }  /* W = 1 */
+    }, { /* VEXW25 */
+      { e_vgatherqps, t_done, 0, true, { Vps, Wps, Hps }, 0, s1RW2R3RW }, /* W = 0 */
+      { e_vgatherqpd, t_done, 0, true, { Vpd, Wpd, Hpd }, 0, s1RW2R3RW }  /* W = 1 */ 
+    }, { /* VEXW26 */
+      { e_vpextrd, t_done, 0, true, { Vpd, Wpd, Ib }, 0, s1W2R3R }, /* W = 0 */
+      { e_vpextrq, t_done, 0, true, { Vpd, Wpd, Ib }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW27 */
+      { e_vpinsrd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R4R }, /* W = 0 */
+      { e_vpinsrq, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R4R }  /* W = 1 */
+    }, { /* VEXW28 */
+      { e_valignd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }, /* W = 0 */ /* Intel manual wrong, 4 operands */
+      { e_valignq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }  /* W = 1 */
+    }, { /* VEXW29 */
+      { e_vblendmps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vblendmpd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW2A */
+      { e_vpblendmb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vpblendmw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW2B */ /* EVEX Version */
+      { e_valignd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }, /* W = 0 */ /* Intel manual wrong, 4 operands */
+      { e_valignq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }  /* W = 1 */
+    }, { /* VEXW2C */
+      { e_vblendmps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },  /* W = 0 */
+      { e_vblendmpd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R } /* W = 1 */
+    }, { /* VEXW2D */ /* EVEX VERSION*/
+      { e_vpblendmb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R },  /* W = 0 */
+      { e_vpblendmw, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R } /* W = 1 */
+    }, { /* VEXW2E */ /* EVEX VERSION*/
+      { e_vexpandps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vexpandpd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW2F */ /* EVEX VERSION*/
+      { e_vextractf32x4, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }, /* W = 0 */
+      { e_vextractf64x2, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW30 */ /* EVEX VERSION*/
+      { e_vextractf32x8, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }, /* W = 0 */
+      { e_vextractf64x4, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW31 */ /* EVEX VERSION*/
+      { e_vextracti32x4, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }, /* W = 0 */
+      { e_vextracti64x2, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW32 */ /* EVEX VERSION*/
+      { e_vextracti32x8, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }, /* W = 0 */
+      { e_vextracti64x4, t_done, 0, true, { Wps, Vps, Ib }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW33 */ /* EVEX VERSION*/
+      { e_vfixupimmps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }, /* W = 0 */
+      { e_vfixupimmpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }  /* W = 1 */
+    }, { /* VEXW34 */ /* EVEX VERSION*/
+      { e_vfixupimmss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }, /* W = 0 */
+      { e_vfixupimmsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R4R }  /* W = 1 */
+    }, { /* VEXW35 */ /* EVEX VERSION */
+      { e_vfmaddsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmaddsub132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW36 *//* EVEX VERSION */
+      { e_vfmsubadd132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsubadd132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW37 *//* EVEX VERSION */
+      { e_vfmadd132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW38 *//* EVEX VERSION */
+      { e_vfmadd132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW39 *//* EVEX VERSION */
+      { e_vfmsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW3A *//* EVEX VERSION */
+      { e_vfmsub132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW3B *//* EVEX VERSION */
+      { e_vfnmadd132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW3C *//* EVEX VERSION */
+      { e_vfnmadd132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW3D *//* EVEX VERSION */
+      { e_vfnmsub132ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub132pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW3E *//* EVEX VERSION */
+      { e_vfnmsub132ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub132sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW3F *//* EVEX VERSION */
+      { e_vfmaddsub213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmaddsub213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW40 *//* EVEX VERSION */
+      { e_vfmsubadd213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsubadd213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW41 *//* EVEX VERSION */
+      { e_vfmadd213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW42 *//* EVEX VERSION */
+      { e_vfmadd213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW43 *//* EVEX VERSION */
+      { e_vfmsub213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW44 *//* EVEX VERSION */
+      { e_vfmsub213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW45 *//* EVEX VERSION */
+      { e_vfnmadd213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW46 *//* EVEX VERSION */
+      { e_vfnmadd213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW47 *//* EVEX VERSION */
+      { e_vfnmsub213ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub213pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW48 *//* EVEX VERSION */
+      { e_vfnmsub213ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub213sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW49 *//* EVEX VERSION */
+      { e_vfmaddsub231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmaddsub231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW4A *//* EVEX VERSION */
+      { e_vfmsubadd231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsubadd231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW4B *//* EVEX VERSION */
+      { e_vfmadd231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW4C *//* EVEX VERSION */
+      { e_vfmadd231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmadd231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW4D *//* EVEX VERSION */
+      { e_vfmsub231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW4E *//* EVEX VERSION */
+      { e_vfmsub231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfmsub231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW4F *//* EVEX VERSION */
+      { e_vfnmadd231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW50 *//* EVEX VERSION */
+      { e_vfnmadd231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmadd231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW51 *//* EVEX VERSION */
+      { e_vfnmsub231ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub231pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW52 *//* EVEX VERSION */
+      { e_vfnmsub231ss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vfnmsub231sd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW53 *//* EVEX VERSION */
+      { e_vfpclassps, t_done, 0, true, { Wps, Vps, Ib }, 0, s1RW2R }, /* W = 0 */
+      { e_vfpclasspd, t_done, 0, true, { Wpd, Vpd, Ib }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW54 *//* EVEX VERSION */
+      { e_vfpclassss, t_done, 0, true, { Wss, Vss, Ib }, 0, s1RW2R }, /* W = 0 */
+      { e_vfpclasssd, t_done, 0, true, { Wsd, Vsd, Ib }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW55 *//* EVEX VERSION */
+      { e_vpgatherdd, t_done, 0, true, { Wss, Vss, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpgatherdq, t_done, 0, true, { Wsd, Vsd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW56 *//* EVEX VERSION */
+      { e_vpgatherqd, t_done, 0, true, { Wss, Vss, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpgatherqq, t_done, 0, true, { Wsd, Vsd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW57 *//* EVEX VERSION */
+      { e_vgatherdps, t_done, 0, true, { Wss, Vss, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vgatherdpd, t_done, 0, true, { Wsd, Vsd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW58 *//* EVEX VERSION */
+      { e_vgatherqps, t_done, 0, true, { Wss, Vss, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vgatherqps, t_done, 0, true, { Wsd, Vsd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW59 *//* EVEX VERSION */
+      { e_vgetexpps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vgetexppd, t_done, 0, true, { Wpd, Vpd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW5A *//* EVEX VERSION */
+      { e_vgetexpss, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vgetexpsd, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW5B */
+      { e_vgetmantps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vgetmantpd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW5C */
+      { e_vgetmantsd, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vgetmantss, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW5D */
+      { e_vinsertf32x4, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vinsertf64x4, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW5E */
+      { e_vinsertf32x8, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vinsertf64x4, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW5F */
+      { e_vinserti32x4, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vinserti64x2, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW60 */
+      { e_vinserti32x8, t_done, 0, true, { Vss, Hss, Wss }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vinserti64x4, t_done, 0, true, { Vsd, Hsd, Wsd }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW61 */
+      { e_vmovdqa32, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vmovdqa64, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW62 */
+      { e_vmovdqu8, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vmovdqu16, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW63 */
+      { e_vmovdqu32, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vmovdqu64, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW64 */
+      { e_vpandd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpandq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW65 */
+      { e_vpandnd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpandnq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW66 */
+      { e_vpcompressd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpcompressq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW67 */
+      { e_vpconflictd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpconflictq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW68 */
+      { e_vpermb, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW69 */
+      { e_vpermi2b, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermi2w, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW6A */
+      { e_vpermi2d, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermi2q, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW6B */
+      { e_vpermi2ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermi2pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW6C */
+      { e_vpermt2b, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermt2w, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW6D */
+      { e_vpermt2d, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermt2q, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW6E */
+      { e_vpermt2ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpermt2pd, t_done, 0, true, { Vpd, Hpd, Wpd }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW6F */
+      { e_vpexpandd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpexpandq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW70 */
+      { e_vplzcntd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vplzcntq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW71 */
+      { e_vpmaxsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpmaxsq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW72 */
+      { e_vpmaxud, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpmaxuq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW73 */
+      { e_vpminsd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpminsq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW74 */
+      { e_vpminud, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpminuq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW75 */
+      { e_vpord, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vporq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW76 */
+      { e_vprolvd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vprolvq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW77 */
+      { e_vprold, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vprolq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW78 */
+      { e_vprorvd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vprorvq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW79 */
+      { e_vprord, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vprorq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW7A */
+      { e_vpscatterdd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpscatterdq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW7B */
+      { e_vpscatterqd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpscatterqq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW7C */
+      { e_vpsrldq, t_done, 0, true, { Wps, Vps, Ib }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpsrlq, t_done, 0, true, { Wps, Vps, Ib }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW7D */
+      { e_vpsllvd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpsllvw, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW7E */
+      { e_vshuff32x4, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vshuff64x2, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW7F */
+      { e_vpternlogd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vpternlogq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW80 */
+      { e_vpsravd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpsravq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW81 */
+      { e_vpxord, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vpxorq, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW82 */
+      { e_vrangeps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vrangepd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW83 */
+      { e_vrangess, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vrangesd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW84 */
+      { e_vrcp14ps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vrcp14pd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW85 */
+      { e_vrcp14ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vrcp14sd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW86 */
+      { e_vreduceps, t_done, 0, true, { Wps, Vps, Ib }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vreducepd, t_done, 0, true, { Wps, Vps, Ib }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW87 */
+      { e_vreducess, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }, /* W = 0 */
+      { e_vreducesd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R4R }  /* W = 1 */
+    }, { /* VEXW88 */
+      { e_vrsqrt14ps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vrsqrt14pd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW89 */
+      { e_vrsqrt14ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vrsqrt14sd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW8A */
+      { e_vscatterdps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vscatterdpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW8B */
+      { e_vscatterqps, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vscatterqpd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW8C */
+      { e_vexp2ps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vexp2pd, t_done, 0, true, { Wpd, Vpd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW8D */
+      { e_vrcp28ps, t_done, 0, true, { Wps, Vps, Zz }, 0, s1W2R }, /* W = 0 */
+      { e_vrcp28pd, t_done, 0, true, { Wpd, Vpd, Zz }, 0, s1W2R }  /* W = 1 */
+    }, { /* VEXW8E */
+      { e_vrcp28ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }, /* W = 0 */
+      { e_vrcp28sd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1RW2R3R }  /* W = 1 */
+    }, { /* VEXW8F */
+      { e_vrsqrt28ps, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }, /* W = 0 */
+      { e_vrsqrt28pd, t_done, 0, true, { Vps, Wps, Zz }, 0, s1W2R }  /* W = 1 */
+    }, { /* VEXW90 */
+      { e_vrsqrt28ss, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }, /* W = 0 */
+      { e_vrsqrt28sd, t_done, 0, true, { Vps, Hps, Wps }, 0, s1W2R3R }  /* W = 1 */
+    }, { /* VEXW91 */
+      { e_vpandd, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vpandq, t_done, 0, true, { Wps, Vps, Zz }, 0, s1RW2R }  /* W = 1 */
+    }, { /* VEXW92 */
+      { e_vgatherdps, t_done, 0, true, { Wss, Vss, Zz }, 0, s1RW2R }, /* W = 0 */
+      { e_vgatherdpd, t_done, 0, true, { Wsd, Vsd, Zz }, 0, s1RW2R }  /* W = 1 */
+    }
+};
+/** END_DYNINST_TABLE_VERIFICATION */
+#undef VEX3_ILL
+
 static bool mode_64 = false;
 
 void ia32_set_mode_64(bool mode) {
@@ -3963,325 +7860,613 @@ void ia32_memacc::print()
 
 int getOperSz(const ia32_prefixes &pref) 
 {
-   if (pref.rexW()) return 4;
-   else if (pref.getPrefix(2) == PREFIX_SZOPER) return 1;
-   else return 2;
+    /* TODO: VEX prefixed instructions only touch XMM or YMM unless they are loading/storing to memory. */
+    if(pref.vex_present)
+    {
+        switch(pref.vex_ll)
+        {
+            case 0:
+                return 16;
+            case 1:
+                return 32;
+            case 2:
+                return 64;
+            default: /* Shouldn't be valid */
+                return 16;
+        }
+    }
+    else if (pref.rexW()) return 4;
+    else if (pref.getPrefix(2) == PREFIX_SZOPER) return 1;
+    else return 2;
 }
 
 ia32_instruction& ia32_decode(unsigned int capa, const unsigned char* addr, ia32_instruction& instruct)
 {
-  ia32_prefixes& pref = instruct.prf;
-  unsigned int table, nxtab;
-  unsigned int idx = 0, sseidx = 0;
-  ia32_entry *gotit = NULL;
-  int condbits = 0;
-
-  if(capa & IA32_DECODE_MEMACCESS)
-    assert(instruct.mac != NULL);
-
-  if (!ia32_decode_prefixes(addr, pref, instruct.loc)) {
-    instruct.size = 1;
-    instruct.legacy_type = ILLEGAL;
-    return instruct;
-  }
+    ia32_prefixes& pref = instruct.prf;
+    unsigned int table, nxtab;
+    unsigned int idx = 0;
+    int sseidx = 0;
+    ia32_entry *gotit = NULL;
+    int condbits = 0;
+  
+    if(capa & IA32_DECODE_MEMACCESS)
+    {
+        assert(instruct.mac != NULL);
+    }
 
-  if((pref.getOpcodePrefix()) && pref.getCount())
-  {
-    idx = pref.getOpcodePrefix();
-  }
+    /* First decode any prefixes for this instruction */
+    if (!ia32_decode_prefixes(addr, pref, instruct.loc)) 
+    {
+        instruct.size = 1;
+	    instruct.entry = NULL;
+        instruct.legacy_type = ILLEGAL;
+        return instruct;
+    }
 
-  if (instruct.loc) instruct.loc->num_prefixes = pref.getCount();
-  instruct.size = pref.getCount();
-  addr += instruct.size;
-
-  table = t_oneB;
-  if(idx == 0) {
-    // consume opcode
-    idx = addr[0];
-    instruct.size += 1;
-    addr += 1;
-  } else {
-    // opcode already consumed (prefix opcode)
-  }
+#ifdef VEX_DEBUG
+    /* Dump the VEX header */
+    printf("IS VEX PRESENT?  %s\n", pref.vex_present ? "YES" : "NO");
+    if(pref.vex_present)
+    {
+        printf("VEX IS PRESENT: %d\n", pref.vex_type);
+        printf("VEX BYTES:      %x %x %x %x %x\n",
+                pref.vex_prefix[0], pref.vex_prefix[1], pref.vex_prefix[2],
+                pref.vex_prefix[3], pref.vex_prefix[4]);
+        printf("VEX SSE MULT:   %d  0x%x\n", pref.vex_sse_mult, pref.vex_sse_mult);
+        printf("VEX_VVVV:       %d  0x%x\n", pref.vex_vvvv_reg, pref.vex_vvvv_reg);
+        printf("VEX_LL:         %d  0x%x\n", pref.vex_ll, pref.vex_ll);
+        printf("VEX_PP:         %d  0x%x\n", pref.vex_pp, pref.vex_pp);
+        printf("VEX_M-MMMM:     %d  0x%x\n", pref.vex_m_mmmm, pref.vex_m_mmmm);
+        printf("VEX_W:          %d  0x%x\n", pref.vex_w, pref.vex_w);
+        printf("VEX_r:          %d  0x%x\n", pref.vex_r, pref.vex_r);
+        printf("VEX_R:          %d  0x%x\n", pref.vex_R, pref.vex_R);
+        printf("VEX_x:          %d  0x%x\n", pref.vex_x, pref.vex_x);
+        printf("VEX_b:          %d  0x%x\n", pref.vex_b, pref.vex_b);
+    }
+#endif
 
-  gotit = &oneByteMap[idx];
-  nxtab = gotit->otable;
+    if((pref.getOpcodePrefix()) && pref.getCount())
+    {
+        idx = pref.getOpcodePrefix();
+    }
 
-  if(capa & IA32_DECODE_CONDITION) {
-    assert(instruct.cond != NULL);
-    condbits = idx & 0x0F;
-  }
+    if(instruct.loc) 
+    {
+        instruct.loc->num_prefixes = pref.getCount();
+    }
 
-  while(nxtab != t_done) {
-    table = nxtab;
-    switch(table) {
-    case t_twoB:
-      idx = addr[0];
-      gotit = &twoByteMap[idx];
-      nxtab = gotit->otable;
-      instruct.size += 1;
-      addr += 1;
-      if(capa & IA32_DECODE_CONDITION)
-        condbits = idx & 0x0F;
-      break;
-    case t_threeB:
-      idx = addr[0];
-      gotit = &threeByteMap[idx];
-      nxtab = gotit->otable;
-      instruct.size += 1;
-      addr += 1;
-      if(capa & IA32_DECODE_CONDITION)
-    	condbits = idx & 0x0F;
-      break;
-    case t_threeB2:
-      idx = addr[0];
-      gotit = &threeByteMap2[idx];
-      nxtab = gotit->otable;
-      instruct.size += 1;
-      addr += 1;
-      if(capa & IA32_DECODE_CONDITION)
-    	condbits = idx & 0x0F;
-      break;
-    case t_prefixedSSE:
-      sseidx = gotit->tabidx;
-      if(addr[0] != 0x0F)
-      {
-          // all valid SSE insns will have 0x0F as their first byte after prefix
-          instruct.size += 1;
-          addr += 1;
-          instruct.entry = &invalid;
-          return instruct;
-      }
-      idx = addr[1];
-      gotit = &twoByteMap[idx];
-      nxtab = gotit->otable;
-      instruct.size += 2;
-      addr += 2;
-      break;
-    case t_sse:
-      idx = gotit->tabidx;
-      gotit = &sseMap[idx][sseidx];
-      nxtab = gotit->otable;
-      break;
-    case t_sse_bis:
-      idx = gotit->tabidx;
-      gotit = &sseMapBis[idx][sseidx];
-      nxtab = gotit->otable;
-      break;
-    case t_sse_ter:
-      idx = gotit->tabidx;      
-      gotit = &sseMapTer[idx][sseidx];
-      nxtab = gotit->otable;
-      break;
-    case t_grp: {
-      idx = gotit->tabidx;
-      unsigned int reg  = (addr[0] >> 3) & 7;
-      if(idx < Grp12)
-        switch(idx) {
-        case Grp2:
-        case Grp11:
-          /* leave table unchanged because operands are in not 
-             defined in group map, unless this is an invalid index
-             into the group, in which case we need the instruction
-             to reflect its illegal status */
-          if(groupMap[idx][reg].id == e_No_Entry)
-            gotit = &groupMap[idx][reg];
-          nxtab = groupMap[idx][reg].otable;
-          assert(nxtab==t_done || nxtab==t_ill);
-          break;
-        default:
-          gotit = &groupMap[idx][reg];
-          nxtab = gotit->otable;
+    /* Adjust the instruction size for the prefixes */
+    instruct.size = pref.getCount();
+
+    /* Skip the prefixes so that we don't decode them again */
+    addr += instruct.size;
+
+    /* Is there a VEX prefix for this instruction? */
+    if(pref.vex_present)
+    {
+        /* Grab the opcode for the index */
+        idx = addr[0];
+
+        /* Move past the opcode for this instruction */
+        instruct.size += 1;
+        addr += 1;
+
+        switch(pref.vex_type)
+        {
+            case VEX_TYPE_VEX2:
+                /* This is a VEX2 prefixed instruction -- start in the twoByteMap */
+                gotit = &twoByteMap[idx];
+                sseidx = vex3_simdop_convert[0][pref.vex_pp];
+                break;
+
+            case VEX_TYPE_VEX3:
+            case VEX_TYPE_EVEX:
+                /* Make sure we start in the proper table */
+                switch(pref.vex_m_mmmm)
+                {
+                    case 1:
+                        gotit = &twoByteMap[idx];
+                        sseidx = vex3_simdop_convert[0][pref.vex_pp];
+                        break;
+                    case 2: 
+                        gotit = &threeByteMap[idx];
+                        sseidx = vex3_simdop_convert[1][pref.vex_pp];
+                        break;
+                    case 3:
+                        gotit = &threeByteMap2[idx];
+                        sseidx = vex3_simdop_convert[2][pref.vex_pp];
+                        break;
+                    default:
+                        instruct.legacy_type = ILLEGAL;
+			            instruct.entry = NULL;
+                        return instruct;
+                }
+
+                if(sseidx < 0)
+                {
+                    /* This instruction can't be expressed with an sseidx */
+                    instruct.legacy_type = ILLEGAL;
+			        instruct.entry = NULL;
+                    return instruct;
+                }
+                break;
+            default:
+                assert(!"Invalid type of VEX instruction!\n");
         }
-      else {
-        unsigned int mod = addr[0] >> 6;
-        gotit = &groupMap2[idx-Grp12][mod==3][reg];
+      
+        nxtab = gotit->otable;
+    } else {
+        /* Non VEX instruction */
+        table = t_oneB;
+
+        /* Adjust the idx if we haven't already */
+        if(idx == 0) 
+        {
+	        /* consume opcode */
+	        idx = addr[0];
+	        instruct.size += 1;
+	        addr += 1;
+        }
+
+        gotit = &oneByteMap[idx];
         nxtab = gotit->otable;
-      }
-      break;
     }
-    case t_grpsse:
-      sseidx >>= 1;
-      idx = gotit->tabidx;
-      gotit = &ssegrpMap[idx][sseidx];
-      nxtab = gotit->otable;
-      break;
-    case t_coprocEsc:
-      {
-        instruct.legacy_type = 0;
-        unsigned int reg  = (addr[0] >> 3) & 7;
-        unsigned int mod = addr[0] >> 6;
-        gotit = &fpuMap[gotit->tabidx][mod==3][reg];
-        ia32_decode_FP(idx, pref, addr, instruct, gotit, instruct.mac);
-        return instruct;
-      }
-    case t_3dnow:
-      // 3D now opcodes are given as suffix: ModRM [SIB] [displacement] opcode
-      // Right now we don't care what the actual opcode is, so there's no table
-      instruct.size += 1;
-      nxtab = t_done;
-      break;
-    case t_ill:
-      instruct.legacy_type = ILLEGAL;
-      instruct.entry = gotit;
-      return instruct;
-    default:
-      assert(!"wrong table");
+
+    if(capa & IA32_DECODE_CONDITION) 
+    {
+        assert(instruct.cond != NULL);
+        condbits = idx & 0x0F;
     }
-  }
 
-  assert(gotit != NULL);
-  instruct.legacy_type = gotit->legacyType;
+    /* Find the correct entry in the tables */
+    while(nxtab != t_done) 
+    {
+        table = nxtab;
+        switch(table) 
+        {
+            case t_twoB:
+                idx = addr[0];
+                gotit = &twoByteMap[idx];
+                nxtab = gotit->otable;
+                instruct.size += 1;
+                addr += 1;
+                if(capa & IA32_DECODE_CONDITION)
+                    condbits = idx & 0x0F;
+                break;
+
+            case t_threeB:
+                idx = addr[0];
+                gotit = &threeByteMap[idx];
+                nxtab = gotit->otable;
+                instruct.size += 1;
+                addr += 1;
+                if(capa & IA32_DECODE_CONDITION)
+    	            condbits = idx & 0x0F;
+                break;
+
+            case t_threeB2:
+                idx = addr[0];
+                gotit = &threeByteMap2[idx];
+                nxtab = gotit->otable;
+                instruct.size += 1;
+                addr += 1;
+                if(capa & IA32_DECODE_CONDITION)
+    	            condbits = idx & 0x0F;
+                break;
+
+            case t_prefixedSSE:
+                if(addr[0] != 0x0F)
+                {
+                    // all valid SSE insns will have 0x0F as their first byte after prefix
+                    instruct.size += 1;
+                    addr += 1;
+                    instruct.entry = &invalid;
+                    return instruct;
+                }
+
+                sseidx = gotit->tabidx;
+                idx = addr[1];
+                gotit = &twoByteMap[idx];
+                nxtab = gotit->otable;
+                instruct.size += 2;
+                addr += 2;
+                break;
+
+            case t_sse:
+                idx = gotit->tabidx;
+                gotit = &sseMap[idx][sseidx];
+                nxtab = gotit->otable;
+
+#ifdef VEX_DEBUG
+                fprintf(stderr, "SSE MAP   idx: %d 0x%x  sseidx: %d 0x%x\n", idx, idx, sseidx, sseidx);
+                fprintf(stderr, "HAS VEX? %s\n", pref.vex_present ? "YES" : "NO");
+                fprintf(stderr, "NEXT TAB == SSE_MULT? %s\n", nxtab == t_sse_mult ? "YES" : "NO");
+                fprintf(stderr, "NEXT TAB == DONE? %s\n", nxtab == t_done ? "YES" : "NO");
+#endif
 
-  // addr points after the opcode, and the size has been adjusted accordingly
-  if (instruct.loc) instruct.loc->opcode_size = instruct.size - pref.getCount();
-  if (instruct.loc) instruct.loc->opcode_position = pref.getCount();
+                /* If there is no vex prefix, we're done */
+                if(!pref.vex_present)
+                    nxtab = t_done;
+                break;
 
-  // make adjustments for instruction redefined in 64-bit mode
-  if (mode_64)
-    ia32_translate_for_64(&gotit);
+            case t_sse_mult:
+                idx = gotit->tabidx;
+                gotit = &sseMapMult[idx][pref.vex_sse_mult];
+                nxtab = gotit->otable;
 
-  ia32_decode_operands(pref, *gotit, addr, instruct, instruct.mac); // all but FP
+#ifdef VEX_DEBUG
+                fprintf(stderr, "SSE MULT MAP   idx: %d  sseidx: %d sse_mult: %d\n", idx, sseidx, pref.vex_sse_mult);
+                fprintf(stderr, "NEXT TAB == DONE? %s\n", nxtab == t_done ? "YES" : "NO");
+                fprintf(stderr, "NEXT TAB == VEXW? %s\n", nxtab == t_vexw ? "YES" : "NO");
+#endif
 
-  if(capa & IA32_DECODE_MEMACCESS) {
-    int sema = gotit->opsema & ((1<<FPOS)-1);
-    int hack = gotit->opsema >> FPOS;
-    switch(sema) {
-    case sNONE:
-      break;
-    case s1R:
-      switch(hack) {
-      case fPREFETCHNT:
-        instruct.mac[0].prefetch = true;
-        instruct.mac[0].prefetchlvl = 0;
-        break;
-      case fPREFETCHT0:
-        instruct.mac[0].prefetch = true;
-        instruct.mac[0].prefetchlvl = 1;
-        break;
-      case fPREFETCHT1:
-        instruct.mac[0].prefetch = true;
-        instruct.mac[0].prefetchlvl = 2;
-        break;
-      case fPREFETCHT2:
-        instruct.mac[0].prefetch = true;
-        instruct.mac[0].prefetchlvl = 3;
-        break;
-      case fPREFETCHAMDE:
-        instruct.mac[0].prefetch = true;
-        instruct.mac[0].prefetchstt = 0;
-        break;
-      case fPREFETCHAMDW:
-        instruct.mac[0].prefetch = true;
-        instruct.mac[0].prefetchstt = 1;
-        break;
-      default:
-        instruct.mac[0].read = true;
-      }
-      break;
-    case s1W:
-      instruct.mac[0].write = true;
-      break;
-    case s1RW:
-      instruct.mac[0].read = true;
-      instruct.mac[0].write = true;
-      instruct.mac[0].nt = hack == fNT;
-      break;
-    case s1R2R:
-      instruct.mac[0].read = true;
-      instruct.mac[1].read = true;
-      break;
-    case s1W2R:
-      instruct.mac[0].write = true;
-      instruct.mac[0].nt = hack == fNT; // all NTs are s1W2R
-      instruct.mac[1].read = true;
-      break;
-    case s1RW2R:
-      instruct.mac[0].read = true;
-      instruct.mac[0].write = true;
-      instruct.mac[1].read = true;
-      break;
-    case s1RW2RW:
-      instruct.mac[0].read = true;
-      instruct.mac[0].write = true;
-      instruct.mac[1].read = true;
-      instruct.mac[1].write = true;
-      break;
-    case s1W2R3R:
-      instruct.mac[0].write = true;
-      instruct.mac[1].read = true;
-      instruct.mac[2].read = true;
-      break;
-    case s1W2W3R:
-      instruct.mac[0].write = true;
-      instruct.mac[1].write = true;
-      instruct.mac[2].read = true;
-      break;
-    case s1W2RW3R:
-      instruct.mac[0].write = true;
-      instruct.mac[1].read = true;
-      instruct.mac[1].write = true;
-      instruct.mac[2].read = true;
-      break;
-    case s1W2R3RW:
-      instruct.mac[0].write = true;
-      instruct.mac[1].read = true;
-      instruct.mac[2].read = true;
-      instruct.mac[2].write = true;
-      break;
-    case s1RW2R3R:
-      instruct.mac[0].read = true;
-      instruct.mac[0].write = true;
-      instruct.mac[1].read = true;
-      instruct.mac[2].read = true;
-      break;
-    case s1RW2RW3R:
-      instruct.mac[0].write = true;
-      instruct.mac[0].read = true;
-      instruct.mac[1].read = true;
-      instruct.mac[1].write = true;
-      instruct.mac[2].read = true;
-      break;
+                break;
+
+            case t_sse_bis:
+                idx = gotit->tabidx;
+                gotit = &sseMapBis[idx][sseidx];
+                nxtab = gotit->otable;
+
+#ifdef VEX_DEBUG
+                fprintf(stderr, "SSEB MAP  idx: %d  sseidx: %d\n", idx, sseidx);
+#endif
+
+                /* If there is no vex prefix, we're done */
+                if(!pref.vex_present)
+                    nxtab = t_done;
+                break;
+
+            case t_sse_bis_mult:
+                idx = gotit->tabidx;
+                gotit = &sseMapBisMult[idx][pref.vex_sse_mult];
+                nxtab = gotit->otable;
+
+#ifdef VEX_DEBUG
+                fprintf(stderr, "SSEB MULT idx: %d  sseMul: %d\n", idx, pref.vex_sse_mult);
+#endif
+                break;
+            case t_sse_ter:
+                idx = gotit->tabidx;      
+                gotit = &sseMapTer[idx][sseidx];
+                nxtab = gotit->otable;
+        
+#ifdef VEX_DEBUG
+                fprintf(stderr, "SSET MAP  idx: %d  sseidx: %d\n", idx, sseidx);
+#endif
+
+                /* If there is no vex prefix, we're done */
+                if(!pref.vex_present)
+                    nxtab = t_done;
+                break;
+
+            case t_sse_ter_mult:
+                idx = gotit->tabidx;
+                gotit = &sseMapTerMult[idx][pref.vex_sse_mult];
+                nxtab = gotit->otable;
+
+#ifdef VEX_DEBUG
+                fprintf(stderr, "SSET MULT idx: %d  sseMul: %d\n", idx, pref.vex_sse_mult);
+#endif
+                break;
+
+            case t_grp: 
+                {
+                    idx = gotit->tabidx;
+                    unsigned int reg  = (addr[0] >> 3) & 7;
+                    if(idx < Grp12)
+                        switch(idx) 
+                        {
+                            case Grp2:
+                            case Grp11:
+                                /* leave table unchanged because operands are in not 
+                                    defined in group map, unless this is an invalid index
+                                    into the group, in which case we need the instruction
+                                    to reflect its illegal status */
+                                if(groupMap[idx][reg].id == e_No_Entry)
+                                gotit = &groupMap[idx][reg];
+                                nxtab = groupMap[idx][reg].otable;
+                                assert(nxtab==t_done || nxtab==t_ill);
+                                break;
+                            default:
+                                gotit = &groupMap[idx][reg];
+                                nxtab = gotit->otable;
+                        }
+                    else {
+                        unsigned int mod = addr[0] >> 6;
+                        gotit = &groupMap2[idx-Grp12][mod==3][reg];
+                        nxtab = gotit->otable;
+                    }
+                    break;
+                }
+
+            case t_grpsse:
+                sseidx >>= 1;
+                idx = gotit->tabidx;
+                gotit = &ssegrpMap[idx][sseidx];
+                nxtab = gotit->otable;
+                break;
+
+            case t_coprocEsc:
+                {
+                    instruct.legacy_type = 0;
+                    unsigned int reg  = (addr[0] >> 3) & 7;
+                    unsigned int mod = addr[0] >> 6;
+                    gotit = &fpuMap[gotit->tabidx][mod==3][reg];
+                    ia32_decode_FP(idx, pref, addr, instruct, gotit, instruct.mac);
+                    return instruct;
+                }
+
+            case t_3dnow:
+                // 3D now opcodes are given as suffix: ModRM [SIB] [displacement] opcode
+                // Right now we don't care what the actual opcode is, so there's no table
+                instruct.size += 1;
+                nxtab = t_done;
+                break;
+
+            case t_vexl:
+                 /* This MUST have a vex prefix */
+                if(!pref.vex_present)
+                {   
+#ifdef VEX_PEDANTIC
+                    assert(!"VEXW can only be used by vex prefixed instructions!\n");
+#endif
+                    instruct.legacy_type = ILLEGAL;
+                    instruct.entry = gotit;
+                    return instruct;
+                }
+
+                /* Whats the index into the vex2 table? */
+                idx = gotit->tabidx;
+                /* Set the current entry */
+                gotit = &vex2Map[idx][pref.vex_ll];
+                /* Set the next table - this is almost always t_done */
+                nxtab = gotit->otable;
+                break;
+
+            case t_vexw:
+                /* This MUST have a vex prefix and must NOT be VEX2 */
+                if(!pref.vex_present || pref.vex_type == VEX_TYPE_VEX2)
+                {
+#ifdef VEX_PEDANTIC
+                    assert(!"VEXW can only be used by vex prefixed instructions!\n");
+#endif
+                    instruct.legacy_type = ILLEGAL;
+                    instruct.entry = gotit;
+                    return instruct;
+                }
+
+                /* Whats the index into the vexWMap table? */
+                idx = gotit->tabidx;
+
+                /* Sanity check: does this index make sense? */
+                if(idx > VEXW_MAX)
+                {
+#ifdef VEX_PEDANTIC
+                    assert(!"VEXW index out of bounds!\n");
+#endif
+                    instruct.legacy_type = ILLEGAL;
+                    instruct.entry = gotit;
+                    return instruct;
+                }
+
+#ifdef VEX_DEBUG
+                fprintf(stderr, "VEXW ENTRY:      VEXW%x\n", idx);
+                fprintf(stderr, "VEXW MAX ENTRY:  VEXW%lx\n", (sizeof(vexWMap) / sizeof(vexWMap[0])) - 1);
+#endif
+
+                /* Set the current entry */
+                gotit = &vexWMap[idx][pref.vex_w];
+                /* Set the next table - this is almost always t_done */
+                nxtab = gotit->otable;
+
+                if(nxtab != t_done)
+                {
+#ifdef VEX_PEDANTIC
+                    assert(!"VEXW should always be the final table.\n");
+#endif
+
+                    instruct.legacy_type = ILLEGAL;
+                    instruct.entry = gotit;
+                    return instruct;
+                }
+                break;
+
+            case t_ill:
+                /* Illegal or unknown instruction */
+                instruct.legacy_type = ILLEGAL;
+                instruct.entry = gotit;
+                return instruct;
+
+            default:
+                assert(!"wrong table");
+        }
     }
 
-    switch(pref.getPrefix(0)) {
-    case PREFIX_REPNZ:
-      switch(hack) {
-      case fSCAS:
-        instruct.mac[1].sizehack = shREPNESCAS;
-        break;
-      case fCMPS:
-        instruct.mac[0].sizehack = shREPNECMPS;
-        instruct.mac[1].sizehack = shREPNECMPS;
-        break;
-      default:
-	  break;
-      }
-      break;
-    case PREFIX_REP:
-      switch(hack) {
-      case fSCAS:
-        instruct.mac[1].sizehack = shREPESCAS;
-        break;
-      case fCMPS:
-        instruct.mac[0].sizehack = shREPECMPS;
-        instruct.mac[1].sizehack = shREPECMPS;
-        break;
-      case fREP:
-        instruct.mac[0].sizehack = shREP;
-        instruct.mac[1].sizehack = shREP;
-        break;
-      default:
-	break;
-      }
-      break;
-    case 0:
-    case PREFIX_LOCK:
-      break;
-    default:
-      break;
+    /* We should have a valid decoding or we should have returned by now */
+    assert(gotit != NULL);
+    instruct.legacy_type = gotit->legacyType;
+
+    /* Addr points after the opcode, and the size has been adjusted accordingly */
+    if(instruct.loc) 
+    {
+        instruct.loc->opcode_size = instruct.size - pref.getCount();
+        instruct.loc->opcode_position = pref.getCount();
+    }
+
+    /* make adjustments for instruction redefined in 64-bit mode */
+    if(mode_64)
+    {
+        ia32_translate_for_64(&gotit);
     }
 
+    /* Do the operand decoding */
+    ia32_decode_operands(pref, *gotit, addr, instruct, instruct.mac);
+
+    /* Decode the memory accesses if requested */
+    if(capa & IA32_DECODE_MEMACCESS) 
+    {
+        int sema = gotit->opsema & ((1<<FPOS)-1);
+        int hack = gotit->opsema >> FPOS;
+
+        switch(sema) 
+        {
+            case sNONE:
+                break;
+            case s1R:
+                switch(hack) 
+                {
+                    case fPREFETCHNT:
+                        instruct.mac[0].prefetch = true;
+                        instruct.mac[0].prefetchlvl = 0;
+                        break;
+                    case fPREFETCHT0:
+                        instruct.mac[0].prefetch = true;
+                        instruct.mac[0].prefetchlvl = 1;
+                        break;
+                    case fPREFETCHT1:
+                        instruct.mac[0].prefetch = true;
+                        instruct.mac[0].prefetchlvl = 2;
+                        break;
+                    case fPREFETCHT2:
+                        instruct.mac[0].prefetch = true;
+                        instruct.mac[0].prefetchlvl = 3;
+                        break;
+                    case fPREFETCHAMDE:
+                        instruct.mac[0].prefetch = true;
+                        instruct.mac[0].prefetchstt = 0;
+                        break;
+                    case fPREFETCHAMDW:
+                        instruct.mac[0].prefetch = true;
+                        instruct.mac[0].prefetchstt = 1;
+                        break;
+                    default:
+                        instruct.mac[0].read = true;
+                }
+                break;
+            case s1W:
+                instruct.mac[0].write = true;
+                break;
+            case s1RW:
+                instruct.mac[0].read = true;
+                instruct.mac[0].write = true;
+                instruct.mac[0].nt = hack == fNT;
+                break;
+            case s1R2R:
+                instruct.mac[0].read = true;
+                instruct.mac[1].read = true;
+                break;
+            case s1W2R:
+                instruct.mac[0].write = true;
+                instruct.mac[0].nt = hack == fNT; // all NTs are s1W2R
+                instruct.mac[1].read = true;
+                break;
+            case s1RW2R:
+                instruct.mac[0].read = true;
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                break;
+            case s1RW2RW:
+                instruct.mac[0].read = true;
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[1].write = true;
+                break;
+            case s1W2R3R:
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1W2W3R:
+                instruct.mac[0].write = true;
+                instruct.mac[1].write = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1W2RW3R:
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[1].write = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1W2R3RW:
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[2].read = true;
+                instruct.mac[2].write = true;
+                break;
+            case s1RW2R3R:
+                instruct.mac[0].read = true;
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1RW2RW3R:
+                instruct.mac[0].write = true;
+                instruct.mac[0].read = true;
+                instruct.mac[1].read = true;
+                instruct.mac[1].write = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1RW2R3R4R:
+                instruct.mac[0].write = true;
+                instruct.mac[0].read = true;
+                instruct.mac[1].read = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1W2R3R4R:
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[2].read = true;
+                break;
+            case s1RW2R3RW:
+                instruct.mac[0].read = true;
+                instruct.mac[0].write = true;
+                instruct.mac[1].read = true;
+                instruct.mac[2].read = true; 
+                instruct.mac[2].write = true; 
+                break;
+        }
+
+        switch(pref.getPrefix(0)) 
+        {
+            case PREFIX_REPNZ:
+                switch(hack) 
+                {
+                    case fSCAS:
+                        instruct.mac[1].sizehack = shREPNESCAS;
+                        break;
+                    case fCMPS:
+                        instruct.mac[0].sizehack = shREPNECMPS;
+                        instruct.mac[1].sizehack = shREPNECMPS;
+                        break;
+                    default:
+	                    break;
+                }
+                break;
+            case PREFIX_REP:
+                switch(hack) 
+                {
+                    case fSCAS:
+                        instruct.mac[1].sizehack = shREPESCAS;
+                        break;
+                    case fCMPS:
+                        instruct.mac[0].sizehack = shREPECMPS;
+                        instruct.mac[1].sizehack = shREPECMPS;
+                        break;
+                    case fREP:
+                        instruct.mac[0].sizehack = shREP;
+                        instruct.mac[1].sizehack = shREP;
+                        break;
+                    default:
+	                    break;
+                }
+                break;
+            case 0:
+            case PREFIX_LOCK:
+                break;
+            default:
+                break;
+        }
+
 #if 0
     // debug output for memory access decoding
     for (int i = 0; i < 3; i++) {
@@ -4301,39 +8486,43 @@ ia32_instruction& ia32_decode(unsigned int capa, const unsigned char* addr, ia32
     }
 #endif
 
-  }
+    }
 
+    if(capa & IA32_DECODE_CONDITION) 
+    {
+        int hack = gotit->opsema >> FPOS;
+        if(hack == fCOND)
+            instruct.cond->set(condbits);
+    }
 
-  if(capa & IA32_DECODE_CONDITION) {
-    int hack = gotit->opsema >> FPOS;
-    if(hack == fCOND)
-      instruct.cond->set(condbits);
-  }
+    /* flip id of opcodes overloaded on operand size prefix */
+    int operSzAttr = getOperSz(pref);
+    if (operSzAttr == 1) 
+    {
+        entryID newID = gotit->id;
+
+        switch (gotit->id) 
+        {
+            case e_cwde: newID = e_cbw; break;
+            case e_cdq: newID = e_cwd; break;
+            case e_insd: newID = e_insw; break;
+            case e_lodsd: newID = e_lodsw; break;
+            case e_movsd: newID = e_movsw; break;
+            case e_outsd: newID = e_outsw; break;
+            case e_popad: newID = e_popa; break;
+            case e_popfd: newID = e_popf; break;
+            case e_pushad: newID = e_pusha; break;
+            case e_pushfd: newID = e_pushf; break;
+            case e_scasd: newID = e_scasw; break;
+            case e_stosd: newID = e_stosw; break;
+            default: break;
+        }
 
-  // flip id of opcodes overloaded on operand size prefix
-  int operSzAttr = getOperSz(pref);
-  if (1 == operSzAttr) {
-    entryID newID = gotit->id;
-    switch (gotit->id) {
-    case e_cwde: newID = e_cbw; break;
-    case e_cdq: newID = e_cwd; break;
-    case e_insd: newID = e_insw; break;
-    case e_lodsd: newID = e_lodsw; break;
-    case e_movsd: newID = e_movsw; break;
-    case e_outsd: newID = e_outsw; break;
-    case e_popad: newID = e_popa; break;
-    case e_popfd: newID = e_popf; break;
-    case e_pushad: newID = e_pusha; break;
-    case e_pushfd: newID = e_pushf; break;
-    case e_scasd: newID = e_scasw; break;
-    case e_stosd: newID = e_stosw; break;
-    default: break;
+        gotit->id = newID;
     }
-    gotit->id = newID;
-  }
 
-  instruct.entry = gotit;
-  return instruct;
+    instruct.entry = gotit;
+    return instruct;
 }
 
 ia32_instruction& ia32_decode_FP(unsigned int opcode, const ia32_prefixes& pref,
@@ -4902,198 +9091,253 @@ unsigned int ia32_decode_operands (const ia32_prefixes& pref,
                                    ia32_instruction& instruct,
                                    ia32_memacc *mac)
 {
-  ia32_locations *loc = instruct.loc;
-  if (loc) loc->imm_cnt = 0;
-  unsigned int nib = 0 /* # of bytes in instruction */;
+    unsigned int nib = 0; /* # of bytes in instruction */
+    ia32_locations *loc = instruct.loc;
 
-  int addrSzAttr = (pref.getPrefix(3) == PREFIX_SZADDR ? 1 : 2);
+    if(loc) 
+        loc->imm_cnt = 0;
 
-  if (mode_64)
-    addrSzAttr *= 2;
-
-  int operSzAttr = getOperSz(pref);
-
-  if(gotit.hasModRM)
-    nib += byteSzB;
-
-  for(unsigned int i=0; i<3; ++i) {
-    const ia32_operand& op = gotit.operands[i];
-    if(op.admet) {
-      // At most two operands can be memory, the third is register or immediate
-      //assert(i<2 || op.admet == am_reg || op.admet == am_I);
-      switch(op.admet) {
-      case am_A: /* address = segment + offset (word or dword or qword) */
-		nib += wordSzB; // segment
-        nib += wordSzB * addrSzAttr;  // + offset (1 or 2 words, depending on prefix)
-	break;
-      case am_O: /* operand offset */
-        nib += wordSzB * addrSzAttr;
-        if(mac) {
-          int offset = 0;
-          switch(addrSzAttr) {
-          case 1: // 16-bit offset
-              offset = *((const short int*)addr);
-              break;
-          case 2: // 32-bit offset
-              offset = *((const int*)addr);
-              break;
-          case 4: // 64-bit
-	      offset = *((const long*)addr);
-              break;
-          default:
-              assert(0);
-              break;
-          }
-          mac[i].set(-1, offset, addrSzAttr);
-          mac[i].size = type2size(op.optype, operSzAttr);
+    int addrSzAttr = (pref.getPrefix(3) == PREFIX_SZADDR ? 1 : 2);
+
+    if(mode_64)
+        addrSzAttr *= 2;
+
+    int operSzAttr = getOperSz(pref);
+
+    if(gotit.hasModRM)
+        nib += byteSzB;
+
+    for(int i = 0; i < 3; i++)
+    {
+        const ia32_operand& op = gotit.operands[i];
+
+        if(op.admet) 
+        {
+            // At most two operands can be memory, the third is register or immediate
+            //assert(i<2 || op.admet == am_reg || op.admet == am_I);
+            switch(op.admet) 
+            {
+                case am_A: /* address = segment + offset (word or dword or qword) */
+                    nib += wordSzB; // segment
+                    nib += wordSzB * addrSzAttr;  // + offset (1 or 2 words, depending on prefix)
+                    break;
+                case am_O: /* operand offset */
+                    nib += wordSzB * addrSzAttr;
+                    if(mac) 
+                    {
+                        int offset = 0;
+                        switch(addrSzAttr) 
+                        {
+                            case 1: // 16-bit offset
+                                offset = *((const short int*)addr);
+                                break;
+                            case 2: // 32-bit offset
+                                offset = *((const int*)addr);
+                                break;
+                            case 4: // 64-bit
+                                offset = *((const long*)addr);
+                                break;
+                            default:
+                                assert(0);
+                                break;
+                        }
+
+                        mac[i].set(-1, offset, addrSzAttr);
+                        mac[i].size = type2size(op.optype, operSzAttr);
+                    }
+                    break;
+                case am_tworeghack:
+                case am_ImplImm:
+                case am_B:   /* General register selected by VEX.vvvv*/
+                case am_C:   /* control register */
+                case am_D:   /* debug register */
+                case am_F:   /* flags register */
+                case am_G:   /* general purpose register, selecteb by reg field */
+                case am_P:   /* MMX register */
+                case am_R:   /* general purpose register, selected by r/m field */
+                case am_S:   /* segment register */
+                case am_T:   /* test register */
+                case am_XV:  /* XMM register (From reg of ModR/M) */
+                case am_XU:  /* XMM register (from R/M of ModR/M) */
+                case am_XH:  /* XMM register (vvvv of prefix) */
+                case am_YV:  /* XMM or YMM register (From reg of ModR/M) */
+                case am_YU:  /* XMM or YMM register (from R/M of ModR/M) */
+                case am_YH:  /* XMM or YMM register (vvvv of prefix) */
+                case am_V:   /* XMM, YMM or ZMM register (From reg of ModR/M) */
+                case am_U:   /* XMM, YMM or ZMM register (from R/M of ModR/M) */
+                case am_H:   /* XMM, YMM or ZMM register (vvvv of prefix) */
+                case am_reg: /* register implicitely encoded in opcode */ 
+                case am_allgprs:
+                    break;
+                case am_E:  /* register or memory location, so decoding needed */
+                case am_M:  /* memory operand, decoding needed; size includes modRM byte */
+                case am_Q:  /* MMX register or memory location */
+                case am_RM: /* register or memory location, so decoding needed */
+                case am_UM: /* XMM register or memory location */
+                case am_XW: /* XMM register or memory location */
+                case am_YW: /* XMM or YMM register or memory location */
+                case am_W:  /* XMM, YMM or ZMM register or memory location */
+                    if (loc) 
+                    {
+                        loc->modrm_position = loc->opcode_size + loc->opcode_position;
+                        loc->modrm_operand = i;
+                    }
+
+                    if(mac) 
+                    {
+                        nib += ia32_decode_modrm(addrSzAttr, addr, &mac[i], &pref, loc);
+                        mac[i].size = type2size(op.optype, operSzAttr);
+
+                        if (loc) 
+                            loc->address_size = mac[i].size;
+                    } else {
+                        nib += ia32_decode_modrm(addrSzAttr, addr, NULL, &pref, loc);
+                    }
+                
+                    // also need to check for AMD64 rip-relative data addressing
+                    // occurs when mod == 0 and r/m == 101
+                    if (mode_64 && (addr[0] & 0xc7) == 0x05)
+                        instruct.rip_relative_data = true;
+
+                    break;
+                case am_I: /* immediate data */
+                case am_J: /* instruction pointer offset */
+                    { 
+                        int imm_size = type2size(op.optype, operSzAttr);
+                        if (loc) 
+                        {
+                            // sanity
+                            if(loc->imm_cnt > 1) 
+                            {
+                                fprintf(stderr,"Oops, more than two immediate operands\n");
+                            } else {
+                                loc->imm_position[loc->imm_cnt] = 
+                                nib + loc->opcode_position + loc->opcode_size;
+                                loc->imm_size[loc->imm_cnt] = imm_size;
+                                ++loc->imm_cnt;
+                            }
+                        }
+                        nib += imm_size;
+                        break;
+                    }
+                    /* TODO: rep prefixes, deal with them here? */
+
+                case am_X: /* memory at DS:(E)SI*/
+                    if(mac)
+                        mac[i].setXY(mESI, type2size(op.optype, operSzAttr), addrSzAttr);
+                    break;
+                case am_Y: /* memory at ES:(E)DI*/
+                    if(mac)
+                        mac[i].setXY(mEDI, type2size(op.optype, operSzAttr), addrSzAttr);
+                    break;
+                case am_stackH: /* stack push */
+                case am_stackP: /* stack pop */
+                    assert(0 && "Wrong table!");
+                    break;
+                default:
+#ifdef VEX_DEBUG
+                    printf("mode: %d  %x\n", op.admet, op.admet);
+#endif
+                    assert(0 && "Bad addressing mode!");
+            }
+        } else {    
+            break;
         }
-        break;
-      case am_C:   /* control register */
-      case am_D:   /* debug register */
-      case am_F:   /* flags register */
-      case am_G:   /* general purpose register, selecteb by reg field */
-      case am_P:   /* MMX register */
-      case am_R:   /* general purpose register, selected by r/m field */
-      case am_S:   /* segment register */
-      case am_T:   /* test register */
-      case am_V:   /* XMM register */
-      case am_reg: /* register implicitely encoded in opcode */
-      case am_allgprs:
-        break;
-      case am_E: /* register or memory location, so decoding needed */
-      case am_M: /* memory operand, decoding needed; size includes modRM byte */
-      case am_Q: /* MMX register or memory location */
-      case am_RM:/* register or memory location, so decoding needed */
-      case am_UM:/* XMM register or memory location */
-      case am_W: /* XMM register or memory location */
-         if (loc) {
-            loc->modrm_position = loc->opcode_size + loc->opcode_position;
-            loc->modrm_operand = i;
-         }
-         if(mac) {
-            nib += ia32_decode_modrm(addrSzAttr, addr, &mac[i], &pref, loc);
-            mac[i].size = type2size(op.optype, operSzAttr);
-            if (loc) loc->address_size = mac[i].size;
-         }
-         else
-            nib += ia32_decode_modrm(addrSzAttr, addr, NULL, &pref, loc);
-         
-         // also need to check for AMD64 rip-relative data addressing
-         // occurs when mod == 0 and r/m == 101
-         if (mode_64)
-            if ((addr[0] & 0xc7) == 0x05)
-               instruct.rip_relative_data = true;
-         
-         break;
-      case am_I: /* immediate data */
-      case am_J: { /* instruction pointer offset */
-         int imm_size = type2size(op.optype, operSzAttr);
-         if (loc) {
-            // sanity
-            if(loc->imm_cnt > 1) {
+    }
+            
+    /* Are there 4 operands? */
+    if((gotit.opsema &  0xffff) >= s4OP)
+    {
+        /* This last one is always Ib */
+        int imm_size = type2size(op_b, operSzAttr);
+
+        if (loc) 
+        {
+            if(loc->imm_cnt > 1) 
+            {
                 fprintf(stderr,"Oops, more than two immediate operands\n");
             } else {
-                loc->imm_position[loc->imm_cnt] = 
-                    nib + loc->opcode_position + loc->opcode_size;
+                loc->imm_position[loc->imm_cnt] = nib + loc->opcode_position + loc->opcode_size;
                 loc->imm_size[loc->imm_cnt] = imm_size;
                 ++loc->imm_cnt;
             }
-         }
-         nib += imm_size;
-         break;
-      }
-      /* TODO: rep prefixes, deal with them here? */
-      case am_X: /* memory at DS:(E)SI*/
-        if(mac)
-          mac[i].setXY(mESI, type2size(op.optype, operSzAttr), addrSzAttr);
-        break;
-      case am_Y: /* memory at ES:(E)DI*/
-        if(mac)
-          mac[i].setXY(mEDI, type2size(op.optype, operSzAttr), addrSzAttr);
-        break;
-      case am_stackH: /* stack push */
-      case am_stackP: /* stack pop */
-	assert(0 && "Wrong table!");
-        break;
-      case am_tworeghack:
-      case am_ImplImm:
-	// Don't do nuthin'
-	break;
-      default:
-        assert(0 && "Bad addressing mode!");
-      }
+        }
+    
+        nib += imm_size;
     }
-    else
-      break;
-  }
-  if((gotit.id == e_push) && mac)
-  {
-    // assuming 32-bit (64-bit for AMD64) stack segment
-    // AMD64: push defaults to 64-bit operand size
-    if (mode_64 && operSzAttr == 2)
-      operSzAttr = 4;
-    mac[1].set(mESP, -2 * operSzAttr, addrSzAttr);
-    if(gotit.operands[0].admet == am_reg)
+
+    if((gotit.id == e_push) && mac)
     {
-        mac[1].size = type2size(op_v, operSzAttr);
+        // assuming 32-bit (64-bit for AMD64) stack segment
+        // AMD64: push defaults to 64-bit operand size
+        if (mode_64 && operSzAttr == 2)
+            operSzAttr = 4;
+
+        mac[1].set(mESP, -2 * operSzAttr, addrSzAttr);
+
+        if(gotit.operands[0].admet == am_reg)
+        {
+            mac[1].size = type2size(op_v, operSzAttr);
+        } else {
+            mac[1].size = type2size(gotit.operands[0].optype, operSzAttr);
+        }
+
+        mac[1].write = true;
     }
-    else
+
+    if((gotit.id == e_pop) && mac)
     {
-        mac[1].size = type2size(gotit.operands[0].optype, operSzAttr);
+        // assuming 32-bit (64-bit for AMD64) stack segment
+        // AMD64: pop defaults to 64-bit operand size
+        if (mode_64 && operSzAttr == 2)
+            operSzAttr = 4;
+        mac[1].set(mESP, 0, addrSzAttr);
+        if(gotit.operands[0].admet == am_reg)
+        {
+            mac[1].size = type2size(op_v, operSzAttr);
+        } else {
+            mac[1].size = type2size(gotit.operands[0].optype, operSzAttr);
+        }
+        mac[1].read = true;
     }
-    mac[1].write = true;
-  }
-  if((gotit.id == e_pop) && mac)
-  {
-    // assuming 32-bit (64-bit for AMD64) stack segment
-    // AMD64: pop defaults to 64-bit operand size
-    if (mode_64 && operSzAttr == 2)
-      operSzAttr = 4;
-    mac[1].set(mESP, 0, addrSzAttr);
-    if(gotit.operands[0].admet == am_reg)
+
+    if((gotit.id == e_leave) && mac)
     {
-        mac[1].size = type2size(op_v, operSzAttr);
+        // assuming 32-bit (64-bit for AMD64) stack segment
+        // AMD64: push defaults to 64-bit operand size
+        if (mode_64 && operSzAttr == 2)
+            operSzAttr = 4;
+        mac[0].set(mESP, 0, addrSzAttr);
+        mac[0].size = type2size(op_v, operSzAttr);
+        mac[0].read = true;
     }
-    else
+
+    if((gotit.id == e_ret_near || gotit.id == e_ret_far) && mac)
     {
-        mac[1].size = type2size(gotit.operands[0].optype, operSzAttr);
+        mac[0].set(mESP, 0, addrSzAttr);
+        mac[0].size = type2size(op_v, addrSzAttr);
+        mac[0].read = true;
     }
-    mac[1].read = true;
-  }
-  if((gotit.id == e_leave) && mac)
-  {
-    // assuming 32-bit (64-bit for AMD64) stack segment
-    // AMD64: push defaults to 64-bit operand size
-    if (mode_64 && operSzAttr == 2)
-      operSzAttr = 4;
-    mac[0].set(mESP, 0, addrSzAttr);
-    mac[0].size = type2size(op_v, operSzAttr);
-    mac[0].read = true;
-  }
-  if((gotit.id == e_ret_near || gotit.id == e_ret_far) && mac)
-  {
-    mac[0].set(mESP, 0, addrSzAttr);
-    mac[0].size = type2size(op_v, addrSzAttr);
-    mac[0].read = true;
-  }
-  if((gotit.id == e_call) && mac)
-  {
-	int index = 0;
-	while((mac[index].regs[0] != -1) ||
-		  (mac[index].regs[1] != -1) ||
-		  (mac[index].scale != 0) ||
-		  (mac[index].imm != 0)) {
-		index++;
-		assert(index < 3);
-	}
-	mac[index].set(mESP, -2 * addrSzAttr, addrSzAttr);
-      mac[index].size = type2size(op_v, addrSzAttr);
-      mac[index].write = true;
-            
-  }
-  
-  instruct.size += nib;
-  return nib;
+
+    if((gotit.id == e_call) && mac)
+    {
+        int index = 0;
+        while((mac[index].regs[0] != -1) ||
+                (mac[index].regs[1] != -1) ||
+                (mac[index].scale != 0) ||
+                (mac[index].imm != 0)) 
+        {
+            index++;
+            assert(index < 3);
+        }
+
+        mac[index].set(mESP, -2 * addrSzAttr, addrSzAttr);
+        mac[index].size = type2size(op_v, addrSzAttr);
+        mac[index].write = true;
+    }
+
+    instruct.size += nib;
+    return nib;
 }
 
 
@@ -5172,91 +9416,244 @@ bool is_sse_opcode(unsigned char byte1, unsigned char byte2, unsigned char byte3
 bool ia32_decode_prefixes(const unsigned char* addr, ia32_prefixes& pref,
                           ia32_locations *loc)
 {
-  pref.count = 0;
-  pref.prfx[0] = pref.prfx[1] = pref.prfx[2] = pref.prfx[3] = pref.prfx[4] = 0;
-  pref.opcode_prefix = 0;
-  bool in_prefix = true;
-
-  while(in_prefix) {
-    switch(addr[0]) {
-    case PREFIX_REPNZ:
-    case PREFIX_REP:
-       if(mode_64 && REX_ISREX(addr[1]) && is_sse_opcode(addr[2],addr[3],addr[4])) {
-          ++pref.count;
-          pref.opcode_prefix = addr[0];
-          break;
-       }
-       else if(is_sse_opcode(addr[1],addr[2],addr[3])) {
-          ++pref.count;
-          pref.opcode_prefix = addr[0];
-          break;
-       }
-       
-    case PREFIX_LOCK:
-       ++pref.count;
-       pref.prfx[0] = addr[0];
-       break;
-    case PREFIX_SEGCS:
-    case PREFIX_SEGSS:
-    case PREFIX_SEGDS:
-    case PREFIX_SEGES:
-    case PREFIX_SEGFS:
-    case PREFIX_SEGGS:
-       ++pref.count;
-       pref.prfx[1] = addr[0];
-       break;
-    case PREFIX_SZOPER:
-       if(is_sse_opcode(addr[1],addr[2],addr[3])) {
-          pref.opcode_prefix = addr[0];
-          break;
-       }
-       if(mode_64 && REX_ISREX(addr[1]) && is_sse_opcode(addr[2],addr[3],addr[4])) {
-          ++pref.count;
-          pref.opcode_prefix = addr[0];
-          break;
-       }
-       ++pref.count;
-       pref.prfx[2] = addr[0];
-       break;
-    case PREFIX_SZADDR:
-       ++pref.count;
-       pref.prfx[3] = addr[0];
-       break;
-    default:
-	// If we hit a REX prefix, keep going and process other potential prefixes.
-	// The only one *used* is one in the last position, but others are ignored,
-	// not illegal.
-	if(mode_64)
-	{
-	    if(ia32_decode_rex(addr, pref, loc))
-	    {
-		if(loc) loc->num_prefixes = pref.count;
-		return true;
-	    }
-	    if(!REX_ISREX(addr[0])) 
-	    {
-		in_prefix = false;
-	    }
-	    else
-	    {
-		++pref.count;
-	    }
-	}
-	else
-	{
-	    in_prefix = false;
-	}
-    }
-    
-    ++addr;
-  }
+    /* Initilize the prefix */
+    pref.count = 0;
+    memset(pref.prfx, 0, 5);
+    pref.opcode_prefix = 0;
+    bool in_prefix = true;
+
+    pref.vex_present = false;
+    pref.vex_type = VEX_TYPE_NONE;
+    memset(pref.vex_prefix, 0, 5);
+    pref.vex_sse_mult = -1;
+    pref.vex_vvvv_reg = -1;
+    pref.vex_ll = -1;
+    pref.vex_pp = -1;
+    pref.vex_m_mmmm = -1;
+    pref.vex_w = -1;
+    pref.vex_V = 0;
+    pref.vex_r = 0;
+    pref.vex_R = 0;
+    pref.vex_x = 0;
+    pref.vex_b = 0;
+
+    while(in_prefix) 
+    {
+        switch(addr[0]) 
+        {
+            case PREFIX_REPNZ:
+            case PREFIX_REP:
+                if(mode_64 && REX_ISREX(addr[1]) 
+                        && is_sse_opcode(addr[2],addr[3],addr[4])) 
+                {
+                    ++pref.count;
+                    pref.opcode_prefix = addr[0];
+                } else if(is_sse_opcode(addr[1],addr[2],addr[3])) 
+                {
+                    ++pref.count;
+                    pref.opcode_prefix = addr[0];
+                }
+                break;
+
+            case PREFIX_LOCK:
+                ++pref.count;
+                pref.prfx[0] = addr[0];
+                break;
+
+            case PREFIX_SEGCS:
+            case PREFIX_SEGSS:
+            case PREFIX_SEGDS:
+            case PREFIX_SEGES:
+            case PREFIX_SEGFS:
+            case PREFIX_SEGGS:
+                ++pref.count;
+                pref.prfx[1] = addr[0];
+                break;
+
+            case PREFIX_SZOPER:
+                if(is_sse_opcode(addr[1],addr[2],addr[3])) {
+                    pref.opcode_prefix = addr[0];
+                    break;
+                }
+
+                if(mode_64 && REX_ISREX(addr[1]) && is_sse_opcode(addr[2],addr[3],addr[4])) {
+                    ++pref.count;
+                    pref.opcode_prefix = addr[0];
+                    break;
+                }
+
+                ++pref.count;
+                pref.prfx[2] = addr[0];
+                break;
+
+            case PREFIX_SZADDR:
+                ++pref.count;
+                pref.prfx[3] = addr[0];
+                break;
+
+            case PREFIX_XOP:
+		return false;
+                // assert(!"NOT HANDLING XOP YET!\n");
+                // pref.vex_prefix[2] = addr[3];
+                // ++pref.count;
+                break;
+
+            case PREFIX_EVEX:
+                pref.vex_present = true;
+                pref.vex_type = VEX_TYPE_EVEX;
+                memmove(&pref.vex_prefix, addr + 1, 3);
+                pref.vex_sse_mult = 2;
+                pref.vex_vvvv_reg = EVEXGET_VVVV(pref.vex_prefix[1], pref.vex_prefix[2]);
+                pref.vex_ll = EVEXGET_LL(pref.vex_prefix[2]);
+                pref.vex_pp = EVEXGET_PP(pref.vex_prefix[1]);
+                pref.vex_m_mmmm = EVEXGET_MM(pref.vex_prefix[0]);
+                pref.vex_w = EVEXGET_W(pref.vex_prefix[1]);
+                pref.vex_V = EVEXGET_V(pref.vex_prefix[2]);
+                pref.vex_r = EVEXGET_r(pref.vex_prefix[0]);
+                pref.vex_R = EVEXGET_R(pref.vex_prefix[0]);
+                pref.vex_x = EVEXGET_x(pref.vex_prefix[0]);
+                pref.vex_b = EVEXGET_b(pref.vex_prefix[0]);
+                pref.count += 4;
+
+                /* VEX_LL must be 0, 1, or 2 */
+                if(pref.vex_ll >= 3 || pref.vex_ll < 0)
+                    return false;
+
+                switch(pref.vex_pp)
+                {
+                    case 0:
+                        pref.opcode_prefix = 0x00;
+                        break;
+                    case 1:
+                        pref.opcode_prefix = 0x66;
+                        break;
+                    case 2:
+                        pref.opcode_prefix = 0xF3;
+                        break;
+                    case 3:
+                        pref.opcode_prefix = 0xF2;
+                        break;
+                    default:
+                        assert(!"Can't happen: value & 0x03 not in 0...3");
+                }
+	
+		/* There are a couple of constant bits for this prefix */
+		if(((pref.vex_prefix[0] & (unsigned int)(0x03 << 2)) != 0)
+			|| ((pref.vex_prefix[1] & (unsigned int)(1 << 2)) == 0))
+		{
+#ifdef VEX_DEBUG
+			printf("EVEX PREFIX INVALID!\n");
+#endif
+			return false;
+		}
 
-  bool result = true;
-  //if (mode_64)
-  //   result = ia32_decode_rex(addr - 1, pref, loc);
-  if (loc) loc->num_prefixes = pref.count;
+                /* VEX prefix excludes all others */
+                in_prefix = false;
+                break;
+
+            case PREFIX_VEX3:
+                pref.vex_present = true;
+                pref.vex_type = VEX_TYPE_VEX3;
+                memmove(&pref.vex_prefix, addr + 1, 2);
+                pref.vex_sse_mult = 1;
+                pref.vex_vvvv_reg = VEXGET_VVVV(pref.vex_prefix[1]);
+                pref.vex_ll = VEXGET_L(pref.vex_prefix[1]);
+                pref.vex_pp = VEXGET_PP(pref.vex_prefix[1]);
+                pref.vex_m_mmmm = VEX3GET_M(pref.vex_prefix[0]);
+                pref.vex_w = VEX3GET_W(pref.vex_prefix[1]);
+                pref.vex_V = 0;
+                pref.vex_r = VEXGET_R(pref.vex_prefix[0]);
+                pref.vex_x = VEX3GET_X(pref.vex_prefix[0]);
+                pref.vex_b = VEX3GET_B(pref.vex_prefix[0]);
+                pref.count += 3;
+
+                switch(pref.vex_pp)
+                {
+                    case 0:
+                        pref.opcode_prefix = 0x00;
+                        break;
+                    case 1:
+                        pref.opcode_prefix = 0x66;
+                        break;
+                    case 2:
+                        pref.opcode_prefix = 0xF3;
+                        break;
+                    case 3:
+                        pref.opcode_prefix = 0xF2;
+                        break;
+                    default:
+                        assert(!"Can't happen: value & 0x03 not in 0...3");
+                }
+
+                /* VEX prefix excludes all others */
+                in_prefix = false;
+                break;
+            case PREFIX_VEX2:
+                pref.vex_present = true;
+                pref.vex_type = VEX_TYPE_VEX2;
+                pref.vex_prefix[0] = addr[1]; /* Only 1 byte for VEX2 */
+                pref.vex_sse_mult = 0;
+                pref.vex_vvvv_reg = VEXGET_VVVV(pref.vex_prefix[0]);
+                pref.vex_ll = VEXGET_L(pref.vex_prefix[0]);
+                pref.vex_pp = VEXGET_PP(pref.vex_prefix[0]);
+                pref.vex_m_mmmm = -1; /* No W bit for VEX2 */
+                pref.vex_w = -1; /* No W bit for VEX2 */
+                pref.vex_r = VEXGET_R(pref.vex_prefix[0]);
+                pref.count += 2;
+
+                switch(pref.vex_pp)
+                {
+                    case 0:
+                        pref.opcode_prefix = 0x00;
+                        break;
+                    case 1:
+                        pref.opcode_prefix = 0x66;
+                        break;
+                    case 2:
+                        pref.opcode_prefix = 0xF3;
+                        break;
+                    case 3:
+                        pref.opcode_prefix = 0xF2;
+                        break;
+                    default:
+                        assert(!"Can't happen: value & 0x03 not in 0...3");
+                }
+
+                /* VEX prefixes exclude all others */
+                in_prefix = false; 
+                break;
+            default:
+                // If we hit a REX prefix, keep going and process other potential prefixes.
+                // The only one *used* is one in the last position, but others are ignored,
+                // not illegal.
+                if(mode_64)
+                {
+                    if(ia32_decode_rex(addr, pref, loc))
+                    {
+                        if(loc) loc->num_prefixes = pref.count;
+                        return true;
+                    }
+
+                    if(!REX_ISREX(addr[0])) 
+                    {
+                        in_prefix = false;
+                    } else  {
+                        ++pref.count;
+                    }
+                } else {
+                    in_prefix = false;
+                }
+            }  
+
+            ++addr;
+        }
 
-  return result;
+        if (loc) 
+        {
+            loc->num_prefixes = pref.count;
+        }
+        
+        return true;
 }
 
 #define REX_W(x) ((x) & 0x8)
diff --git a/common/src/arch-x86.h b/common/src/arch-x86.h
index d710488..fc5a596 100644
--- a/common/src/arch-x86.h
+++ b/common/src/arch-x86.h
@@ -109,6 +109,14 @@ enum AMD64_REG_NUMBERS {
     REGNUM_MM5,
     REGNUM_MM6,
     REGNUM_MM7,
+    REGNUM_K0,
+    REGNUM_K1,
+    REGNUM_K2,
+    REGNUM_K3,
+    REGNUM_K4,
+    REGNUM_K5,
+    REGNUM_K6,
+    REGNUM_K7,
     REGNUM_XMM0,
     REGNUM_XMM1,
     REGNUM_XMM2,
@@ -125,6 +133,86 @@ enum AMD64_REG_NUMBERS {
     REGNUM_XMM13,
     REGNUM_XMM14,
     REGNUM_XMM15,
+    REGNUM_XMM16,
+    REGNUM_XMM17,
+    REGNUM_XMM18,
+    REGNUM_XMM19,
+    REGNUM_XMM20,
+    REGNUM_XMM21,
+    REGNUM_XMM22,
+    REGNUM_XMM23,
+    REGNUM_XMM24,
+    REGNUM_XMM25,
+    REGNUM_XMM26,
+    REGNUM_XMM27,
+    REGNUM_XMM28,
+    REGNUM_XMM29,
+    REGNUM_XMM30,
+    REGNUM_XMM31,
+    REGNUM_YMM0,
+    REGNUM_YMM1,
+    REGNUM_YMM2,
+    REGNUM_YMM3,
+    REGNUM_YMM4,
+    REGNUM_YMM5,
+    REGNUM_YMM6,
+    REGNUM_YMM7,
+    REGNUM_YMM8,
+    REGNUM_YMM9,
+    REGNUM_YMM10,
+    REGNUM_YMM11,
+    REGNUM_YMM12,
+    REGNUM_YMM13,
+    REGNUM_YMM14,
+    REGNUM_YMM15,
+    REGNUM_YMM16,
+    REGNUM_YMM17,
+    REGNUM_YMM18,
+    REGNUM_YMM19,
+    REGNUM_YMM20,
+    REGNUM_YMM21,
+    REGNUM_YMM22,
+    REGNUM_YMM23,
+    REGNUM_YMM24,
+    REGNUM_YMM25,
+    REGNUM_YMM26,
+    REGNUM_YMM27,
+    REGNUM_YMM28,
+    REGNUM_YMM29,
+    REGNUM_YMM30,
+    REGNUM_YMM31,
+    REGNUM_ZMM0,
+    REGNUM_ZMM1,
+    REGNUM_ZMM2,
+    REGNUM_ZMM3,
+    REGNUM_ZMM4,
+    REGNUM_ZMM5,
+    REGNUM_ZMM6,
+    REGNUM_ZMM7,
+    REGNUM_ZMM8,
+    REGNUM_ZMM9,
+    REGNUM_ZMM10,
+    REGNUM_ZMM11,
+    REGNUM_ZMM12,
+    REGNUM_ZMM13,
+    REGNUM_ZMM14,
+    REGNUM_ZMM15,
+    REGNUM_ZMM16,
+    REGNUM_ZMM17,
+    REGNUM_ZMM18,
+    REGNUM_ZMM19,
+    REGNUM_ZMM20,
+    REGNUM_ZMM21,
+    REGNUM_ZMM22,
+    REGNUM_ZMM23,
+    REGNUM_ZMM24,
+    REGNUM_ZMM25,
+    REGNUM_ZMM26,
+    REGNUM_ZMM27,
+    REGNUM_ZMM28,
+    REGNUM_ZMM29,
+    REGNUM_ZMM30,
+    REGNUM_ZMM31,
     REGNUM_EFLAGS,
     REGNUM_FS,
     REGNUM_GS,
@@ -379,6 +467,65 @@ enum {
 };
 
 
+#ifndef VEX_PREFIX_MASKS
+#define VEX_PREFIX_MASKS
+
+enum VEX_TYPE
+{
+    VEX_TYPE_NONE=0, VEX_TYPE_VEX2, VEX_TYPE_VEX3, VEX_TYPE_EVEX
+};
+
+/* Masks to help decode vex prefixes */
+
+/** VEX 3 masks (2nd byte) */
+#define PREFIX_VEX3 ((unsigned char)0xC4)
+#define PREFIX_VEX2 ((unsigned char)0xC5)
+#define VEX3_REXX   (1 << 6)
+#define VEX3_REXB   (1 << 5)
+#define VEX3_M      ((1 << 5) - 1)
+#define VEX3_W      (1 << 7)
+
+/* VEX2 and VEX3 share these bits on their final byte  */
+#define VEX_VVVV   (((1 << 4) - 1) << 3)
+#define VEX_L      (1 << 2)
+#define VEX_PP     (0x03)
+#define VEX_REXR   (1 << 7)
+
+/* VEX mask helper macros */
+#define VEXGET_VVVV(b)  (unsigned char)((~((unsigned char) \
+            ((b & VEX_VVVV) >> 3))) & 0xF)
+
+#define VEXGET_L(b)     (char)((b & VEX_L) >> 2)
+#define VEXGET_R(b)     (char)((b & (1 << 7)) >> 7)
+#define VEXGET_PP(b)    (char)(b & VEX_PP)
+
+#define VEX3GET_W(b)    (char)((b & VEX3_W) >> 7)
+#define VEX3GET_M(b)    (b & VEX3_M)
+#define VEX3GET_X(b)    (((unsigned char)(b) & (1 << 6)) >> 6)
+#define VEX3GET_B(b)    (((unsigned char)(b) & (1 << 5)) >> 5)
+#define VEX3GET_M(b)    (b & VEX3_M)
+
+/** EVEX masks */
+#define PREFIX_EVEX ((unsigned char)0x62)
+
+#define EVEXGET_W(b) VEX3GET_W(b)
+#define EVEXGET_L1(b) (unsigned char)((1 << 5) & (b))
+#define EVEXGET_L2(b) (unsigned char)((1 << 6) & (b))
+#define EVEXGET_LL(b) (unsigned char)(((b) >> 5) & 0x03)
+#define EVEXGET_PP(b) (unsigned char)(3 & (b))
+#define EVEXGET_MM(b) (unsigned char)(3 & (b))
+#define EVEXGET_AAA(b) (unsigned char)(7 & (b))
+#define EVEXGET_r(b) (((unsigned char)(~b) & (unsigned char)(1 << 7)) >> 7)
+#define EVEXGET_R(b) (((unsigned char)(~b) & (unsigned char)(1 << 4)) >> 4)
+#define EVEXGET_b(b) (((unsigned char)(~b) & (unsigned char)(1 << 5)) >> 5)
+#define EVEXGET_x(b) (((unsigned char)(~b) & (unsigned char)(1 << 6)) >> 6)
+
+#define EVEXGET_VVVV(a, b)  ((((unsigned char)~(a) >> 3) & 0x0F)) | \
+            (((unsigned char)~(b) & 0x08) << 1)
+#define EVEXGET_V(b) (((unsigned char)~(b) & 0x08) << 1)
+
+#endif
+
 #ifndef PREFIX_LOCK
 #define PREFIX_LOCK   (unsigned char)(0xF0)
 #define PREFIX_REPNZ  (unsigned char)(0xF2)
@@ -391,6 +538,8 @@ enum {
 #define PREFIX_SEGFS  (unsigned char)(0x64)
 #define PREFIX_SEGGS  (unsigned char)(0x65)
 
+#define PREFIX_XOP  (unsigned char)(0x8F)
+
 #define PREFIX_BRANCH0 (unsigned char)(0x2E)
 #define PREFIX_BRANCH1 (unsigned char)(0x3E)
 
@@ -401,6 +550,29 @@ enum {
 COMMON_EXPORT void ia32_set_mode_64(bool mode);
 COMMON_EXPORT bool ia32_is_mode_64();
 
+/**
+ * AVX/AVX2/EVEX addressing modes (not in manual).
+ *
+ * am_HK operand is an EVEX masking register (k0 - k7) which is specified
+ *        using the EVEX.vvvv bits.
+ * am_VK the reg field of the R/M byte specifies an EVEX masking register.
+ * am_WK the R/M field of the R/M byte specifies an EVEX masking register.
+ *
+ * am_XH same as am_H except the register is constrained to an XMM register,
+ *        reguardless of the VEX.L field.
+ * am_XV same as am_V except the register is contrained to an XMM register,
+ *        reguardless of the VEX.L field.
+ * am_XW same as am_W except the register is constrained to an XMM register,
+ *        reguardless of the VEX.L field.
+ *
+ * am_YH same as am_H except the register is constrained to either an XMM
+ *        or YMM register, based on the VEX.L bits field.
+ * am_YV same as am_V except the register is constrained to either an XMM
+ *        or YMM register, based on the VEX.L bits field.
+ * am_YW same as am_W except the register is constrained to either an XMM
+ *        or YMM register, based on the VEX.L bits field.
+ */
+
 // addressing methods (see appendix A-2)
 // I've added am_reg (for registers implicitely encoded in instruciton), 
 // and am_stackX for stack operands [this kinda' messy since there are actually two operands:
@@ -408,20 +580,23 @@ COMMON_EXPORT bool ia32_is_mode_64();
 // added: am_reg, am_stack, am_allgprs
 // ADDED: am_ImplImm for implicit immediates
 // ADDED: am_RM, am_UM,
-enum { am_A=1, am_C, am_D, am_E, am_F, am_G, am_I, am_J, am_M, am_O, // 10
-       am_P, am_Q, am_R, am_S, am_T, am_U, am_UM, am_V, am_W, am_X, am_Y, am_reg, // 20
-       am_stackH, am_stackP, am_allgprs, am_VR, am_tworeghack, am_ImplImm, am_RM }; // pusH and poP produce different addresses
+enum { am_A=1, am_B, am_C, am_D, am_E, am_F, am_G, am_H, am_I, am_J, am_M, //10 
+    am_N, am_O, am_P, am_Q, am_R, am_S, am_T, am_XU, am_YU, am_U, am_UM, am_V, am_W, am_X, // 20
+    am_Y, am_reg, am_stackH, am_stackP, am_allgprs, am_tworeghack, am_ImplImm, am_RM,
+    am_HK, am_VK, am_WK, am_XH, am_XV, am_XW, am_YH, am_YV, am_YW }; // pusH and poP produce different addresses
 
 // operand types - idem, but I invented quite a few to make implicit operands explicit.
 // ADDED: op_y
-enum { op_a=1, op_b, op_c, op_d, op_dq, op_p, op_pd, op_pi, op_ps, // 9 
-       op_q, op_s, op_sd, op_ss, op_si, op_v, op_w, op_y, op_z, op_lea, op_allgprs, op_512,
+enum { op_a=1, op_b, op_c, op_d, op_dq, op_p, op_pd, op_pi, op_ps, op_q, // 10
+       op_qq, op_s, op_sd, op_ss, op_si, op_v, op_w, op_y, op_z, op_lea, op_allgprs, op_512,
        op_f, op_dbl, op_14, op_28, op_edxeax, op_ecxebx};
 
 
 // tables and pseudotables
 enum {
-  t_ill=0, t_oneB, t_twoB, t_threeB, t_threeB2, t_prefixedSSE, t_coprocEsc, t_grp, t_sse, t_sse_bis, t_sse_ter, t_grpsse, t_3dnow, t_done=99
+  t_ill=0, t_oneB, t_twoB, t_threeB, t_threeB2, t_prefixedSSE, t_coprocEsc, 
+  t_grp, t_sse, t_sse_mult, t_sse_bis, t_sse_bis_mult, 
+  t_sse_ter, t_sse_ter_mult, t_grpsse, t_3dnow, t_vexl, t_vexw, t_done=99
 };
 
 // registers used for memory access
@@ -459,9 +634,17 @@ enum { sNONE=0, // the instruction does something that cannot be classified as r
        s1W2R3RW, // additional push/pop
        s1RW2R3R, // shld/shrd
        s1RW2RW3R, // [i]div, cmpxch8b
-       s1R2R3R
+       s1RW2R3RW, // v[p]gather[ps, pd, qq, qd]
+       s1R2R3R,
+
+/* Only 4 operands below here */
+       s1W2R3R4R,
+       s1RW2R3R4R 
 }; // should be strictly less than 2^17 otherwise adjust FPOS below
 
+/* This should equal the first operand semantic where 4 operands are used. */
+#define s4OP s1W2R3R4R
+
 
 struct modRMByte {
   unsigned mod : 2;
@@ -492,6 +675,7 @@ class ia32_prefixes
   // so this array is extended to 5 elements
   unsigned char prfx[5];
   unsigned char opcode_prefix;
+  
  public:
   unsigned int getCount() const { return count; }
   unsigned char getPrefix(unsigned char group) const { assert(group <= 4); return prfx[group]; }
@@ -502,6 +686,21 @@ class ia32_prefixes
   unsigned char getOpcodePrefix() const { return opcode_prefix; }
   unsigned char getAddrSzPrefix() const { return prfx[3]; }
   unsigned char getOperSzPrefix() const { return prfx[2]; }
+
+  bool vex_present; /* Does this instruction have a vex prefix?  */
+  VEX_TYPE vex_type; /* If there is a vex prefix present, what type is it? */
+  unsigned char vex_prefix[5]; /* Support up to EVEX (VEX-512) */
+  int vex_sse_mult; /* index for sse multiplexer table */
+  int vex_vvvv_reg; /* The register specified by this prefix. */
+  int vex_ll; /* l bit for VEX2, VEX3 or ll for EVEX */
+  int vex_pp; /* pp bits for VEX2, VEX3 or EVEX */
+  int vex_m_mmmm; /* m-mmmm bits for VEX2, VEX3 or EVEX */
+  int vex_w; /* w bit for VEX2, VEX3 or EVEX */
+  int vex_V; /* V' modifier for EVEX */
+  int vex_r; /* The VEX REXR bit for VEX2, VEX3 or EVEX*/
+  int vex_R; /* The VEX REXR' bit for EVEX */
+  int vex_x; /* The VEX REXX bit for VEX2, VEX3 or EVEX */
+  int vex_b; /* The VEX REXB bit for VEX2, VEX3 or EVEX */
 };
 
 // helper routine to tack-on rex bit when needed
@@ -661,7 +860,7 @@ class ia32_instruction
                                           const ia32_prefixes& pref,
                                           const unsigned char* addr, 
                                           ia32_instruction& instruct,
-					  ia32_entry * entry,
+					                      ia32_entry * entry,
                                           ia32_memacc *mac = NULL);
 
   unsigned int   size;
diff --git a/common/src/dyn_regs.C b/common/src/dyn_regs.C
index a984363..5135cbb 100644
--- a/common/src/dyn_regs.C
+++ b/common/src/dyn_regs.C
@@ -715,11 +715,23 @@ void MachRegister::getROSERegister(int &c, int &n, int &p)
 	       default:
 		 assert(0);
 		 break;
-	       }
+      }
                break;
             case x86_64::MISC:
                c = x86_regclass_unknown;
                break;
+            case x86_64::KMASK:
+               c = x86_regclass_kmask;
+               n = baseID;
+               break;
+            case x86_64::ZMM:
+               c = x86_regclass_zmm;
+               n = baseID;
+               break;
+            case x86_64::YMM:
+               c = x86_regclass_ymm;
+               n = baseID;
+               break;
             case x86_64::XMM:
                c = x86_regclass_xmm;
                n = baseID;
@@ -940,56 +952,144 @@ MachRegister MachRegister::DwarfEncToReg(int encoding, Dyninst::Architecture arc
             case 14: return Dyninst::x86_64::r14;
             case 15: return Dyninst::x86_64::r15;
             case 16: return Dyninst::x86_64::rip;
-            case 17: return Dyninst::x86_64::xmm0;
-            case 18: return Dyninst::x86_64::xmm1;
-            case 19: return Dyninst::x86_64::xmm2;
-            case 20: return Dyninst::x86_64::xmm3;
-            case 21: return Dyninst::x86_64::xmm4;
-            case 22: return Dyninst::x86_64::xmm5;
-            case 23: return Dyninst::x86_64::xmm6;
-            case 24: return Dyninst::x86_64::xmm7;
-            case 25: return Dyninst::x86_64::xmm8;
-            case 26: return Dyninst::x86_64::xmm9;
-            case 27: return Dyninst::x86_64::xmm10;
-            case 28: return Dyninst::x86_64::xmm11;
-            case 29: return Dyninst::x86_64::xmm12;
-            case 30: return Dyninst::x86_64::xmm13;
-            case 31: return Dyninst::x86_64::xmm14;
-            case 32: return Dyninst::x86_64::xmm15;
-            case 33: return Dyninst::x86_64::st0;
-            case 34: return Dyninst::x86_64::st1;
-            case 35: return Dyninst::x86_64::st2;
-            case 36: return Dyninst::x86_64::st3;
-            case 37: return Dyninst::x86_64::st4;
-            case 38: return Dyninst::x86_64::st5;
-            case 39: return Dyninst::x86_64::st6;
-            case 40: return Dyninst::x86_64::st7;
-            case 41: return Dyninst::x86_64::mm0;
-            case 42: return Dyninst::x86_64::mm1;
-            case 43: return Dyninst::x86_64::mm2;
-            case 44: return Dyninst::x86_64::mm3;
-            case 45: return Dyninst::x86_64::mm4;
-            case 46: return Dyninst::x86_64::mm5;
-            case 47: return Dyninst::x86_64::mm6;
-            case 48: return Dyninst::x86_64::mm7;
-            case 49: return Dyninst::x86_64::flags;
-            case 50: return Dyninst::x86_64::es;
-            case 51: return Dyninst::x86_64::cs;
-            case 52: return Dyninst::x86_64::ss;
-            case 53: return Dyninst::x86_64::ds;
-            case 54: return Dyninst::x86_64::fs;
-            case 55: return Dyninst::x86_64::gs;
-            case 56: return Dyninst::InvalidReg;
-            case 57: return Dyninst::InvalidReg;
-            case 58: return Dyninst::x86_64::fsbase;
-            case 59: return Dyninst::x86_64::gsbase;
-            case 60: return Dyninst::InvalidReg;
-            case 61: return Dyninst::InvalidReg;
-            case 62: return Dyninst::InvalidReg; //tr
-            case 63: return Dyninst::InvalidReg; //ldtr
-            case 64: return Dyninst::InvalidReg; //mxcsr
-            case 65: return Dyninst::InvalidReg; //fcw
-            case 66: return Dyninst::InvalidReg; //fsw
+            case 17: return Dyninst::x86_64::k0;
+            case 18: return Dyninst::x86_64::k1;
+            case 19: return Dyninst::x86_64::k2;
+            case 20: return Dyninst::x86_64::k3;
+            case 21: return Dyninst::x86_64::k4;
+            case 22: return Dyninst::x86_64::k5;
+            case 23: return Dyninst::x86_64::k6;
+            case 24: return Dyninst::x86_64::k7;
+            case 25: return Dyninst::x86_64::zmm0;
+            case 26: return Dyninst::x86_64::zmm1;
+            case 27: return Dyninst::x86_64::zmm2;
+            case 28: return Dyninst::x86_64::zmm3;
+            case 29: return Dyninst::x86_64::zmm4;
+            case 30: return Dyninst::x86_64::zmm5;
+            case 31: return Dyninst::x86_64::zmm6;
+            case 32: return Dyninst::x86_64::zmm7;
+            case 33: return Dyninst::x86_64::zmm8;
+            case 34: return Dyninst::x86_64::zmm9;
+            case 35: return Dyninst::x86_64::zmm10;
+            case 36: return Dyninst::x86_64::zmm11;
+            case 37: return Dyninst::x86_64::zmm12;
+            case 38: return Dyninst::x86_64::zmm13;
+            case 39: return Dyninst::x86_64::zmm14;
+            case 40: return Dyninst::x86_64::zmm15;
+            case 41: return Dyninst::x86_64::zmm16;
+            case 42: return Dyninst::x86_64::zmm17;
+            case 43: return Dyninst::x86_64::zmm18;
+            case 44: return Dyninst::x86_64::zmm19;
+            case 45: return Dyninst::x86_64::zmm20;
+            case 46: return Dyninst::x86_64::zmm21;
+            case 47: return Dyninst::x86_64::zmm22;
+            case 48: return Dyninst::x86_64::zmm23;
+            case 49: return Dyninst::x86_64::zmm24;
+            case 50: return Dyninst::x86_64::zmm25;
+            case 51: return Dyninst::x86_64::zmm26;
+            case 52: return Dyninst::x86_64::zmm27;
+            case 53: return Dyninst::x86_64::zmm28;
+            case 54: return Dyninst::x86_64::zmm29;
+            case 55: return Dyninst::x86_64::zmm30;
+            case 56: return Dyninst::x86_64::zmm31;
+            case 57: return Dyninst::x86_64::ymm0;
+            case 58: return Dyninst::x86_64::ymm1;
+            case 59: return Dyninst::x86_64::ymm2;
+            case 60: return Dyninst::x86_64::ymm3;
+            case 61: return Dyninst::x86_64::ymm4;
+            case 62: return Dyninst::x86_64::ymm5;
+            case 63: return Dyninst::x86_64::ymm6;
+            case 64: return Dyninst::x86_64::ymm7;
+            case 65: return Dyninst::x86_64::ymm8;
+            case 66: return Dyninst::x86_64::ymm9;
+            case 67: return Dyninst::x86_64::ymm10;
+            case 68: return Dyninst::x86_64::ymm11;
+            case 69: return Dyninst::x86_64::ymm12;
+            case 70: return Dyninst::x86_64::ymm13;
+            case 71: return Dyninst::x86_64::ymm14;
+            case 72: return Dyninst::x86_64::ymm15;
+            case 73: return Dyninst::x86_64::ymm16;
+            case 74: return Dyninst::x86_64::ymm17;
+            case 75: return Dyninst::x86_64::ymm18;
+            case 76: return Dyninst::x86_64::ymm19;
+            case 77: return Dyninst::x86_64::ymm20;
+            case 78: return Dyninst::x86_64::ymm21;
+            case 79: return Dyninst::x86_64::ymm22;
+            case 80: return Dyninst::x86_64::ymm23;
+            case 81: return Dyninst::x86_64::ymm24;
+            case 82: return Dyninst::x86_64::ymm25;
+            case 83: return Dyninst::x86_64::ymm26;
+            case 84: return Dyninst::x86_64::ymm27;
+            case 85: return Dyninst::x86_64::ymm28;
+            case 86: return Dyninst::x86_64::ymm29;
+            case 87: return Dyninst::x86_64::ymm30;
+            case 88: return Dyninst::x86_64::ymm31;
+            case 89: return Dyninst::x86_64::xmm0;
+            case 90: return Dyninst::x86_64::xmm1;
+            case 91: return Dyninst::x86_64::xmm2;
+            case 92: return Dyninst::x86_64::xmm3;
+            case 93: return Dyninst::x86_64::xmm4;
+            case 94: return Dyninst::x86_64::xmm5;
+            case 95: return Dyninst::x86_64::xmm6;
+            case 96: return Dyninst::x86_64::xmm7;
+            case 97: return Dyninst::x86_64::xmm8;
+            case 98: return Dyninst::x86_64::xmm9;
+            case 99: return Dyninst::x86_64::xmm10;
+            case 100: return Dyninst::x86_64::xmm11;
+            case 101: return Dyninst::x86_64::xmm12;
+            case 102: return Dyninst::x86_64::xmm13;
+            case 103: return Dyninst::x86_64::xmm14;
+            case 104: return Dyninst::x86_64::xmm15;
+            case 105: return Dyninst::x86_64::xmm16;
+            case 106: return Dyninst::x86_64::xmm17;
+            case 107: return Dyninst::x86_64::xmm18;
+            case 108: return Dyninst::x86_64::xmm19;
+            case 109: return Dyninst::x86_64::xmm20;
+            case 110: return Dyninst::x86_64::xmm21;
+            case 111: return Dyninst::x86_64::xmm22;
+            case 112: return Dyninst::x86_64::xmm23;
+            case 113: return Dyninst::x86_64::xmm24;
+            case 114: return Dyninst::x86_64::xmm25;
+            case 115: return Dyninst::x86_64::xmm26;
+            case 116: return Dyninst::x86_64::xmm27;
+            case 117: return Dyninst::x86_64::xmm28;
+            case 118: return Dyninst::x86_64::xmm29;
+            case 119: return Dyninst::x86_64::xmm30;
+            case 120: return Dyninst::x86_64::xmm31;
+            case 121: return Dyninst::x86_64::st0;
+            case 122: return Dyninst::x86_64::st1;
+            case 123: return Dyninst::x86_64::st2;
+            case 124: return Dyninst::x86_64::st3;
+            case 125: return Dyninst::x86_64::st4;
+            case 126: return Dyninst::x86_64::st5;
+            case 127: return Dyninst::x86_64::st6;
+            case 128: return Dyninst::x86_64::st7;
+            case 129: return Dyninst::x86_64::mm0;
+            case 130: return Dyninst::x86_64::mm1;
+            case 131: return Dyninst::x86_64::mm2;
+            case 132: return Dyninst::x86_64::mm3;
+            case 133: return Dyninst::x86_64::mm4;
+            case 134: return Dyninst::x86_64::mm5;
+            case 135: return Dyninst::x86_64::mm6;
+            case 136: return Dyninst::x86_64::mm7;
+            case 137: return Dyninst::x86_64::flags;
+            case 138: return Dyninst::x86_64::es;
+            case 139: return Dyninst::x86_64::cs;
+            case 140: return Dyninst::x86_64::ss;
+            case 141: return Dyninst::x86_64::ds;
+            case 142: return Dyninst::x86_64::fs;
+            case 143: return Dyninst::x86_64::gs;
+            case 144: return Dyninst::InvalidReg;
+            case 145: return Dyninst::InvalidReg;
+            case 146: return Dyninst::x86_64::fsbase;
+            case 147: return Dyninst::x86_64::gsbase;
+            case 148: return Dyninst::InvalidReg;
+            case 149: return Dyninst::InvalidReg;
+            case 150: return Dyninst::InvalidReg; //tr
+            case 151: return Dyninst::InvalidReg; //ldtr
+            case 152: return Dyninst::InvalidReg; //mxcsr
+            case 153: return Dyninst::InvalidReg; //fcw
+            case 154: return Dyninst::InvalidReg; //fsw
          }
          break;
       case Arch_ppc32:
@@ -1312,39 +1412,137 @@ int MachRegister::getDwarfEnc() const
             case Dyninst::x86_64::ir14: return 14;
             case Dyninst::x86_64::ir15: return 15;
             case Dyninst::x86_64::irip: return 16;
-            case Dyninst::x86_64::ixmm0: return 17;
-            case Dyninst::x86_64::ixmm1: return 18;
-            case Dyninst::x86_64::ixmm2: return 19;
-            case Dyninst::x86_64::ixmm3: return 20;
-            case Dyninst::x86_64::ixmm4: return 21;
-            case Dyninst::x86_64::ixmm5: return 22;
-            case Dyninst::x86_64::ixmm6: return 23;
-            case Dyninst::x86_64::ixmm7: return 24;
-            case Dyninst::x86_64::ixmm8: return 25;
-            case Dyninst::x86_64::ixmm9: return 26;
-            case Dyninst::x86_64::ixmm10: return 27;
-            case Dyninst::x86_64::ixmm11: return 28;
-            case Dyninst::x86_64::ixmm12: return 29;
-            case Dyninst::x86_64::ixmm13: return 30;
-            case Dyninst::x86_64::ixmm14: return 31;
-            case Dyninst::x86_64::ixmm15: return 32;
-            case Dyninst::x86_64::imm0: return 41;
-            case Dyninst::x86_64::imm1: return 42;
-            case Dyninst::x86_64::imm2: return 43;
-            case Dyninst::x86_64::imm3: return 44;
-            case Dyninst::x86_64::imm4: return 45;
-            case Dyninst::x86_64::imm5: return 46;
-            case Dyninst::x86_64::imm6: return 47;
-            case Dyninst::x86_64::imm7: return 48;
-            case Dyninst::x86_64::iflags: return 49;
-            case Dyninst::x86_64::ies: return 50;
-            case Dyninst::x86_64::ics: return 51;
-            case Dyninst::x86_64::iss: return 52;
-            case Dyninst::x86_64::ids: return 53;
-            case Dyninst::x86_64::ifs: return 54;
-            case Dyninst::x86_64::igs: return 55;
-            case Dyninst::x86_64::ifsbase: return 58;
-            case Dyninst::x86_64::igsbase: return 59;
+            case Dyninst::x86_64::ik0: return 17;
+            case Dyninst::x86_64::ik1: return 18;
+            case Dyninst::x86_64::ik2: return 19;
+            case Dyninst::x86_64::ik3: return 20;
+            case Dyninst::x86_64::ik4: return 21;
+            case Dyninst::x86_64::ik5: return 22;
+            case Dyninst::x86_64::ik6: return 23;
+            case Dyninst::x86_64::ik7: return 24;
+            case Dyninst::x86_64::izmm0: return 25;
+            case Dyninst::x86_64::izmm1: return 26;
+            case Dyninst::x86_64::izmm2: return 27;
+            case Dyninst::x86_64::izmm3: return 28;
+            case Dyninst::x86_64::izmm4: return 29;
+            case Dyninst::x86_64::izmm5: return 30;
+            case Dyninst::x86_64::izmm6: return 31;
+            case Dyninst::x86_64::izmm7: return 32;
+            case Dyninst::x86_64::izmm8: return 33;
+            case Dyninst::x86_64::izmm9: return 34;
+            case Dyninst::x86_64::izmm10: return 35;
+            case Dyninst::x86_64::izmm11: return 36;
+            case Dyninst::x86_64::izmm12: return 37;
+            case Dyninst::x86_64::izmm13: return 38;
+            case Dyninst::x86_64::izmm14: return 39;
+            case Dyninst::x86_64::izmm15: return 40;
+            case Dyninst::x86_64::izmm16: return 41;
+            case Dyninst::x86_64::izmm17: return 42;
+            case Dyninst::x86_64::izmm18: return 43;
+            case Dyninst::x86_64::izmm19: return 44;
+            case Dyninst::x86_64::izmm20: return 45;
+            case Dyninst::x86_64::izmm21: return 46;
+            case Dyninst::x86_64::izmm22: return 47;
+            case Dyninst::x86_64::izmm23: return 48;
+            case Dyninst::x86_64::izmm24: return 49;
+            case Dyninst::x86_64::izmm25: return 50;
+            case Dyninst::x86_64::izmm26: return 51;
+            case Dyninst::x86_64::izmm27: return 52;
+            case Dyninst::x86_64::izmm28: return 53;
+            case Dyninst::x86_64::izmm29: return 54;
+            case Dyninst::x86_64::izmm30: return 55;
+            case Dyninst::x86_64::izmm31: return 56;
+            case Dyninst::x86_64::iymm0: return 57;
+            case Dyninst::x86_64::iymm1: return 58;
+            case Dyninst::x86_64::iymm2: return 59;
+            case Dyninst::x86_64::iymm3: return 60;
+            case Dyninst::x86_64::iymm4: return 61;
+            case Dyninst::x86_64::iymm5: return 62;
+            case Dyninst::x86_64::iymm6: return 63;
+            case Dyninst::x86_64::iymm7: return 64;
+            case Dyninst::x86_64::iymm8: return 65;
+            case Dyninst::x86_64::iymm9: return 66;
+            case Dyninst::x86_64::iymm10: return 67;
+            case Dyninst::x86_64::iymm11: return 68;
+            case Dyninst::x86_64::iymm12: return 69;
+            case Dyninst::x86_64::iymm13: return 70;
+            case Dyninst::x86_64::iymm14: return 71;
+            case Dyninst::x86_64::iymm15: return 72;
+            case Dyninst::x86_64::iymm16: return 73;
+            case Dyninst::x86_64::iymm17: return 74;
+            case Dyninst::x86_64::iymm18: return 75;
+            case Dyninst::x86_64::iymm19: return 76;
+            case Dyninst::x86_64::iymm20: return 77;
+            case Dyninst::x86_64::iymm21: return 78;
+            case Dyninst::x86_64::iymm22: return 79;
+            case Dyninst::x86_64::iymm23: return 80;
+            case Dyninst::x86_64::iymm24: return 81;
+            case Dyninst::x86_64::iymm25: return 82;
+            case Dyninst::x86_64::iymm26: return 83;
+            case Dyninst::x86_64::iymm27: return 84;
+            case Dyninst::x86_64::iymm28: return 85;
+            case Dyninst::x86_64::iymm29: return 86;
+            case Dyninst::x86_64::iymm30: return 87;
+            case Dyninst::x86_64::iymm31: return 88;
+            case Dyninst::x86_64::ixmm0: return 89;
+            case Dyninst::x86_64::ixmm1: return 90;
+            case Dyninst::x86_64::ixmm2: return 91;
+            case Dyninst::x86_64::ixmm3: return 92;
+            case Dyninst::x86_64::ixmm4: return 93;
+            case Dyninst::x86_64::ixmm5: return 94;
+            case Dyninst::x86_64::ixmm6: return 95;
+            case Dyninst::x86_64::ixmm7: return 96;
+            case Dyninst::x86_64::ixmm8: return 97;
+            case Dyninst::x86_64::ixmm9: return 98;
+            case Dyninst::x86_64::ixmm10: return 99;
+            case Dyninst::x86_64::ixmm11: return 100;
+            case Dyninst::x86_64::ixmm12: return 101;
+            case Dyninst::x86_64::ixmm13: return 102;
+            case Dyninst::x86_64::ixmm14: return 103;
+            case Dyninst::x86_64::ixmm15: return 104;
+            case Dyninst::x86_64::ixmm16: return 105;
+            case Dyninst::x86_64::ixmm17: return 106;
+            case Dyninst::x86_64::ixmm18: return 107;
+            case Dyninst::x86_64::ixmm19: return 108;
+            case Dyninst::x86_64::ixmm20: return 109;
+            case Dyninst::x86_64::ixmm21: return 110;
+            case Dyninst::x86_64::ixmm22: return 111;
+            case Dyninst::x86_64::ixmm23: return 112;
+            case Dyninst::x86_64::ixmm24: return 113;
+            case Dyninst::x86_64::ixmm25: return 114;
+            case Dyninst::x86_64::ixmm26: return 115;
+            case Dyninst::x86_64::ixmm27: return 116;
+            case Dyninst::x86_64::ixmm28: return 117;
+            case Dyninst::x86_64::ixmm29: return 118;
+            case Dyninst::x86_64::ixmm30: return 119;
+            case Dyninst::x86_64::ixmm31: return 120;
+            //case Dyninst::x86_64::ist0: return 121;
+            //case Dyninst::x86_64::ist1: return 122;
+            //case Dyninst::x86_64::ist2: return 123;
+            //case Dyninst::x86_64::ist3: return 124;
+            //case Dyninst::x86_64::ist4: return 125;
+            //case Dyninst::x86_64::ist5: return 126;
+            //case Dyninst::x86_64::ist6: return 127;
+            //case Dyninst::x86_64::ist7: return 128;
+            case Dyninst::x86_64::imm0: return 129;
+            case Dyninst::x86_64::imm1: return 130;
+            case Dyninst::x86_64::imm2: return 131;
+            case Dyninst::x86_64::imm3: return 132;
+            case Dyninst::x86_64::imm4: return 133;
+            case Dyninst::x86_64::imm5: return 134;
+            case Dyninst::x86_64::imm6: return 135;
+            case Dyninst::x86_64::imm7: return 136;
+            case Dyninst::x86_64::iflags: return 137;
+            case Dyninst::x86_64::ies: return 138;
+            case Dyninst::x86_64::ics: return 139;
+            case Dyninst::x86_64::iss: return 140;
+            case Dyninst::x86_64::ids: return 141;
+            case Dyninst::x86_64::ifs: return 142;
+            case Dyninst::x86_64::igs: return 143;
+            // INVALID REG 144
+            // INVALID REG 145
+            case Dyninst::x86_64::ifsbase: return 146;
+            case Dyninst::x86_64::igsbase: return 147;
             default: return -1;
          }
          break;
diff --git a/dataflowAPI/src/RegisterMap.C b/dataflowAPI/src/RegisterMap.C
index 1156114..0810636 100644
--- a/dataflowAPI/src/RegisterMap.C
+++ b/dataflowAPI/src/RegisterMap.C
@@ -163,47 +163,135 @@ RegisterMap &machRegIndex_x86_64() {
          {x86_64::orax, 34},
          {x86_64::fsbase, 35},
          {x86_64::gsbase, 36},
-         {x86_64::xmm0, 37},
-         {x86_64::xmm1, 38},
-         {x86_64::xmm2, 39},
-         {x86_64::xmm3, 40},
-         {x86_64::xmm4, 41},
-         {x86_64::xmm5, 42},
-         {x86_64::xmm6, 43},
-         {x86_64::xmm7, 44},
-         {x86_64::xmm8, 45},
-         {x86_64::xmm9, 46},
-         {x86_64::xmm10, 47},
-         {x86_64::xmm11, 48},
-         {x86_64::xmm12, 49},
-         {x86_64::xmm13, 50},
-         {x86_64::xmm14, 51},
-         {x86_64::xmm15, 52},
-         {x86_64::mm0, 53}, // mm0 to mm7 and st0 to st7 collapse to mm0
-         {x86_64::cr0, 54},
-         {x86_64::cr1, 55},
-         {x86_64::cr2, 56},
-         {x86_64::cr3, 57},
-         {x86_64::cr4, 58},
-         {x86_64::cr5, 59},
-         {x86_64::cr6, 60},
-         {x86_64::cr7, 61},
-         {x86_64::dr0, 62},
-         {x86_64::dr1, 63},
-         {x86_64::dr2, 64},
-         {x86_64::dr3, 65},
-         {x86_64::dr4, 66},
-         {x86_64::dr5, 67},
-         {x86_64::dr6, 68},
-         {x86_64::dr7, 69},
-         {x86_64::tr0, 70},
-         {x86_64::tr1, 71},
-         {x86_64::tr2, 72},
-         {x86_64::tr3, 73},
-         {x86_64::tr4, 74},
-         {x86_64::tr5, 75},
-         {x86_64::tr6, 76},
-         {x86_64::tr7, 77}
+         {x86_64::k0, 37},
+         {x86_64::k1, 38},
+         {x86_64::k2, 39},
+         {x86_64::k3, 40},
+         {x86_64::k4, 41},
+         {x86_64::k5, 42},
+         {x86_64::k6, 43},
+         {x86_64::k7, 44},
+         {x86_64::zmm0, 45},
+         {x86_64::zmm1, 46},
+         {x86_64::zmm2, 47},
+         {x86_64::zmm3, 48},
+         {x86_64::zmm4, 49},
+         {x86_64::zmm5, 50},
+         {x86_64::zmm6, 51},
+         {x86_64::zmm7, 52},
+         {x86_64::zmm8, 53},
+         {x86_64::zmm9, 54},
+         {x86_64::zmm10, 55},
+         {x86_64::zmm11, 56},
+         {x86_64::zmm12, 57},
+         {x86_64::zmm13, 58},
+         {x86_64::zmm14, 59},
+         {x86_64::zmm15, 60},
+         {x86_64::zmm16, 61},
+         {x86_64::zmm17, 62},
+         {x86_64::zmm18, 63},
+         {x86_64::zmm19, 64},
+         {x86_64::zmm20, 65},
+         {x86_64::zmm21, 66},
+         {x86_64::zmm22, 67},
+         {x86_64::zmm23, 68},
+         {x86_64::zmm24, 69},
+         {x86_64::zmm25, 70},
+         {x86_64::zmm26, 71},
+         {x86_64::zmm27, 72},
+         {x86_64::zmm28, 73},
+         {x86_64::zmm29, 74},
+         {x86_64::zmm30, 75},
+         {x86_64::zmm31, 76},
+         {x86_64::ymm0, 77},
+         {x86_64::ymm1, 78},
+         {x86_64::ymm2, 79},
+         {x86_64::ymm3, 80},
+         {x86_64::ymm4, 81},
+         {x86_64::ymm5, 82},
+         {x86_64::ymm6, 83},
+         {x86_64::ymm7, 84},
+         {x86_64::ymm8, 85},
+         {x86_64::ymm9, 86},
+         {x86_64::ymm10, 87},
+         {x86_64::ymm11, 88},
+         {x86_64::ymm12, 89},
+         {x86_64::ymm13, 90},
+         {x86_64::ymm14, 91},
+         {x86_64::ymm15, 92},
+         {x86_64::ymm16, 93},
+         {x86_64::ymm17, 94},
+         {x86_64::ymm18, 95},
+         {x86_64::ymm19, 96},
+         {x86_64::ymm20, 97},
+         {x86_64::ymm21, 98},
+         {x86_64::ymm22, 99},
+         {x86_64::ymm23, 100},
+         {x86_64::ymm24, 101},
+         {x86_64::ymm25, 102},
+         {x86_64::ymm26, 103},
+         {x86_64::ymm27, 104},
+         {x86_64::ymm28, 105},
+         {x86_64::ymm29, 106},
+         {x86_64::ymm30, 107},
+         {x86_64::ymm31, 108},
+         {x86_64::xmm0, 109},
+         {x86_64::xmm1, 110},
+         {x86_64::xmm2, 111},
+         {x86_64::xmm3, 112},
+         {x86_64::xmm4, 113},
+         {x86_64::xmm5, 114},
+         {x86_64::xmm6, 115},
+         {x86_64::xmm7, 116},
+         {x86_64::xmm8, 117},
+         {x86_64::xmm9, 118},
+         {x86_64::xmm10, 119},
+         {x86_64::xmm11, 120},
+         {x86_64::xmm12, 121},
+         {x86_64::xmm13, 122},
+         {x86_64::xmm14, 123},
+         {x86_64::xmm15, 124},
+         {x86_64::xmm16, 125},
+         {x86_64::xmm17, 126},
+         {x86_64::xmm18, 127},
+         {x86_64::xmm19, 128},
+         {x86_64::xmm20, 129},
+         {x86_64::xmm21, 130},
+         {x86_64::xmm22, 131},
+         {x86_64::xmm23, 132},
+         {x86_64::xmm24, 133},
+         {x86_64::xmm25, 134},
+         {x86_64::xmm26, 135},
+         {x86_64::xmm27, 136},
+         {x86_64::xmm28, 137},
+         {x86_64::xmm29, 138},
+         {x86_64::xmm30, 139},
+         {x86_64::xmm31, 140},
+         {x86_64::mm0, 141}, // mm0 to mm7 and st0 to st7 collapse to mm0
+         {x86_64::cr0, 142},
+         {x86_64::cr1, 143},
+         {x86_64::cr2, 144},
+         {x86_64::cr3, 145},
+         {x86_64::cr4, 146},
+         {x86_64::cr5, 147},
+         {x86_64::cr6, 148},
+         {x86_64::cr7, 149},
+         {x86_64::dr0, 150},
+         {x86_64::dr1, 151},
+         {x86_64::dr2, 152},
+         {x86_64::dr3, 153},
+         {x86_64::dr4, 154},
+         {x86_64::dr5, 155},
+         {x86_64::dr6, 156},
+         {x86_64::dr7, 157},
+         {x86_64::tr0, 158},
+         {x86_64::tr1, 159},
+         {x86_64::tr2, 160},
+         {x86_64::tr3, 161},
+         {x86_64::tr4, 162},
+         {x86_64::tr5, 163},
+         {x86_64::tr6, 164},
+         {x86_64::tr7, 165},
       };
    }
    return mrmap;
@@ -688,47 +776,135 @@ RegisterMap &machRegIndex_x86_64() {
          (x86_64::orax, 34)
          (x86_64::fsbase, 35)
          (x86_64::gsbase, 36)
-         (x86_64::xmm0, 37)
-         (x86_64::xmm1, 38)
-         (x86_64::xmm2, 39)
-         (x86_64::xmm3, 40)
-         (x86_64::xmm4, 41)
-         (x86_64::xmm5, 42)
-         (x86_64::xmm6, 43)
-         (x86_64::xmm7, 44)
-         (x86_64::xmm8, 45)
-         (x86_64::xmm9, 46)
-         (x86_64::xmm10, 47)
-         (x86_64::xmm11, 48)
-         (x86_64::xmm12, 49)
-         (x86_64::xmm13, 50)
-         (x86_64::xmm14, 51)
-         (x86_64::xmm15, 52)
-         (x86_64::mm0, 53) // mm0 to mm7 and st0 to st7 collapse to mm0
-         (x86_64::cr0, 54)
-         (x86_64::cr1, 55)
-         (x86_64::cr2, 56)
-         (x86_64::cr3, 57)
-         (x86_64::cr4, 58)
-         (x86_64::cr5, 59)
-         (x86_64::cr6, 60)
-         (x86_64::cr7, 61)
-         (x86_64::dr0, 62)
-         (x86_64::dr1, 63)
-         (x86_64::dr2, 64)
-         (x86_64::dr3, 65)
-         (x86_64::dr4, 66)
-         (x86_64::dr5, 67)
-         (x86_64::dr6, 68)
-         (x86_64::dr7, 69)
-         (x86_64::tr0, 70)
-         (x86_64::tr1, 71)
-         (x86_64::tr2, 72)
-         (x86_64::tr3, 73)
-         (x86_64::tr4, 74)
-         (x86_64::tr5, 75)
-         (x86_64::tr6, 76)
-         (x86_64::tr7, 77)
+         (x86_64::k0, 37)
+         (x86_64::k1, 38)
+         (x86_64::k2, 39)
+         (x86_64::k3, 40)
+         (x86_64::k4, 41)
+         (x86_64::k5, 42)
+         (x86_64::k6, 43)
+         (x86_64::k7, 44)
+         (x86_64::zmm0, 45)
+         (x86_64::zmm1, 46)
+         (x86_64::zmm2, 47)
+         (x86_64::zmm3, 48)
+         (x86_64::zmm4, 49)
+         (x86_64::zmm5, 50)
+         (x86_64::zmm6, 51)
+         (x86_64::zmm7, 52)
+         (x86_64::zmm8, 53)
+         (x86_64::zmm9, 54)
+         (x86_64::zmm10, 55)
+         (x86_64::zmm11, 56)
+         (x86_64::zmm12, 57)
+         (x86_64::zmm13, 58)
+         (x86_64::zmm14, 59)
+         (x86_64::zmm15, 60)
+         (x86_64::zmm16, 61)
+         (x86_64::zmm17, 62)
+         (x86_64::zmm18, 63)
+         (x86_64::zmm19, 64)
+         (x86_64::zmm20, 65)
+         (x86_64::zmm21, 66)
+         (x86_64::zmm22, 67)
+         (x86_64::zmm23, 68)
+         (x86_64::zmm24, 69)
+         (x86_64::zmm25, 70)
+         (x86_64::zmm26, 71)
+         (x86_64::zmm27, 72)
+         (x86_64::zmm28, 73)
+         (x86_64::zmm29, 74)
+         (x86_64::zmm30, 75)
+         (x86_64::zmm31, 75)
+         (x86_64::ymm0, 76)
+         (x86_64::ymm1, 77)
+         (x86_64::ymm2, 78)
+         (x86_64::ymm3, 79)
+         (x86_64::ymm4, 80)
+         (x86_64::ymm5, 81)
+         (x86_64::ymm6, 82)
+         (x86_64::ymm7, 83)
+         (x86_64::ymm8, 84)
+         (x86_64::ymm9, 85)
+         (x86_64::ymm10, 86)
+         (x86_64::ymm11, 87)
+         (x86_64::ymm12, 88)
+         (x86_64::ymm13, 89)
+         (x86_64::ymm14, 90)
+         (x86_64::ymm15, 91)
+         (x86_64::ymm16, 92)
+         (x86_64::ymm17, 93)
+         (x86_64::ymm18, 94)
+         (x86_64::ymm19, 95)
+         (x86_64::ymm20, 96)
+         (x86_64::ymm21, 97)
+         (x86_64::ymm22, 98)
+         (x86_64::ymm23, 99)
+         (x86_64::ymm24, 100)
+         (x86_64::ymm25, 101)
+         (x86_64::ymm26, 102)
+         (x86_64::ymm27, 103)
+         (x86_64::ymm28, 104)
+         (x86_64::ymm29, 105)
+         (x86_64::ymm30, 106)
+         (x86_64::ymm31, 107)
+         (x86_64::xmm0, 108)
+         (x86_64::xmm1, 109)
+         (x86_64::xmm2, 110)
+         (x86_64::xmm3, 111)
+         (x86_64::xmm4, 112)
+         (x86_64::xmm5, 113)
+         (x86_64::xmm6, 114)
+         (x86_64::xmm7, 115)
+         (x86_64::xmm8, 116)
+         (x86_64::xmm9, 117)
+         (x86_64::xmm10, 118)
+         (x86_64::xmm11, 119)
+         (x86_64::xmm12, 120)
+         (x86_64::xmm13, 121)
+         (x86_64::xmm14, 122)
+         (x86_64::xmm15, 123)
+         (x86_64::xmm16, 124)
+         (x86_64::xmm17, 125)
+         (x86_64::xmm18, 126)
+         (x86_64::xmm19, 127)
+         (x86_64::xmm20, 128)
+         (x86_64::xmm21, 129)
+         (x86_64::xmm22, 130)
+         (x86_64::xmm23, 131)
+         (x86_64::xmm24, 132)
+         (x86_64::xmm25, 133)
+         (x86_64::xmm26, 134)
+         (x86_64::xmm27, 135)
+         (x86_64::xmm28, 136)
+         (x86_64::xmm29, 137)
+         (x86_64::xmm30, 138)
+         (x86_64::xmm31, 139)
+         (x86_64::mm0, 140) // mm0 to mm7 and st0 to st7 collapse to mm0
+         (x86_64::cr0, 141)
+         (x86_64::cr1, 142)
+         (x86_64::cr2, 143)
+         (x86_64::cr3, 144)
+         (x86_64::cr4, 145)
+         (x86_64::cr5, 146)
+         (x86_64::cr6, 147)
+         (x86_64::cr7, 148)
+         (x86_64::dr0, 149)
+         (x86_64::dr1, 150)
+         (x86_64::dr2, 151)
+         (x86_64::dr3, 152)
+         (x86_64::dr4, 153)
+         (x86_64::dr5, 154)
+         (x86_64::dr6, 155)
+         (x86_64::dr7, 156)
+         (x86_64::tr0, 157)
+         (x86_64::tr1, 158)
+         (x86_64::tr2, 159)
+         (x86_64::tr3, 160)
+         (x86_64::tr4, 161)
+         (x86_64::tr5, 162)
+         (x86_64::tr6, 163)
+         (x86_64::tr7, 164)
          ;
    }
    return mrmap;
diff --git a/dyninstAPI/src/RegisterConversion-x86.C b/dyninstAPI/src/RegisterConversion-x86.C
index e8ad2c3..dbb7d16 100644
--- a/dyninstAPI/src/RegisterConversion-x86.C
+++ b/dyninstAPI/src/RegisterConversion-x86.C
@@ -163,6 +163,78 @@ multimap<Register, MachRegister> regToMachReg64 = map_list_of
 (REGNUM_EFLAGS,x86_64::nt_)
 (REGNUM_EFLAGS,x86_64::if_)
 (REGNUM_EFLAGS,x86_64::rf)
+(REGNUM_K0,x86_64::k0)
+(REGNUM_K1,x86_64::k1)
+(REGNUM_K2,x86_64::k2)
+(REGNUM_K3,x86_64::k3)
+(REGNUM_K4,x86_64::k4)
+(REGNUM_K5,x86_64::k5)
+(REGNUM_K6,x86_64::k6)
+(REGNUM_K7,x86_64::k7)
+(REGNUM_ZMM0,x86_64::zmm0)
+(REGNUM_ZMM1,x86_64::zmm1)
+(REGNUM_ZMM2,x86_64::zmm2)
+(REGNUM_ZMM3,x86_64::zmm3)
+(REGNUM_ZMM4,x86_64::zmm4)
+(REGNUM_ZMM5,x86_64::zmm5)
+(REGNUM_ZMM6,x86_64::zmm6)
+(REGNUM_ZMM7,x86_64::zmm7)
+(REGNUM_ZMM8,x86_64::zmm8)
+(REGNUM_ZMM9,x86_64::zmm9)
+(REGNUM_ZMM10,x86_64::zmm10)
+(REGNUM_ZMM11,x86_64::zmm11)
+(REGNUM_ZMM12,x86_64::zmm12)
+(REGNUM_ZMM13,x86_64::zmm13)
+(REGNUM_ZMM14,x86_64::zmm14)
+(REGNUM_ZMM15,x86_64::zmm15)
+(REGNUM_ZMM16,x86_64::zmm16)
+(REGNUM_ZMM17,x86_64::zmm17)
+(REGNUM_ZMM18,x86_64::zmm18)
+(REGNUM_ZMM19,x86_64::zmm19)
+(REGNUM_ZMM20,x86_64::zmm20)
+(REGNUM_ZMM21,x86_64::zmm21)
+(REGNUM_ZMM22,x86_64::zmm22)
+(REGNUM_ZMM23,x86_64::zmm23)
+(REGNUM_ZMM24,x86_64::zmm24)
+(REGNUM_ZMM25,x86_64::zmm25)
+(REGNUM_ZMM26,x86_64::zmm26)
+(REGNUM_ZMM27,x86_64::zmm27)
+(REGNUM_ZMM28,x86_64::zmm28)
+(REGNUM_ZMM29,x86_64::zmm29)
+(REGNUM_ZMM30,x86_64::zmm30)
+(REGNUM_ZMM31,x86_64::zmm31)
+(REGNUM_YMM0,x86_64::ymm0)
+(REGNUM_YMM1,x86_64::ymm1)
+(REGNUM_YMM2,x86_64::ymm2)
+(REGNUM_YMM3,x86_64::ymm3)
+(REGNUM_YMM4,x86_64::ymm4)
+(REGNUM_YMM5,x86_64::ymm5)
+(REGNUM_YMM6,x86_64::ymm6)
+(REGNUM_YMM7,x86_64::ymm7)
+(REGNUM_YMM8,x86_64::ymm8)
+(REGNUM_YMM9,x86_64::ymm9)
+(REGNUM_YMM10,x86_64::ymm10)
+(REGNUM_YMM11,x86_64::ymm11)
+(REGNUM_YMM12,x86_64::ymm12)
+(REGNUM_YMM13,x86_64::ymm13)
+(REGNUM_YMM14,x86_64::ymm14)
+(REGNUM_YMM15,x86_64::ymm15)
+(REGNUM_YMM16,x86_64::ymm16)
+(REGNUM_YMM17,x86_64::ymm17)
+(REGNUM_YMM18,x86_64::ymm18)
+(REGNUM_YMM19,x86_64::ymm19)
+(REGNUM_YMM20,x86_64::ymm20)
+(REGNUM_YMM21,x86_64::ymm21)
+(REGNUM_YMM22,x86_64::ymm22)
+(REGNUM_YMM23,x86_64::ymm23)
+(REGNUM_YMM24,x86_64::ymm24)
+(REGNUM_YMM25,x86_64::ymm25)
+(REGNUM_YMM26,x86_64::ymm26)
+(REGNUM_YMM27,x86_64::ymm27)
+(REGNUM_YMM28,x86_64::ymm28)
+(REGNUM_YMM29,x86_64::ymm29)
+(REGNUM_YMM30,x86_64::ymm30)
+(REGNUM_YMM31,x86_64::ymm31)
 (REGNUM_XMM0,x86_64::xmm0)
 (REGNUM_XMM1,x86_64::xmm1)
 (REGNUM_XMM2,x86_64::xmm2)
@@ -179,6 +251,22 @@ multimap<Register, MachRegister> regToMachReg64 = map_list_of
 (REGNUM_XMM13,x86_64::xmm13)
 (REGNUM_XMM14,x86_64::xmm14)
 (REGNUM_XMM15,x86_64::xmm15)
+(REGNUM_XMM16,x86_64::xmm16)
+(REGNUM_XMM17,x86_64::xmm17)
+(REGNUM_XMM18,x86_64::xmm18)
+(REGNUM_XMM19,x86_64::xmm19)
+(REGNUM_XMM20,x86_64::xmm20)
+(REGNUM_XMM21,x86_64::xmm21)
+(REGNUM_XMM22,x86_64::xmm22)
+(REGNUM_XMM23,x86_64::xmm23)
+(REGNUM_XMM24,x86_64::xmm24)
+(REGNUM_XMM25,x86_64::xmm25)
+(REGNUM_XMM26,x86_64::xmm26)
+(REGNUM_XMM27,x86_64::xmm27)
+(REGNUM_XMM28,x86_64::xmm28)
+(REGNUM_XMM29,x86_64::xmm29)
+(REGNUM_XMM30,x86_64::xmm30)
+(REGNUM_XMM31,x86_64::xmm31)
 (REGNUM_DUMMYFPR,x86_64::mm0)
 (REGNUM_MM0, x86_64::mm0)
 (REGNUM_MM1, x86_64::mm0)
@@ -204,6 +292,22 @@ multimap<Register, MachRegister> regToMachReg64 = map_list_of
 (REGNUM_IGNORED,x86_64::dr5)
 (REGNUM_IGNORED,x86_64::dr6)
 (REGNUM_IGNORED,x86_64::dr7)
+(REGNUM_YMM0,x86_64::ymm0)
+(REGNUM_YMM1,x86_64::ymm1)
+(REGNUM_YMM2,x86_64::ymm2)
+(REGNUM_YMM3,x86_64::ymm3)
+(REGNUM_YMM4,x86_64::ymm4)
+(REGNUM_YMM5,x86_64::ymm5)
+(REGNUM_YMM6,x86_64::ymm6)
+(REGNUM_YMM7,x86_64::ymm7)
+(REGNUM_YMM8,x86_64::ymm8)
+(REGNUM_YMM9,x86_64::ymm9)
+(REGNUM_YMM10,x86_64::ymm10)
+(REGNUM_YMM11,x86_64::ymm11)
+(REGNUM_YMM12,x86_64::ymm12)
+(REGNUM_YMM13,x86_64::ymm13)
+(REGNUM_YMM14,x86_64::ymm14)
+(REGNUM_YMM15,x86_64::ymm15)
 ;
 
 
@@ -242,6 +346,70 @@ map<MachRegister, Register> reverseRegisterMap = map_list_of
         (x86_64::nt_, REGNUM_NT)
         (x86_64::if_, REGNUM_IF)
         (x86_64::flags, REGNUM_EFLAGS)
+        (x86_64::zmm0, REGNUM_ZMM0)
+        (x86_64::zmm1, REGNUM_ZMM1)
+        (x86_64::zmm2, REGNUM_ZMM2)
+        (x86_64::zmm3, REGNUM_ZMM3)
+        (x86_64::zmm4, REGNUM_ZMM4)
+        (x86_64::zmm5, REGNUM_ZMM5)
+        (x86_64::zmm6, REGNUM_ZMM6)
+        (x86_64::zmm7, REGNUM_ZMM7)
+        (x86_64::zmm8, REGNUM_ZMM8)
+        (x86_64::zmm9, REGNUM_ZMM9)
+        (x86_64::zmm10, REGNUM_ZMM10)
+        (x86_64::zmm11, REGNUM_ZMM11)
+        (x86_64::zmm12, REGNUM_ZMM12)
+        (x86_64::zmm13, REGNUM_ZMM13)
+        (x86_64::zmm14, REGNUM_ZMM14)
+        (x86_64::zmm15, REGNUM_ZMM15)
+        (x86_64::zmm16, REGNUM_ZMM16)
+        (x86_64::zmm17, REGNUM_ZMM17)
+        (x86_64::zmm18, REGNUM_ZMM18)
+        (x86_64::zmm19, REGNUM_ZMM19)
+        (x86_64::zmm20, REGNUM_ZMM20)
+        (x86_64::zmm21, REGNUM_ZMM21)
+        (x86_64::zmm22, REGNUM_ZMM22)
+        (x86_64::zmm23, REGNUM_ZMM23)
+        (x86_64::zmm24, REGNUM_ZMM24)
+        (x86_64::zmm25, REGNUM_ZMM25)
+        (x86_64::zmm26, REGNUM_ZMM26)
+        (x86_64::zmm27, REGNUM_ZMM27)
+        (x86_64::zmm28, REGNUM_ZMM28)
+        (x86_64::zmm29, REGNUM_ZMM29)
+        (x86_64::zmm30, REGNUM_ZMM30)
+        (x86_64::zmm31, REGNUM_ZMM31)
+        (x86_64::ymm0, REGNUM_YMM0)
+        (x86_64::ymm1, REGNUM_YMM1)
+        (x86_64::ymm2, REGNUM_YMM2)
+        (x86_64::ymm3, REGNUM_YMM3)
+        (x86_64::ymm4, REGNUM_YMM4)
+        (x86_64::ymm5, REGNUM_YMM5)
+        (x86_64::ymm6, REGNUM_YMM6)
+        (x86_64::ymm7, REGNUM_YMM7)
+        (x86_64::ymm8, REGNUM_YMM8)
+        (x86_64::ymm9, REGNUM_YMM9)
+        (x86_64::ymm10, REGNUM_YMM10)
+        (x86_64::ymm11, REGNUM_YMM11)
+        (x86_64::ymm12, REGNUM_YMM12)
+        (x86_64::ymm13, REGNUM_YMM13)
+        (x86_64::ymm14, REGNUM_YMM14)
+        (x86_64::ymm15, REGNUM_YMM15)
+        (x86_64::ymm16, REGNUM_YMM16)
+        (x86_64::ymm17, REGNUM_YMM17)
+        (x86_64::ymm18, REGNUM_YMM18)
+        (x86_64::ymm19, REGNUM_YMM19)
+        (x86_64::ymm20, REGNUM_YMM20)
+        (x86_64::ymm21, REGNUM_YMM21)
+        (x86_64::ymm22, REGNUM_YMM22)
+        (x86_64::ymm23, REGNUM_YMM23)
+        (x86_64::ymm24, REGNUM_YMM24)
+        (x86_64::ymm25, REGNUM_YMM25)
+        (x86_64::ymm26, REGNUM_YMM26)
+        (x86_64::ymm27, REGNUM_YMM27)
+        (x86_64::ymm28, REGNUM_YMM28)
+        (x86_64::ymm29, REGNUM_YMM29)
+        (x86_64::ymm30, REGNUM_YMM30)
+        (x86_64::ymm31, REGNUM_YMM31)
         (x86_64::xmm0, REGNUM_XMM0)
         (x86_64::xmm1, REGNUM_XMM1)
         (x86_64::xmm2, REGNUM_XMM2)
@@ -258,6 +426,22 @@ map<MachRegister, Register> reverseRegisterMap = map_list_of
         (x86_64::xmm13, REGNUM_XMM13)
         (x86_64::xmm14, REGNUM_XMM14)
         (x86_64::xmm15, REGNUM_XMM15)
+        (x86_64::xmm16, REGNUM_XMM16)
+        (x86_64::xmm17, REGNUM_XMM17)
+        (x86_64::xmm18, REGNUM_XMM18)
+        (x86_64::xmm19, REGNUM_XMM19)
+        (x86_64::xmm20, REGNUM_XMM20)
+        (x86_64::xmm21, REGNUM_XMM21)
+        (x86_64::xmm22, REGNUM_XMM22)
+        (x86_64::xmm23, REGNUM_XMM23)
+        (x86_64::xmm24, REGNUM_XMM24)
+        (x86_64::xmm25, REGNUM_XMM25)
+        (x86_64::xmm26, REGNUM_XMM26)
+        (x86_64::xmm27, REGNUM_XMM27)
+        (x86_64::xmm28, REGNUM_XMM28)
+        (x86_64::xmm29, REGNUM_XMM29)
+        (x86_64::xmm30, REGNUM_XMM30)
+        (x86_64::xmm31, REGNUM_XMM31)
         (x86_64::mm0, REGNUM_DUMMYFPR)
         (x86_64::mm1, REGNUM_DUMMYFPR)
         (x86_64::mm2, REGNUM_DUMMYFPR)
@@ -290,6 +474,22 @@ map<MachRegister, Register> reverseRegisterMap = map_list_of
         (x86_64::st5, REGNUM_DUMMYFPR)
         (x86_64::st6, REGNUM_DUMMYFPR)
         (x86_64::st7, REGNUM_DUMMYFPR)
+        (x86_64::ymm0, REGNUM_YMM0)
+        (x86_64::ymm1, REGNUM_YMM1)
+        (x86_64::ymm2, REGNUM_YMM2)
+        (x86_64::ymm3, REGNUM_YMM3)
+        (x86_64::ymm4, REGNUM_YMM4)
+        (x86_64::ymm5, REGNUM_YMM5)
+        (x86_64::ymm6, REGNUM_YMM6)
+        (x86_64::ymm7, REGNUM_YMM7)
+        (x86_64::ymm8, REGNUM_YMM8)
+        (x86_64::ymm9, REGNUM_YMM9)
+        (x86_64::ymm10, REGNUM_YMM10)
+        (x86_64::ymm11, REGNUM_YMM11)
+        (x86_64::ymm12, REGNUM_YMM12)
+        (x86_64::ymm13, REGNUM_YMM13)
+        (x86_64::ymm14, REGNUM_YMM14)
+        (x86_64::ymm15, REGNUM_YMM15)
         ;
 
 Register convertRegID(MachRegister reg, bool &wasUpcast) {
diff --git a/external/rose/rose-compat.h b/external/rose/rose-compat.h
index 61ed43b..5c7db71 100644
--- a/external/rose/rose-compat.h
+++ b/external/rose/rose-compat.h
@@ -668,7 +668,10 @@ enum X86RegisterClass {
   x86_regclass_dr, // Numbers are dr0..dr15
   x86_regclass_st, // Numbers are st0..st7
   x86_regclass_mm, // Numbers are mm0..mm7
-  x86_regclass_xmm, // Numbers are xmm0..xmm15
+  x86_regclass_kmask, // Numbers are k0..k7 on x86_64
+  x86_regclass_xmm, // Numbers are xmm0..xmm15 on x86, xmm0..xmm31 on x86_64
+  x86_regclass_ymm, // Numbers are ymm0..ymm31 on x86_64
+  x86_regclass_zmm, // Numbers are zmm0..zmm31 on x86_64
   x86_regclass_ip, // Only value allowed is 0
   x86_regclass_st_top, // Only value allowed is 0
   x86_regclass_flags // Only value allowed is 0
diff --git a/instructionAPI/src/InstructionDecoder-x86.C b/instructionAPI/src/InstructionDecoder-x86.C
index 0193d67..19b2279 100644
--- a/instructionAPI/src/InstructionDecoder-x86.C
+++ b/instructionAPI/src/InstructionDecoder-x86.C
@@ -40,6 +40,8 @@
 #include "BinaryFunction.h"
 #include "common/src/singleton_object_pool.h"
 
+// #define VEX_DEBUG
+
 using namespace std;
 using namespace NS_x86;
 namespace Dyninst
@@ -70,11 +72,15 @@ namespace Dyninst
                     return i == 1 || i == 2;
                 case s1W2W3R: // e.g. les
                     return i == 2;
+                case s1RW2R3RW:
                 case s1RW2R3R: // shld/shrd
                 case s1RW2RW3R: // [i]div, cmpxch8b
                 case s1R2R3R:
                     return i == 0 || i == 1 || i == 2;
-                    break;
+                case s1W2R3R4R:
+                    return i == 1 || i == 2 || i == 3;
+                case s1RW2R3R4R:
+                    return i == 0 || i == 1 || i == 2 || i == 3;
                 case sNONE:
                 default:
                     return false;
@@ -90,21 +96,24 @@ namespace Dyninst
                     return false;
                 case s1RW:
                 case s1W:
-                    case s1W2R:   // second operand read, first operand written (e.g. mov)
-                        case s1RW2R:  // two operands read, first written (e.g. add)
-                            case s1W2R3R: // e.g. imul
-                                case s1RW2R3R: // shld/shrd
-                                    return i == 0;
+                case s1W2R:   // second operand read, first operand written (e.g. mov)
+                case s1RW2R:  // two operands read, first written (e.g. add)
+                case s1W2R3R: // e.g. imul
+                case s1RW2R3R: // shld/shrd
+                case s1RW2R3R4R:
+                  return i == 0;
                 case s1R2RW:
-                    return i == 1;
+                  return i == 1;
                 case s1W2RW:
-                    case s1RW2RW: // e.g. xchg
-                        case s1W2RW3R: // some mul
-                            case s1W2W3R: // e.g. les
-                                case s1RW2RW3R: // [i]div, cmpxch8b
-                                    return i == 0 || i == 1;
-                                    case s1W2R3RW: // (stack) push & pop
-                                        return i == 0 || i == 2;
+                case s1RW2RW: // e.g. xchg
+                case s1W2RW3R: // some mul
+                case s1W2W3R: // e.g. les
+                case s1RW2RW3R: // [i]div, cmpxch8b
+                  return i == 0 || i == 1;
+                case s1W2R3RW: // (stack) push & pop
+                  return i == 0 || i == 2;
+                case s1RW2R3RW:
+                  return i == 0 || i == 2;
                 case sNONE:
                 default:
                     return false;
@@ -430,8 +439,18 @@ namespace Dyninst
         b_32bit,
         b_segment,
         b_64bit,
-        b_xmm,
-        b_xmmhigh,
+        b_xmm_set0, /* XMM0 -> XMM 7 */
+        b_xmm_set1, /* XMM8 -> XMM 15 */
+        b_xmm_set2, /* XMM16 -> XMM 23 */
+        b_xmm_set3, /* XMM24 -> XMM 31 */
+        b_ymm_set0, /* YMM0 -> YMM 7 */
+        b_ymm_set1, /* YMM8 -> YMM 15 */
+        b_ymm_set2, /* YMM16 -> YMM 23 */
+        b_ymm_set3, /* YMM24 -> YMM 31 */
+        b_zmm_set0, /* ZMM0 -> ZMM 7 */
+        b_zmm_set1, /* ZMM8 -> ZMM 15 */
+        b_zmm_set2, /* ZMM16 -> ZMM 23 */
+        b_zmm_set3, /* ZMM24 -> ZMM 31 */
         b_mm,
         b_cr,
         b_dr,
@@ -439,108 +458,68 @@ namespace Dyninst
         b_amd64ext,
         b_8bitWithREX,
         b_fpstack,
-	amd64_ext_8,
-	amd64_ext_16,
-	amd64_ext_32,
+	    amd64_ext_8,
+	    amd64_ext_16,
+	    amd64_ext_32,
+
+        b_invalid /* should remain the final entry */
     };
-    static MachRegister IntelRegTable32[][8] = {
-        {
-            x86::al, x86::cl, x86::dl, x86::bl, x86::ah, x86::ch, x86::dh, x86::bh
-        },
-        {
-            x86::ax, x86::cx, x86::dx, x86::bx, x86::sp, x86::bp, x86::si, x86::di
-        },
-        {
-            x86::eax, x86::ecx, x86::edx, x86::ebx, x86::esp, x86::ebp, x86::esi, x86::edi
-        },
-        {
-           x86::es, x86::cs, x86::ss, x86::ds, x86::fs, x86::gs, InvalidReg, InvalidReg
-        },
-        {
-            x86_64::rax, x86_64::rcx, x86_64::rdx, x86_64::rbx, x86_64::rsp, x86_64::rbp, x86_64::rsi, x86_64::rdi
-        },
-        {
-            x86::xmm0, x86::xmm1, x86::xmm2, x86::xmm3, x86::xmm4, x86::xmm5, x86::xmm6, x86::xmm7
-        },
-        {
-            x86_64::xmm8, x86_64::xmm9, x86_64::xmm10, x86_64::xmm11, x86_64::xmm12, x86_64::xmm13, x86_64::xmm14, x86_64::xmm15
-        },
-        {
-            x86::mm0, x86::mm1, x86::mm2, x86::mm3, x86::mm4, x86::mm5, x86::mm6, x86::mm7
-        },
-        {
-            x86::cr0, x86::cr1, x86::cr2, x86::cr3, x86::cr4, x86::cr5, x86::cr6, x86::cr7
-        },
-        {
-            x86::dr0, x86::dr1, x86::dr2, x86::dr3, x86::dr4, x86::dr5, x86::dr6, x86::dr7
-        },
-        {
-            x86::tr0, x86::tr1, x86::tr2, x86::tr3, x86::tr4, x86::tr5, x86::tr6, x86::tr7
-        },
-        {
-            x86_64::r8, x86_64::r9, x86_64::r10, x86_64::r11, x86_64::r12, x86_64::r13, x86_64::r14, x86_64::r15
-        },
-        {
-            x86_64::al, x86_64::cl, x86_64::dl, x86_64::bl, x86_64::spl, x86_64::bpl, x86_64::sil, x86_64::dil
-        },
-        {
-            x86::st0, x86::st1, x86::st2, x86::st3, x86::st4, x86::st5, x86::st6, x86::st7
-        }
 
+    static MachRegister IntelRegTable32[][8] = {
+        { x86::al, x86::cl, x86::dl, x86::bl, x86::ah, x86::ch, x86::dh, x86::bh }, /* b_8bitNoREX */
+        { x86::ax, x86::cx, x86::dx, x86::bx, x86::sp, x86::bp, x86::si, x86::di }, /* b_16bit */
+        { x86::eax, x86::ecx, x86::edx, x86::ebx, x86::esp, x86::ebp, x86::esi, x86::edi }, /* b_32bit */
+        { x86::es, x86::cs, x86::ss, x86::ds, x86::fs, x86::gs, InvalidReg, InvalidReg }, /* b_segment */
+        { x86_64::rax, x86_64::rcx, x86_64::rdx, x86_64::rbx, x86_64::rsp, x86_64::rbp, x86_64::rsi, x86_64::rdi }, /* b_64bit */
+        { x86::xmm0, x86::xmm1, x86::xmm2, x86::xmm3, x86::xmm4, x86::xmm5, x86::xmm6, x86::xmm7 }, /* b_xmm_set0 */
+        { x86_64::xmm8, x86_64::xmm9, x86_64::xmm10, x86_64::xmm11, x86_64::xmm12, x86_64::xmm13, x86_64::xmm14, x86_64::xmm15 }, /* b_xmm_set1 */
+        { x86_64::xmm16, x86_64::xmm17, x86_64::xmm18, x86_64::xmm19, x86_64::xmm20, x86_64::xmm21, x86_64::xmm22, x86_64::xmm23 }, /* b_xmm_set2 */
+        { x86_64::xmm24, x86_64::xmm25, x86_64::xmm26, x86_64::xmm27, x86_64::xmm28, x86_64::xmm29, x86_64::xmm30, x86_64::xmm31 }, /* b_xmm_set3 */
+        { x86_64::ymm0, x86_64::ymm1, x86_64::ymm2, x86_64::ymm3, x86_64::ymm4, x86_64::ymm5, x86_64::ymm6, x86_64::ymm7 }, /* b_ymm_set0 */
+        { x86_64::ymm8, x86_64::ymm9, x86_64::ymm10, x86_64::ymm11, x86_64::ymm12, x86_64::ymm13, x86_64::ymm14, x86_64::ymm15 }, /* b_ymm_set1 */
+        { x86_64::ymm16, x86_64::ymm17, x86_64::ymm18, x86_64::ymm19, x86_64::ymm20, x86_64::ymm21, x86_64::ymm22, x86_64::ymm23 }, /* b_ymm_set2 */
+        { x86_64::ymm24, x86_64::ymm25, x86_64::ymm26, x86_64::ymm27, x86_64::ymm28, x86_64::ymm29, x86_64::ymm30, x86_64::ymm31 }, /* b_ymm_set3 */
+        { x86_64::zmm0, x86_64::zmm1, x86_64::zmm2, x86_64::zmm3, x86_64::zmm4, x86_64::zmm5, x86_64::zmm6, x86_64::zmm7 }, /* b_zmm_set0 */
+        { x86_64::zmm8, x86_64::zmm9, x86_64::zmm10, x86_64::zmm11, x86_64::zmm12, x86_64::zmm13, x86_64::zmm14, x86_64::zmm15 }, /* b_zmm_set1 */
+        { x86_64::zmm16, x86_64::zmm17, x86_64::zmm18, x86_64::zmm19, x86_64::zmm20, x86_64::zmm21, x86_64::zmm22, x86_64::zmm23 }, /* b_zmm_set2 */
+        { x86_64::zmm24, x86_64::zmm25, x86_64::zmm26, x86_64::zmm27, x86_64::zmm28, x86_64::zmm29, x86_64::zmm30, x86_64::zmm31 }, /* b_zmm_set3 */
+        { x86::mm0, x86::mm1, x86::mm2, x86::mm3, x86::mm4, x86::mm5, x86::mm6, x86::mm7 },
+        { x86::cr0, x86::cr1, x86::cr2, x86::cr3, x86::cr4, x86::cr5, x86::cr6, x86::cr7 },
+        { x86::dr0, x86::dr1, x86::dr2, x86::dr3, x86::dr4, x86::dr5, x86::dr6, x86::dr7 },
+        { x86::tr0, x86::tr1, x86::tr2, x86::tr3, x86::tr4, x86::tr5, x86::tr6, x86::tr7 },
+        { x86_64::r8, x86_64::r9, x86_64::r10, x86_64::r11, x86_64::r12, x86_64::r13, x86_64::r14, x86_64::r15 },
+        { x86_64::al, x86_64::cl, x86_64::dl, x86_64::bl, x86_64::spl, x86_64::bpl, x86_64::sil, x86_64::dil },
+        { x86::st0, x86::st1, x86::st2, x86::st3, x86::st4, x86::st5, x86::st6, x86::st7 }
     };
-    static MachRegister IntelRegTable64[][8] = {
-        {
-            x86_64::al, x86_64::cl, x86_64::dl, x86_64::bl, x86_64::ah, x86_64::ch, x86_64::dh, x86_64::bh
-        },
-        {
-            x86_64::ax, x86_64::cx, x86_64::dx, x86_64::bx, x86_64::sp, x86_64::bp, x86_64::si, x86_64::di
-        },
-        {
-            x86_64::eax, x86_64::ecx, x86_64::edx, x86_64::ebx, x86_64::esp, x86_64::ebp, x86_64::esi, x86_64::edi
-        },
-        {
-            x86_64::es, x86_64::cs, x86_64::ss, x86_64::ds, x86_64::fs, x86_64::gs, InvalidReg, InvalidReg
-        },
-        {
-            x86_64::rax, x86_64::rcx, x86_64::rdx, x86_64::rbx, x86_64::rsp, x86_64::rbp, x86_64::rsi, x86_64::rdi
-        },
-        {
-            x86_64::xmm0, x86_64::xmm1, x86_64::xmm2, x86_64::xmm3, x86_64::xmm4, x86_64::xmm5, x86_64::xmm6, x86_64::xmm7
-        },
-        {
-            x86_64::xmm8, x86_64::xmm9, x86_64::xmm10, x86_64::xmm11, x86_64::xmm12, x86_64::xmm13, x86_64::xmm14, x86_64::xmm15
-        },
-        {
-            x86_64::mm0, x86_64::mm1, x86_64::mm2, x86_64::mm3, x86_64::mm4, x86_64::mm5, x86_64::mm6, x86_64::mm7
-        },
-        {
-            x86_64::cr0, x86_64::cr1, x86_64::cr2, x86_64::cr3, x86_64::cr4, x86_64::cr5, x86_64::cr6, x86_64::cr7
-        },
-        {
-            x86_64::dr0, x86_64::dr1, x86_64::dr2, x86_64::dr3, x86_64::dr4, x86_64::dr5, x86_64::dr6, x86_64::dr7
-        },
-        {
-            x86_64::tr0, x86_64::tr1, x86_64::tr2, x86_64::tr3, x86_64::tr4, x86_64::tr5, x86_64::tr6, x86_64::tr7
-        },
-        {
-            x86_64::r8, x86_64::r9, x86_64::r10, x86_64::r11, x86_64::r12, x86_64::r13, x86_64::r14, x86_64::r15
-        },
-        {
-            x86_64::al, x86_64::cl, x86_64::dl, x86_64::bl, x86_64::spl, x86_64::bpl, x86_64::sil, x86_64::dil
-        },
-        {
-            x86_64::st0, x86_64::st1, x86_64::st2, x86_64::st3, x86_64::st4, x86_64::st5, x86_64::st6, x86_64::st7
-        },
-	{
-	    x86_64::r8b, x86_64::r9b, x86_64::r10b, x86_64::r11b, x86_64::r12b, x86_64::r13b, x86_64::r14b, x86_64::r15b 
-	},
-	{
-	    x86_64::r8w, x86_64::r9w, x86_64::r10w, x86_64::r11w, x86_64::r12w, x86_64::r13w, x86_64::r14w, x86_64::r15w 
-	},
-	{
-	    x86_64::r8d, x86_64::r9d, x86_64::r10d, x86_64::r11d, x86_64::r12d, x86_64::r13d, x86_64::r14d, x86_64::r15d 
-	}
 
+    static MachRegister IntelRegTable64[][8] = {
+        { x86_64::al, x86_64::cl, x86_64::dl, x86_64::bl, x86_64::ah, x86_64::ch, x86_64::dh, x86_64::bh },
+        { x86_64::ax, x86_64::cx, x86_64::dx, x86_64::bx, x86_64::sp, x86_64::bp, x86_64::si, x86_64::di },
+        { x86_64::eax, x86_64::ecx, x86_64::edx, x86_64::ebx, x86_64::esp, x86_64::ebp, x86_64::esi, x86_64::edi },
+        { x86_64::es, x86_64::cs, x86_64::ss, x86_64::ds, x86_64::fs, x86_64::gs, InvalidReg, InvalidReg },
+        { x86_64::rax, x86_64::rcx, x86_64::rdx, x86_64::rbx, x86_64::rsp, x86_64::rbp, x86_64::rsi, x86_64::rdi },
+        { x86_64::xmm0, x86_64::xmm1, x86_64::xmm2, x86_64::xmm3, x86_64::xmm4, x86_64::xmm5, x86_64::xmm6, x86_64::xmm7 }, /* b_xmm_set0 */
+        { x86_64::xmm8, x86_64::xmm9, x86_64::xmm10, x86_64::xmm11, x86_64::xmm12, x86_64::xmm13, x86_64::xmm14, x86_64::xmm15 }, /* b_xmm_set1 */
+        { x86_64::xmm16, x86_64::xmm17, x86_64::xmm18, x86_64::xmm19, x86_64::xmm20, x86_64::xmm21, x86_64::xmm22, x86_64::xmm23 }, /* b_xmm_set2 */
+        { x86_64::xmm24, x86_64::xmm25, x86_64::xmm26, x86_64::xmm27, x86_64::xmm28, x86_64::xmm29, x86_64::xmm30, x86_64::xmm31 }, /* b_xmm_set3 */
+        { x86_64::ymm0, x86_64::ymm1, x86_64::ymm2, x86_64::ymm3, x86_64::ymm4, x86_64::ymm5, x86_64::ymm6, x86_64::ymm7 }, /* b_ymm_set0 */
+        { x86_64::ymm8, x86_64::ymm9, x86_64::ymm10, x86_64::ymm11, x86_64::ymm12, x86_64::ymm13, x86_64::ymm14, x86_64::ymm15 }, /* b_ymm_set1 */
+        { x86_64::ymm16, x86_64::ymm17, x86_64::ymm18, x86_64::ymm19, x86_64::ymm20, x86_64::ymm21, x86_64::ymm22, x86_64::ymm23 }, /* b_ymm_set2 */
+        { x86_64::ymm24, x86_64::ymm25, x86_64::ymm26, x86_64::ymm27, x86_64::ymm28, x86_64::ymm29, x86_64::ymm30, x86_64::ymm31 }, /* b_ymm_set3 */
+        { x86_64::zmm0, x86_64::zmm1, x86_64::zmm2, x86_64::zmm3, x86_64::zmm4, x86_64::zmm5, x86_64::zmm6, x86_64::zmm7 }, /* b_zmm_set0 */
+        { x86_64::zmm8, x86_64::zmm9, x86_64::zmm10, x86_64::zmm11, x86_64::zmm12, x86_64::zmm13, x86_64::zmm14, x86_64::zmm15 }, /* b_zmm_set1 */
+        { x86_64::zmm16, x86_64::zmm17, x86_64::zmm18, x86_64::zmm19, x86_64::zmm20, x86_64::zmm21, x86_64::zmm22, x86_64::zmm23 }, /* b_zmm_set2 */
+        { x86_64::zmm24, x86_64::zmm25, x86_64::zmm26, x86_64::zmm27, x86_64::zmm28, x86_64::zmm29, x86_64::zmm30, x86_64::zmm31 }, /* b_zmm_set3 */
+        { x86_64::mm0, x86_64::mm1, x86_64::mm2, x86_64::mm3, x86_64::mm4, x86_64::mm5, x86_64::mm6, x86_64::mm7 },
+        { x86_64::cr0, x86_64::cr1, x86_64::cr2, x86_64::cr3, x86_64::cr4, x86_64::cr5, x86_64::cr6, x86_64::cr7 },
+        { x86_64::dr0, x86_64::dr1, x86_64::dr2, x86_64::dr3, x86_64::dr4, x86_64::dr5, x86_64::dr6, x86_64::dr7 },
+        { x86_64::tr0, x86_64::tr1, x86_64::tr2, x86_64::tr3, x86_64::tr4, x86_64::tr5, x86_64::tr6, x86_64::tr7 },
+        { x86_64::r8, x86_64::r9, x86_64::r10, x86_64::r11, x86_64::r12, x86_64::r13, x86_64::r14, x86_64::r15 },
+        { x86_64::al, x86_64::cl, x86_64::dl, x86_64::bl, x86_64::spl, x86_64::bpl, x86_64::sil, x86_64::dil },
+        { x86_64::st0, x86_64::st1, x86_64::st2, x86_64::st3, x86_64::st4, x86_64::st5, x86_64::st6, x86_64::st7 },
+	    { x86_64::r8b, x86_64::r9b, x86_64::r10b, x86_64::r11b, x86_64::r12b, x86_64::r13b, x86_64::r14b, x86_64::r15b },
+	    { x86_64::r8w, x86_64::r9w, x86_64::r10w, x86_64::r11w, x86_64::r12w, x86_64::r13w, x86_64::r14w, x86_64::r15w },
+	    { x86_64::r8d, x86_64::r9d, x86_64::r10d, x86_64::r11d, x86_64::r12d, x86_64::r13d, x86_64::r14d, x86_64::r15d },
     };
 
   /* Uses the appropriate lookup table based on the 
@@ -734,6 +713,7 @@ namespace Dyninst
                     return u32;
                 }
             case op_dq:
+            case op_qq:
                 return u64;
             case op_512:
                 return m512;
@@ -755,114 +735,331 @@ namespace Dyninst
         }
     }
 
+    enum AVX_Regtype { AVX_XMM = 0, AVX_YMM, AVX_ZMM, AVX_NONE };
+    #define AVX_TYPE_OKAY(type) ((type) >= AVX_XMM && (type) <= AVX_ZMM)
+    /** 
+     * Decode an avx register based on the type of prefix. Returns true if the
+     * given configuration is invalid and should be rejected.
+     */
+    bool decodeAVX(intelRegBanks& bank, int* bank_index, int regnum, AVX_Regtype type, ia32_prefixes& pref, unsigned int admet)
+    {
+
+        /* Check to see if this is just a normal MMX register access */
+        if(type >= AVX_NONE || type < 0)
+        {
+#ifdef VEX_DEBUG
+            printf("VEX OPERAND:  REGNUM: %d  ", regnum);
+            printf("REG_TYPE: AVX_NONE (%d)\n", type);
+#endif
+            /* Only registers XMM0 - XMM15 are usable */
+
+            /* The register must be valid */
+            if(regnum < 0) 
+                return true;
+
+            if(regnum < 8)
+            {
+                bank = b_xmm_set0;
+                *bank_index = regnum;
+            } else if(regnum < 16)
+            {
+                bank = b_xmm_set1;
+                *bank_index = regnum - 8;
+            } else {
+                /* Value is out of the valid range */
+                return true;
+            }
+
+            /* Return success */
+            return false;
+        }
+
+        switch(admet)
+        {
+            case am_V: case am_YV: case am_XV:
+                switch(pref.vex_type)
+                {
+                    case VEX_TYPE_EVEX:
+                        regnum |= pref.vex_R << 4;
+                        regnum |= pref.vex_r << 3;
+                        break;
+                    default:break;
+                }
+                break;
+            case am_U: case am_YU: case am_XU:
+            case am_W: case am_YW: case am_XW:
+                switch(pref.vex_type)
+                {
+                    case VEX_TYPE_EVEX:
+                        regnum |= pref.vex_x << 4;
+                        regnum |= pref.vex_b << 3;
+                        break;
+                    default: break;
+                }
+                break;
+            default: break;
+        }
+#ifdef VEX_DEBUG
+        printf("VEX OPERAND:  REGNUM: %d  ", regnum);
+#endif
+
+        /* Operand is potentially XMM, YMM or ZMM */
+        int setnum = 0;
+        if(regnum < 8)
+        {
+            setnum = 0;
+            *bank_index = regnum;
+        } else if(regnum < 16)
+        {
+            setnum = 1;
+            *bank_index = regnum - 8;
+        } else if(regnum < 24)
+        {
+            setnum = 2;
+            *bank_index = regnum - 16;
+        } else if(regnum < 32){
+            setnum = 3;
+            *bank_index = regnum - 24;
+        } else {
+#ifdef VEX_DEBUG
+            printf("AVX REGISTER NUMBER:   %d   is invalid!!\n", regnum);
+#endif
+            return false;
+        }
+
+        switch(type)
+        {
+            case AVX_XMM:
+#ifdef VEX_DEBUG
+                printf("REG_TYPE: AVX_XMM (%d)\n", type);
+#endif
+                if(setnum == 0)
+                    bank = b_xmm_set0;
+                else if(setnum == 1)
+                    bank = b_xmm_set1;
+                else if(setnum == 2)
+                    bank = b_xmm_set2;
+                else if(setnum == 3)
+                    bank = b_xmm_set3;
+                else return true;
+                break;
+            case AVX_YMM:
+#ifdef VEX_DEBUG
+                printf("REG_TYPE: AVX_YMM (%d)\n", type);
+#endif
+                if(setnum == 0)
+                    bank = b_ymm_set0;
+                else if(setnum == 1)
+                    bank = b_ymm_set1;
+                else if(setnum == 2)
+                    bank = b_ymm_set2;
+                else if(setnum == 3)
+                    bank = b_ymm_set3;
+                else return true;
+                break;
+            case AVX_ZMM:
+#ifdef VEX_DEBUG
+                printf("REG_TYPE: AVX_ZMM (%d)\n", type);
+#endif
+                if(setnum == 0)
+                    bank = b_zmm_set0;
+                else if(setnum == 1)
+                    bank = b_zmm_set1;
+                else if(setnum == 2)
+                    bank = b_zmm_set2;
+                else if(setnum == 3)
+                    bank = b_zmm_set3;
+                else return true;
+                break;
+            default:
+                return true;
+        }
+
+        /* Return Success */
+        return false;
+    }
 
     bool InstructionDecoder_x86::decodeOneOperand(const InstructionDecoder::buffer& b,
 						  const ia32_operand& operand,
 						  int & imm_index, /* immediate operand index */
-						  const Instruction* insn_to_complete, 
-						  bool isRead, bool isWritten)
+						  const Instruction* insn_to_complete, bool isRead, bool isWritten)
     {
-       bool isCFT = false;
-      bool isCall = false;
-      bool isConditional = false;
-      InsnCategory cat = insn_to_complete->getCategory();
-      if(cat == c_BranchInsn || cat == c_CallInsn)
-	{
-	  isCFT = true;
-	  if(cat == c_CallInsn)
+        bool isCFT = false;
+        bool isCall = false;
+        bool isConditional = false;
+        InsnCategory cat = insn_to_complete->getCategory();
+
+        if(cat == c_BranchInsn || cat == c_CallInsn)
 	    {
-	      isCall = true;
+            isCFT = true;
+            if(cat == c_CallInsn)
+            {
+                isCall = true;
+            }
 	    }
-	}
-      if (cat == c_BranchInsn && insn_to_complete->getOperation().getID() != e_jmp) {
-	isConditional = true;
-      }
 
-      unsigned int optype = operand.optype;
-      if (sizePrefixPresent && 
-	  ((optype == op_v) ||
-	   (optype == op_z)) &&
-	  (operand.admet != am_J)) {
-	optype = op_w;
-      }
-      if(optype == op_y) {
-    	  if(ia32_is_mode_64() && locs->rex_w)
-    		  optype = op_q;
-    	  else
-    		  optype = op_d;
-      }
-                switch(operand.admet)
+        if(cat == c_BranchInsn && insn_to_complete->getOperation().getID() != e_jmp) 
+        {
+	        isConditional = true;
+        }
+
+        /* There must be a preliminary decoded instruction */
+        if(!decodedInstruction)
+            assert(!"No decoded instruction!\n");
+
+        unsigned int optype = operand.optype;
+        AVX_Regtype avx_type = AVX_NONE; /* The AVX register type (if VEX prefixed) */
+        intelRegBanks bank = b_invalid; /* Specifies an AVX bank to use for register decoding */
+        int bank_index = -1; /* Specifies a bank index for an AVX register */
+        ia32_prefixes& pref = *decodedInstruction->getPrefix();
+        int regnum; /* Used to keep track of some register positions */
+
+        if(pref.vex_present)
+        {
+            /* Get the AVX type from the prefix */
+            avx_type = (AVX_Regtype)pref.vex_ll;
+        }
+
+        if (sizePrefixPresent && ((optype == op_v) 
+                || (optype == op_z)) && (operand.admet != am_J)) 
+        {
+            optype = op_w;
+        }
+
+        if(optype == op_y) 
+        {
+            if(ia32_is_mode_64() && locs->rex_w)
+            {
+                optype = op_q;
+    	    } else {
+                optype = op_d;
+            }
+        }
+     
+        switch(operand.admet)
+        {
+            case 0:
+                // No operand
+                assert(!"Mismatched number of operands--check tables");
+                return false;
+            case am_A:
                 {
-                    case 0:
-                    // No operand
-                    {
-/*                        fprintf(stderr, "ERROR: Instruction with mismatched operands. Raw bytes: ");
-                        for(unsigned int i = 0; i < decodedInstruction->getSize(); i++) {
-                            fprintf(stderr, "%x ", b.start[i]);
-                        }
-                        fprintf(stderr, "\n");*/
-                        assert(!"Mismatched number of operands--check tables");
-                        return false;
-                    }
-                    case am_A:
-                    {
-                        // am_A only shows up as a far call/jump.  Position 1 should be universally safe.
-                        Expression::Ptr addr(decodeImmediate(optype, b.start + 1));
-                        insn_to_complete->addSuccessor(addr, isCall, false, false, false);
-                    }
-                    break;
-                    case am_C:
-                    {
-                        Expression::Ptr op(makeRegisterExpression(IntelRegTable(m_Arch,b_cr,locs->modrm_reg)));
-                        insn_to_complete->appendOperand(op, isRead, isWritten);
-                    }
-                    break;
-                    case am_D:
-                    {
-                        Expression::Ptr op(makeRegisterExpression(IntelRegTable(m_Arch,b_dr,locs->modrm_reg)));
-                        insn_to_complete->appendOperand(op, isRead, isWritten);
-                    }
-                    break;
-                    case am_E:
-                    // am_M is like am_E, except that mod of 0x03 should never occur (am_M specified memory,
-                    // mod of 0x03 specifies direct register access).
-                    case am_M:
-                    // am_R is the inverse of am_M; it should only have a mod of 3
-                    case am_R:
-                    // can be am_R or am_M	
-                    case am_RM:	
-                        if(isCFT)
-                        {
-			  insn_to_complete->addSuccessor(makeModRMExpression(b, optype), isCall, true, false, false);
-                        }
-                        else
-                        {
-			  insn_to_complete->appendOperand(makeModRMExpression(b, optype), isRead, isWritten);
-                        }
-                    break;
-                    case am_F:
-                    {
-                        Expression::Ptr op(makeRegisterExpression(x86::flags));
-                        insn_to_complete->appendOperand(op, isRead, isWritten);
-                    }
-                    break;
-                    case am_G:
-                    {
-                        Expression::Ptr op(makeRegisterExpression(makeRegisterID(locs->modrm_reg,
-                                optype, locs->rex_r)));
-                        insn_to_complete->appendOperand(op, isRead, isWritten);
-                    }
-                    break;
+                    // am_A only shows up as a far call/jump.  
+                    // Position 1 should be universally safe.
+                    Expression::Ptr addr(decodeImmediate(optype, b.start + 1));
+                    insn_to_complete->addSuccessor(addr, isCall, false, false, false);
+                }
+                break;
+
+            case am_C:
+                {
+                    Expression::Ptr op(makeRegisterExpression(
+                            IntelRegTable(m_Arch,b_cr,locs->modrm_reg)));
+                    insn_to_complete->appendOperand(op, isRead, isWritten);
+                }
+                break;
+
+            case am_D:
+                {
+                    Expression::Ptr op(makeRegisterExpression(
+                                IntelRegTable(m_Arch,b_dr,locs->modrm_reg)));
+                    insn_to_complete->appendOperand(op, isRead, isWritten);
+                }
+                break;
+
+            case am_E:
+                // am_M is like am_E, except that mod of 0x03 should 
+                // never occur (am_M specified memory,
+                // mod of 0x03 specifies direct register access).
+            case am_M:
+                // am_R is the inverse of am_M; it should only have a mod of 3
+            case am_R:
+                // can be am_R or am_M	
+            case am_RM:	
+                if(isCFT)
+                {
+                    insn_to_complete->addSuccessor(
+                            makeModRMExpression(b, optype), 
+                            isCall, true, false, false);
+                } else {
+                    insn_to_complete->appendOperand(
+                            makeModRMExpression(b, optype), 
+                            isRead, isWritten);
+                }
+                break;
+
+            case am_F:
+                {
+                    Expression::Ptr op(makeRegisterExpression(x86::flags));
+                    insn_to_complete->appendOperand(op, isRead, isWritten);
+                }
+                break;
+
+            case am_G:
+                {
+                    Expression::Ptr op(makeRegisterExpression(
+                            makeRegisterID(locs->modrm_reg, optype, locs->rex_r)));
+                    insn_to_complete->appendOperand(op, isRead, isWritten);
+                }
+                break;
+
+            case am_H: /* Could be XMM, YMM or ZMM */
+                /* Make sure this register class is valid for VEX */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+
+                /* Grab the correct bank and bank index for this type of register */
+                if(decodeAVX(bank, &bank_index, pref.vex_vvvv_reg, avx_type, pref, operand.admet))
+                    return false;
+
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(
+                        IntelRegTable(m_Arch, bank, bank_index)), 
+                        isRead, isWritten);
+                break;
+
+            case am_XH: /* Must be XMM */
+                /* Make sure we are using a valid VEX register class */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+
+                /* Constrain register type to only the XMM banks */
+                avx_type = AVX_XMM;
+
+                /* Grab the correct bank and bank index for this type of register */
+                if(decodeAVX(bank, &bank_index, pref.vex_vvvv_reg, avx_type, pref, operand.admet))
+                    return false;
+
+                insn_to_complete->appendOperand(makeRegisterExpression(
+                        IntelRegTable(m_Arch, bank, bank_index)), 
+                        isRead, isWritten);
+                break;
+
+            case am_YH: /* Could be XMM or YMM */
+                /* Make sure we are using a valid VEX register class */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+
+                /* Constrain to only XMM or YMM registers */
+                if(avx_type != AVX_XMM && avx_type != AVX_YMM)
+                    avx_type = AVX_YMM;
+
+                /* Grab the correct bank and bank index for this type of register */
+                if(decodeAVX(bank, &bank_index, pref.vex_vvvv_reg, avx_type, pref, operand.admet))
+                    return false;
+
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(
+                        IntelRegTable(m_Arch, bank, bank_index)), 
+                        isRead, isWritten);
+                break;
+
                     case am_I:
-                        insn_to_complete->appendOperand(decodeImmediate(optype, b.start + 
-									locs->imm_position[imm_index++]), 
-							isRead, isWritten);
+                insn_to_complete->appendOperand(decodeImmediate(optype, b.start + locs->imm_position[imm_index++]), isRead, isWritten);
                         break;
                     case am_J:
                     {
-                        Expression::Ptr Offset(decodeImmediate(optype, 
-							       b.start + locs->imm_position[imm_index++], 
-							       true));
+                    Expression::Ptr Offset(decodeImmediate(optype, b.start + locs->imm_position[imm_index++], true));
                         Expression::Ptr EIP(makeRegisterExpression(MachRegister::getPC(m_Arch)));
                         Expression::Ptr InsnSize(make_shared(singleton_object_pool<Immediate>::construct(Result(u8,
                             decodedInstruction->getSize()))));
@@ -871,8 +1068,10 @@ namespace Dyninst
                         Expression::Ptr op(makeAddExpression(Offset, postEIP, u32));
                         insn_to_complete->addSuccessor(op, isCall, false, isConditional, false);
 			if (isConditional) 
+                    {
 			  insn_to_complete->addSuccessor(postEIP, false, false, true, true);
                     }
+                }
                     break;
                     case am_O:
                     {
@@ -893,9 +1092,11 @@ namespace Dyninst
                             case 0:
 				if(m_Arch == Arch_x86_64) {
 				    if(!addrSizePrefixPresent)
+                                {
 					pseudoOpType = op_q;
-				    else
+                                } else {
 					pseudoOpType = op_d;
+                                }
 				} else {
 				    pseudoOpType = op_v;
 				}
@@ -906,10 +1107,8 @@ namespace Dyninst
                                 break;
                         }
 
-
                         int offset_position = locs->opcode_position;
-                        if(locs->modrm_position > offset_position && locs->modrm_operand <
-                           (int)(insn_to_complete->m_Operands.size()))
+                    if(locs->modrm_position > offset_position && locs->modrm_operand < (int)(insn_to_complete->m_Operands.size()))
                         {
                             offset_position = locs->modrm_position;
                         }
@@ -919,16 +1118,13 @@ namespace Dyninst
                         }
                         offset_position++;
                         insn_to_complete->appendOperand(makeDereferenceExpression(
-                                decodeImmediate(pseudoOpType, b.start + offset_position), makeSizeType(optype)), 
-							isRead, isWritten);
+                    decodeImmediate(pseudoOpType, b.start + offset_position), makeSizeType(optype)), isRead, isWritten);
                     }
                     break;
                     case am_P:
-                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_mm,locs->modrm_reg)),
-                                isRead, isWritten);
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_mm,locs->modrm_reg)), isRead, isWritten);
                         break;
                     case am_Q:
-        
                         switch(locs->modrm_mod)
                         {
                             // direct dereference
@@ -939,24 +1135,21 @@ namespace Dyninst
                                 break;
                             case 0x03:
                                 // use of actual register
-                                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_mm,locs->modrm_rm)),
-                                                               isRead, isWritten);
+                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_mm,locs->modrm_rm)), isRead, isWritten);
                                 break;
                             default:
                                 assert(!"2-bit value modrm_mod out of range");
                                 break;
-                        };
+                }
                         break;
                     case am_S:
                     // Segment register in modrm reg field.
-                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_segment,locs->modrm_reg)),
-                                isRead, isWritten);
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_segment,locs->modrm_reg)), isRead, isWritten);
                         break;
                     case am_T:
                         // test register in modrm reg; should only be tr6/tr7, but we'll decode any of them
                         // NOTE: this only appears in deprecated opcodes
-                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_tr,locs->modrm_reg)),
-                                                       isRead, isWritten);
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,b_tr,locs->modrm_reg)), isRead, isWritten);
                         break;
                     case am_UM:
                     	switch(locs->modrm_mod)
@@ -965,50 +1158,198 @@ namespace Dyninst
                     	case 0x00:
                     	case 0x01:
                     	case 0x02:
-                    		insn_to_complete->appendOperand(makeModRMExpression(b, makeSizeType(optype)),
-                    				isRead, isWritten);
+                        insn_to_complete->appendOperand(makeModRMExpression(b, makeSizeType(optype)), isRead, isWritten);
                     		break;
                     	case 0x03:
                     		// use of actual register
-                    		{
-                    			insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,
-                    					locs->rex_b ? b_xmmhigh : b_xmm, locs->modrm_rm)),
-                    					isRead, isWritten);
+                        decodeAVX(bank, &bank_index, locs->modrm_rm, AVX_XMM, pref, operand.admet);
+                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
                     			break;
-                    		}
                     	default:
                     		assert(!"2-bit value modrm_mod out of range");
                     		break;
-                    	};
+                }
+          
                     	break;
-                    case am_V:
+            case am_V: /* Could be XMM, YMM or ZMM (possibly non VEX)*/
+                /* Is this a vex prefixed instruction? */  
+                if(pref.vex_present && !AVX_TYPE_OKAY(avx_type))
+                    return false;
+
+                /* Get the base register number */
+                regnum = locs->modrm_reg;
+
+                /* Get the register bank and the index */
+                if(decodeAVX(bank, &bank_index, regnum, avx_type, pref, operand.admet))
+                    return false;
+    
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                break;
+            case am_XV: /* Must be XMM (must be VEX) */
+                
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+                
+                regnum = locs->modrm_reg;
+
+                /* Get the register bank and the index */
+                if(decodeAVX(bank, &bank_index, regnum, avx_type, pref, operand.admet))
+                    return false;
+  
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                break;
+            case am_YV: /* Must be XMM or YMM (must be VEX) */
+                /* Make sure this register class is valid */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+
+                regnum = locs->modrm_reg;
+
+                /* Constrain to either XMM or YMM registers */
+                if(avx_type != AVX_XMM && avx_type != AVX_YMM)
+                    avx_type = AVX_YMM;
+
+                /* Get the register bank and index */
+                if(decodeAVX(bank, &bank_index, regnum, avx_type, pref, operand.admet))
+                    return false;
                        
-                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,
-                                locs->rex_r ? b_xmmhigh : b_xmm,locs->modrm_reg)),
-                                    isRead, isWritten);
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
                         break;
-                    case am_W:
+            case am_U: /* Could be XMM, YMM, or ZMM (or possibly non VEX)*/
+
+                /* Is this a vex prefixed instruction? */  
+                if(pref.vex_present)
+                {
+                    if(!AVX_TYPE_OKAY(avx_type))
+                        return false;
+                }
+
+                /* Grab the register bank and index */
+                if(decodeAVX(bank, &bank_index, locs->modrm_rm, AVX_XMM, pref, operand.admet))
+                    return false;
+
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                break;
+            case am_XU: /* Must be XMM (must be VEX) */
+                /* Make sure this register class is valid */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+  
+                /* Constrain register to XMM banks only */        
+                avx_type = AVX_XMM;
+
+                /* Get the register bank and index for this register */
+                if(decodeAVX(bank, &bank_index, locs->modrm_rm, avx_type, pref, operand.admet))
+                    return false;
+
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                break;
+            case am_YU: /* Must be XMM or YMM (must be VEX) */
+                /* Make sure this register class is valid */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+
+                /* Constrain to either XMM or YMM registers */
+                if(avx_type != AVX_XMM && avx_type != AVX_YMM)
+                    avx_type = AVX_YMM;
+
+                /* Get the register bank and index */
+                if(decodeAVX(bank, &bank_index, locs->modrm_rm, avx_type, pref, operand.admet))
+                    return false;
+
+                /* Append the operand */
+                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                break;
+            case am_W: /* Could be XMM, YMM, or ZMM (or possibly not VEX) */
+
+                if(pref.vex_present)
+                {
+                    if(!AVX_TYPE_OKAY(avx_type))
+                        return false;
+                }
+
                         switch(locs->modrm_mod)
                         {
-                            // direct dereference
+                    /* Direct dereference */
                             case 0x00:
                             case 0x01:
                             case 0x02:
-			      insn_to_complete->appendOperand(makeModRMExpression(b, makeSizeType(optype)),
-                                                               isRead, isWritten);
+			            insn_to_complete->appendOperand(makeModRMExpression(b, makeSizeType(optype)), isRead, isWritten);
                                 break;
                             case 0x03:
-                            // use of actual register
+                        /* Just the register is used */
+                        if(decodeAVX(bank, &bank_index, locs->modrm_rm, avx_type, pref, operand.admet))
+                            return false;
+                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                        break;
+                    default:
+                        assert(!"2-bit value modrm_mod out of range");
+                        break;
+                }
+                break;
+            case am_XW: /* Must be XMM (must be VEX) */
+
+                /* Make sure this vex is okay */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+         
+                /* Constrain to the XMM banks */ 
+                avx_type = AVX_XMM;
+
+                switch(locs->modrm_mod)
                             {
-                                insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch,
-                                        locs->rex_b ? b_xmmhigh : b_xmm, locs->modrm_rm)),
-                                        isRead, isWritten);
+                    /* Direct dereference */
+                    case 0x00:
+                    case 0x01:
+                    case 0x02:
+                        insn_to_complete->appendOperand(makeModRMExpression(b, makeSizeType(optype)), isRead, isWritten);
+                        break;
+                    case 0x03:
+                        /* Just the register is used */
+                        if(decodeAVX(bank, &bank_index, locs->modrm_rm, avx_type, pref, operand.admet))
+                            return false;
+                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                        break;
+                    default:
+                        assert(!"2-bit value modrm_mod out of range");
                                 break;
                             }
+                break;
+            case am_YW: /* Must be either YMM or XMM (must be VEX) */
+
+                /* Make sure the register class is okay and we have a vex prefix */
+                if(!AVX_TYPE_OKAY(avx_type) || !pref.vex_present)
+                    return false;
+
+                /* Constrain to either XMM or YMM registers */
+                if(avx_type != AVX_XMM && avx_type != AVX_YMM)
+                    avx_type = AVX_YMM;
+
+                switch(locs->modrm_mod)
+                {
+                    /* Direct dereference */
+                    case 0x00:
+                    case 0x01:
+                    case 0x02:
+                        insn_to_complete->appendOperand(makeModRMExpression(b, makeSizeType(optype)), isRead, isWritten);
+                        break;
+                    case 0x03:
+                        /* Just the register is used */
+                        if(decodeAVX(bank, &bank_index, locs->modrm_rm, avx_type, pref, operand.admet))
+                            return false;
+
+                        /* Append the operand */
+                        insn_to_complete->appendOperand(makeRegisterExpression(IntelRegTable(m_Arch, bank, bank_index)), isRead, isWritten);
+                        break;
                             default:
                                 assert(!"2-bit value modrm_mod out of range");
                                 break;
-                        };
+                }
                         break;
                     case am_X:
                     {
@@ -1018,29 +1359,24 @@ namespace Dyninst
 				if(addrSizePrefixPresent)
 				{
 					si_reg = x86::si;
-				} else
-				{
+                        } else {
 					si_reg = x86::esi;
 				}
-			}
-			else
-			{
+                    } else {
 				if(addrSizePrefixPresent)
 				{
 					si_reg = x86_64::esi;
-				} else
-				{
+                        } else {
 					si_reg = x86_64::rsi;
 				}
 			}
+
                         Expression::Ptr ds(makeRegisterExpression(m_Arch == Arch_x86 ? x86::ds : x86_64::ds));
                         Expression::Ptr si(makeRegisterExpression(si_reg));
-                        Expression::Ptr segmentOffset(make_shared(singleton_object_pool<Immediate>::construct(
-                                Result(u32, 0x10))));
+                    Expression::Ptr segmentOffset(make_shared(singleton_object_pool<Immediate>::construct(Result(u32, 0x10))));
                         Expression::Ptr ds_segment = makeMultiplyExpression(ds, segmentOffset, u32);
                         Expression::Ptr ds_si = makeAddExpression(ds_segment, si, u32);
-                        insn_to_complete->appendOperand(makeDereferenceExpression(ds_si, makeSizeType(optype)),
-                                                       isRead, isWritten);
+                    insn_to_complete->appendOperand(makeDereferenceExpression(ds_si, makeSizeType(optype)), isRead, isWritten);
                     }
                     break;
                     case am_Y:
@@ -1051,18 +1387,14 @@ namespace Dyninst
 				if(addrSizePrefixPresent)
 				{
 					di_reg = x86::di;
-				} else
-				{
+                        } else {
 					di_reg = x86::edi;
 				}
-			}
-			else
-			{
+                    } else {
 				if(addrSizePrefixPresent)
 				{
 					di_reg = x86_64::edi;
-				} else
-				{
+                        } else {
 					di_reg = x86_64::rdi;
 				}
 			}
@@ -1071,23 +1403,19 @@ namespace Dyninst
                         Expression::Ptr es_segment = makeMultiplyExpression(es,
                             make_shared(singleton_object_pool<Immediate>::construct(Result(u32, 0x10))), u32);
                         Expression::Ptr es_di = makeAddExpression(es_segment, di, u32);
-                        insn_to_complete->appendOperand(makeDereferenceExpression(es_di, makeSizeType(optype)),
-                                                       isRead, isWritten);
+                    insn_to_complete->appendOperand(makeDereferenceExpression(es_di, makeSizeType(optype)), isRead, isWritten);
                     }
                     break;
                     case am_tworeghack:
-                    {
                         if(optype == op_edxeax)
                         {
                             Expression::Ptr edx(makeRegisterExpression(m_Arch == Arch_x86 ? x86::edx : x86_64::edx));
                             Expression::Ptr eax(makeRegisterExpression(m_Arch == Arch_x86 ? x86::eax : x86_64::eax));
-                            Expression::Ptr highAddr = makeMultiplyExpression(edx,
-                                    Immediate::makeImmediate(Result(u64, 2^32)), u64);
+                    Expression::Ptr highAddr = makeMultiplyExpression(edx, Immediate::makeImmediate(Result(u64, 2^32)), u64);
                             Expression::Ptr addr = makeAddExpression(highAddr, eax, u64);
                             Expression::Ptr op = makeDereferenceExpression(addr, u64);
                             insn_to_complete->appendOperand(op, isRead, isWritten);
-                        }
-                        else if (optype == op_ecxebx)
+                } else if (optype == op_ecxebx)
                         {
                             Expression::Ptr ecx(makeRegisterExpression(m_Arch == Arch_x86 ? x86::ecx : x86_64::ecx));
                             Expression::Ptr ebx(makeRegisterExpression(m_Arch == Arch_x86 ? x86::ebx : x86_64::ebx));
@@ -1097,14 +1425,13 @@ namespace Dyninst
                             Expression::Ptr op = makeDereferenceExpression(addr, u64);
                             insn_to_complete->appendOperand(op, isRead, isWritten);
                         }
-                    }
                     break;
                     
                     case am_reg:
                     {
                         MachRegister r(optype);
 			int size = r.size();
-			if((m_Arch == Arch_x86_64) && (r.regClass() == x86::GPR) && (size == 4))
+                    if((m_Arch == Arch_x86_64) && (r.regClass() == (unsigned int)x86::GPR) && (size == 4))
 			{
 			    int reg_size = isDefault64Insn() ? op_q : op_v;
 			    if(sizePrefixPresent)
@@ -1120,9 +1447,7 @@ namespace Dyninst
 				r = MachRegister((r.val()) | x86_64::r8.val());
 				assert(r.name() != "<INVALID_REG>");
 			    }
-			}
-			else 
-			{
+                    } else {
 			    r = MachRegister((r.val() & ~r.getArchitecture()) | m_Arch);
 			    
 			    entryID entryid = decodedInstruction->getEntry()->getID(locs);
@@ -1151,18 +1476,18 @@ namespace Dyninst
 					default:
 					    break;
 					}
+
 					r = makeRegisterID(reg_id, reg_op_type, true);
-					//					r = MachRegister((r.val()) | x86_64::r8.val());
 					assert(r.name() != "<INVALID_REG>");
 				    }
-				}
-				else if((r.size() == 1) && (locs->rex_byte & 0x40))
+                            } else if((r.size() == 1) && (locs->rex_byte & 0x40))
 				{
 				    r = makeRegisterID(reg_id, op_b, false);
 				    assert(r.name() != "<INVALID_REG>");
 				}
 			    }
-			    if(sizePrefixPresent && (r.regClass() == x86::GPR) && r.size() >= 4)
+
+                        if(sizePrefixPresent && (r.regClass() == (unsigned int)x86::GPR) && r.size() >= 4)
 			    {
 				r = MachRegister((r.val() & ~x86::FULL) | x86::W_REG);
 				assert(r.name() != "<INVALID_REG>");
@@ -1177,7 +1502,6 @@ namespace Dyninst
                 // handled elsewhere
                     break;
                 case am_allgprs:
-                {
                     if(m_Arch == Arch_x86)
                     {
                         insn_to_complete->appendOperand(makeRegisterExpression(x86::eax), isRead, isWritten);
@@ -1188,9 +1512,7 @@ namespace Dyninst
                         insn_to_complete->appendOperand(makeRegisterExpression(x86::ebp), isRead, isWritten);
                         insn_to_complete->appendOperand(makeRegisterExpression(x86::esi), isRead, isWritten);
                         insn_to_complete->appendOperand(makeRegisterExpression(x86::edi), isRead, isWritten);
-                    }
-                    else
-                    {
+                } else {
                         insn_to_complete->appendOperand(makeRegisterExpression(x86_64::eax), isRead, isWritten);
                         insn_to_complete->appendOperand(makeRegisterExpression(x86_64::ecx), isRead, isWritten);
                         insn_to_complete->appendOperand(makeRegisterExpression(x86_64::edx), isRead, isWritten);
@@ -1200,22 +1522,20 @@ namespace Dyninst
                         insn_to_complete->appendOperand(makeRegisterExpression(x86_64::esi), isRead, isWritten);
                         insn_to_complete->appendOperand(makeRegisterExpression(x86_64::edi), isRead, isWritten);
                     }
-                }
                     break;
-		case am_ImplImm: {
+            case am_ImplImm:
 		  insn_to_complete->appendOperand(Immediate::makeImmediate(Result(makeSizeType(optype), 1)), isRead, isWritten);
 		  break;
-		}
-
                 default:
                     printf("decodeOneOperand() called with unknown addressing method %d\n", operand.admet);
-                        break;
-                };
+                    // assert(0);
+                return false;
+        }
+      
                 return true;
             }
 
     extern ia32_entry invalid;
-    
     void InstructionDecoder_x86::doIA32Decode(InstructionDecoder::buffer& b)
     {
         if(decodedInstruction == NULL)
@@ -1275,9 +1595,7 @@ namespace Dyninst
             m_Operation = make_shared(singleton_object_pool<Operation>::construct(decodedInstruction->getEntry(),
                                     decodedInstruction->getPrefix(), locs, m_Arch));
             
-        }
-        else
-        {
+      } else {
                 // Gap parsing can trigger this case; in particular, when it encounters prefixes in an invalid order.
                 // Notably, if a REX prefix (0x40-0x48) appears followed by another prefix (0x66, 0x67, etc)
                 // we'll reject the instruction as invalid and send it back with no entry.  Since this is a common
@@ -1295,10 +1613,10 @@ namespace Dyninst
         b.start += decodedInstruction->getSize();
     }
     
-      bool InstructionDecoder_x86::decodeOperands(const Instruction* insn_to_complete)
+	bool InstructionDecoder_x86::decodeOperands(const Instruction* insn_to_complete)
     {
        int imm_index = 0; // handle multiple immediate operands
-        if(!decodedInstruction) return false;
+        if(!decodedInstruction || !decodedInstruction->getEntry()) return false;
         unsigned int opsema = decodedInstruction->getEntry()->opsema & 0xFF;
 	InstructionDecoder::buffer b(insn_to_complete->ptr(), insn_to_complete->size());
 
@@ -1309,7 +1627,7 @@ namespace Dyninst
            insn_to_complete->addSuccessor(ret_addr, false, true, false, false);
 	}
 
-        for(unsigned i = 0; i < 3; i++)
+        for(int i = 0; i < 3; i++)
         {
             if(decodedInstruction->getEntry()->operands[i].admet == 0 && 
 	       decodedInstruction->getEntry()->operands[i].optype == 0)
@@ -1324,6 +1642,20 @@ namespace Dyninst
                 return false;
             }
         }
+
+        /* Does this instruction have a 4th operand? */
+        if((decodedInstruction->getEntry()->opsema & 0xFFFF) >= s4OP)
+        {
+          if(!decodeOneOperand(b,
+            {am_I, op_b}, /* This is always an IMM8 */
+            imm_index,
+            insn_to_complete,
+            readsOperand(opsema, 3),
+            writesOperand(opsema, 3)))
+            {
+                return false;
+            }
+        }
     
         return true;
     }
diff --git a/parseAPI/src/Function.C b/parseAPI/src/Function.C
index 70df542..c93032b 100644
--- a/parseAPI/src/Function.C
+++ b/parseAPI/src/Function.C
@@ -434,6 +434,7 @@ Function::name()
 bool
 Function::contains(Block *b)
 {
+    if (b == NULL) return false;
     if(!_cache_valid)
         finalize();
 
diff --git a/parseAPI/src/IA_IAPI.C b/parseAPI/src/IA_IAPI.C
index 61f0a0b..eeea6d9 100644
--- a/parseAPI/src/IA_IAPI.C
+++ b/parseAPI/src/IA_IAPI.C
@@ -531,7 +531,7 @@ void IA_IAPI::parseSysEnter(std::vector<std::pair<Address, EdgeTypeEnum> >& outE
   }
 }
 
-
+bool DEBUGGABLE(void) { return true; }
 
 void IA_IAPI::getNewEdges(std::vector<std::pair< Address, EdgeTypeEnum> >& outEdges,
 			  Function* context,
@@ -738,7 +738,7 @@ void IA_IAPI::getNewEdges(std::vector<std::pair< Address, EdgeTypeEnum> >& outEd
     {
       parseSysEnter(outEdges);
       return;
-    } else if (isSyscall()) {
+    } else if (DEBUGGABLE() && isSyscall()) {
         parseSyscall(outEdges);
         return;
     }
diff --git a/parseAPI/src/IA_x86.C b/parseAPI/src/IA_x86.C
index 6410c4e..16cb09a 100644
--- a/parseAPI/src/IA_x86.C
+++ b/parseAPI/src/IA_x86.C
@@ -255,8 +255,25 @@ bool IA_IAPI::isTailCall(Function * context, EdgeTypeEnum type, unsigned int, co
         _obj->findCurrentBlocks(_cr, addr, blocks);
         if (blocks.size() == 1) {
             target = *blocks.begin();
-        }
+        } else if (blocks.size() == 0) {
+	    // This case can happen when the jump target is a function entry,
+	    // but we have not parsed the function yet
+	    target = NULL;
+	} else {
+	    // If this case happens, it means the jump goes into overlapping instruction streams,
+	    // it is not likely to be a tail call.
+	    parsing_printf("\tjumps into overlapping instruction streams\n");
+	    for (auto bit = blocks.begin(); bit != blocks.end(); ++bit) {
+	        parsing_printf("\t block [%lx,%lx)\n", (*bit)->start(), (*bit)->end());
+	    }
+	    parsing_printf("\tjump to 0x%lx, NOT TAIL CALL\n", addr);
+	    tailCalls[type] = false;
+	    return false;
+	}
     }
+
+    // if target is still NULL, return false
+    if(target == NULL) return false;
     
     if(curInsn()->getCategory() == c_BranchInsn &&
        valid &&
