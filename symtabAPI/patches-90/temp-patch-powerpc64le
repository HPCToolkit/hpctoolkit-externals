Temporary patch to correct the byte order for instruction decoding on
the powerpc little-endian (powerpc64le).

This patch assumes that all 64-bit powerpc is little endian, so add it
manually only on little-endian power8.


diff -Naurb DyninstAPI-9.0.3.orig/cmake/cap_arch_def.cmake DyninstAPI-9.0.3/cmake/cap_arch_def.cmake
--- DyninstAPI-9.0.3.orig/cmake/cap_arch_def.cmake	2015-08-26 11:13:07.000000000 -0500
+++ DyninstAPI-9.0.3/cmake/cap_arch_def.cmake	2016-03-07 16:56:06.805484014 -0600
@@ -48,6 +48,7 @@
              -Dcap_32_64
              -Dcap_registers
              -Dcap_toc_64
+             -Darch_ppc_little_endian
     )
 elseif (PLATFORM MATCHES aarch64)
   #set (ARCH_DEFINES -Daarch_64 -Darch_64bit)
diff -Naurb DyninstAPI-9.0.3.orig/dataflowAPI/src/RoseInsnFactory.C DyninstAPI-9.0.3/dataflowAPI/src/RoseInsnFactory.C
--- DyninstAPI-9.0.3.orig/dataflowAPI/src/RoseInsnFactory.C	2015-08-26 11:13:07.000000000 -0500
+++ DyninstAPI-9.0.3/dataflowAPI/src/RoseInsnFactory.C	2016-03-07 16:52:20.136172853 -0600
@@ -258,6 +258,7 @@
 void RoseInsnPPCFactory::setSizes(SgAsmInstruction *) {
 }
 
+#include <endian.h>
 
 bool RoseInsnPPCFactory::handleSpecialCases(entryID iapi_opcode, 
 					    SgAsmInstruction *insn, 
@@ -277,6 +278,7 @@
       raw = raw << 8;
       raw |= bytes[i];
     }
+    raw = htobe32(raw);
     bool isAbsolute = (bool)(raw & 0x00000002);
     bool isLink = (bool)(raw & 0x00000001);
     rose_insn->set_kind(makeRoseBranchOpcode(iapi_opcode, isAbsolute, isLink));
diff -Naurb DyninstAPI-9.0.3.orig/instructionAPI/src/InstructionDecoder-power.C DyninstAPI-9.0.3/instructionAPI/src/InstructionDecoder-power.C
--- DyninstAPI-9.0.3.orig/instructionAPI/src/InstructionDecoder-power.C	2015-08-26 11:13:07.000000000 -0500
+++ DyninstAPI-9.0.3/instructionAPI/src/InstructionDecoder-power.C	2016-03-07 16:52:20.137172841 -0600
@@ -248,8 +248,13 @@
       isRAWritten = false;
       isFPInsn = false;
       bcIsConditional = false;
+#if !defined(arch_ppc_little_endian)
       insn = b.start[0] << 24 | b.start[1] << 16 |
       b.start[2] << 8 | b.start[3];
+#else
+      insn = b.start[0] | b.start[1] << 8 | 
+	b.start[2] << 16 | b.start[3] << 24;
+#endif
 #if defined(DEBUG_RAW_INSN)        
         cout.width(0);
         cout << "0x";
