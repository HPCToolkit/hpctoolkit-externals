#!/bin/sh
#
#  SymtabAPI 9.0 configure.
#
#  $Id$
#

PKG_NAME=symtabAPI
src=dyninst

. ../build-utils/configure.inc
pre_configure
prefix="$symtabAPI_prefix"

echo "symtabAPI PLATFORM: $symtabAPI_platform"

set -- \
    -DCMAKE_INSTALL_PREFIX="$prefix" \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_RTLIB=Off \
    -DBUILD_TARBALLS=Off \
    -DBUILD_DOCS=Off  \
    -DCMAKE_C_COMPILER="$symtab_cc_path" \
    -DCMAKE_CXX_COMPILER="$symtab_cxx_path" \
    -DCROSS_COMPILING=1 \
    -DPATH_BOOST="$boost_prefix" \
    -DIBERTY_LIBRARIES="$binutils_prefix/lib/libiberty.a" \
    -DLIBELF_INCLUDE_DIR="$libelf_inc" \
    -DLIBELF_LIBRARIES="$libelf_lib/libelf.so" \
    -DLIBDWARF_INCLUDE_DIR="$libdwarf_inc" \
    -DLIBDWARF_LIBRARIES="$libdwarf_lib/libdwarf.so"

# Symtab overrides CFLAGS and CXXFLAGS, so we write these into the
# cmake files.

# FIXME: should test CXX for these features in configure.  But the
# tests are complicated, so this will do as a temporary workaround.

case "$host" in
    *k1om* )
	symtab_cxxflags="$symtab_cxxflags -DBOOST_NO_CXX11_ALLOCATOR"
	symtab_cxxflags="$symtab_cxxflags -DBOOST_NO_CXX11_VARIADIC_TEMPLATES"
	;;
esac

cd "$src/cmake" || die "unable to cd: $src/cmake"
rm -f optimization.cmake

cat <<EOF >optimization.cmake
message("-- Set CC optimization flags:  ${symtab_cflags}")
message("-- Set CXX optimization flags: ${symtab_cxxflags}")
message("-- Set shared linker flags: \${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
set (CMAKE_C_FLAGS_RELEASE "${symtab_cflags}")
set (CMAKE_CXX_FLAGS_RELEASE "${symtab_cxxflags}")
set (CMAKE_SHARED_LINKER_FLAGS "\${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
EOF

cd "$ORIG_PKG_DIR" || die "unable to cd: $ORIG_PKG_DIR"

make_work_dir
cd work || die "unable to cd: work"

export PLATFORM="$symtabAPI_platform"

echo cmake "../$src" "$@"
cmake "../$src" "$@"
test $? -eq 0 || die "cmake configure failed"

post_configure
