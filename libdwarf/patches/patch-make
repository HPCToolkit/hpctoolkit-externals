Fix the build for gennames to always use the front-end gcc compiler.
This was breaking the build in a cross-compile.

Add separate %.o:%.c rules for back-end and gennames objects.

Reorder the include files in CFLAGS to put the libdwarf directories
before libelf.  Elfutils installs its own dwarf.h and this was
breaking the build when the elfutils version was different from the
libdwarf version.


diff -Naurb dwarf-20150915.orig/libdwarf/Makefile.in dwarf-20150915/libdwarf/Makefile.in
--- dwarf-20150915.orig/libdwarf/Makefile.in	2015-09-15 11:36:27.000000000 -0500
+++ dwarf-20150915/libdwarf/Makefile.in	2016-11-17 13:32:26.675908467 -0600
@@ -51,7 +51,7 @@
 LIBS =		@LIBS@
 INCLUDES =	-I. -I$(srcdir)
 dwfpic =        @dwfpic@
-CFLAGS =	$(PREINCS) @CFLAGS@ $(INCLUDES) $(dwfpic) $(POSTINCS)
+CFLAGS =	$(PREINCS) $(INCLUDES) @CFLAGS@ @CPPFLAGS@ $(dwfpic) $(POSTINCS)
 LDFLAGS =	$(PRELIBS) @LDFLAGS@ $(POSTLIBS)
 
 
@@ -116,9 +116,18 @@
         pro_macinfo.o \
         pro_weaks.o
         
+GENNAMES_OBJS = common.o \
+	dwgetopt.o \
+	gennames.o
 
 all: @build_shared@ @build_nonshared@
 
+$(OBJS): %.o: %.c
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(GENNAMES_OBJS): %.o: %.c
+	gcc -c -g -O -o $@ $<
+
 libdwarf.a: dwarf_names.h dwarf_names.c  $(OBJS) dwarf_names.o
 	$(AR) $(ARFLAGS) $@ $(OBJS)  dwarf_names.o > ar-output-temp
 
@@ -127,13 +136,12 @@
 
 none:
 	echo "do nothing " $@
-dwgetopt.o: $(srcdir)/dwgetopt.c $(srcdir)/dwgetopt.h
-	$(CC) $(CFLAGS) -c $(srcdir)/dwgetopt.c
-common.o: $(srcdir)/common.c $(srcdir)/common.h
-	$(CC) $(CFLAGS) -c $(srcdir)/common.c
-gennames: $(srcdir)/gennames.c $(srcdir)/dwarf.h common.o dwgetopt.o
-	$(CC) $(CFLAGS) $(srcdir)/gennames.c common.o dwgetopt.o $(LDFLAGS) -o gennames
+
+gennames: $(GENNAMES_OBJS)
+	gcc -o $@ $(GENNAMES_OBJS)
+
 dwarf_names.h: dwarf_names.c
+
 dwarf_names.c: gennames $(srcdir)/dwarf.h
 	rm -f dwarf_names.h dwarf_names.c
 	./gennames  @dwarf_namestable@  -i $(srcdir) -o .
