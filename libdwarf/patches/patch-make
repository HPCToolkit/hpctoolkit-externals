Fix the build for gennames to always use the front-end gcc compiler.
This was breaking the build in a cross-compile.

Add separate %.o:%.c rules for back-end and gennames objects.

Reorder the include files in CFLAGS to put the libdwarf directories
first.  We want libdwarf to use its own dwarf.h file instead of one
from elfutils or /usr.

Adjust the .so files so that libdwarf.so.1 is the real file and
libdwarf.so is a symlink.


diff -Naurb dwarf-20161124.orig/libdwarf/Makefile.in dwarf-20161124/libdwarf/Makefile.in
--- dwarf-20161124.orig/libdwarf/Makefile.in	2016-11-24 15:15:02.000000000 -0600
+++ dwarf-20161124/libdwarf/Makefile.in	2016-12-09 14:42:26.770453845 -0600
@@ -56,7 +56,7 @@
 dwfsanitize =   @dwfsanitize@
 dwfzlib =       @dwfzlib@
 SONAME =        libdwarf.so.1
-CFLAGS =	$(PREINCS) @CPPFLAGS@ @CFLAGS@ $(INCLUDES) $(dwfpic) $(dwfwall) $(dwfsanitize)  $(POSTINCS)
+CFLAGS =	$(PREINCS) $(INCLUDES) @CFLAGS@ @CPPFLAGS@ $(dwfpic) $(dwfwall) $(dwfsanitize)  $(POSTINCS)
 LDFLAGS =	$(PRELIBS) @LDFLAGS@ $(dwfsanitize) $(POSTLIBS) 
 HOSTCFLAGS =	$(CFLAGS)
 HOSTLDFLAGS =	$(PRELIBS) @LDFLAGS@ 
@@ -128,21 +128,27 @@
         pro_weaks.o
         
 
-all: gennames errmsg_check @build_shared@ @build_nonshared@
+GENNAMES_OBJS = dwgetopt.o gennames.o
+
+all: gennames @build_shared@ @build_nonshared@
+
+$(OBJS): %.o: %.c
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(GENNAMES_OBJS): %.o: %.c
+	gcc -c -g -O -o $@ $<
 
 libdwarf.a: dwarf_names.h dwarf_names.c  $(OBJS) dwarf_names.o
 	$(AR) $(ARFLAGS) $@ $(OBJS)  dwarf_names.o > ar-output-temp
 
 libdwarf.so: dwarf_names.h dwarf_names.c $(OBJS) dwarf_names.o
-	$(CC) $(CFLAGS) $(LDFLAGS) -shared $(OBJS) -Wl,-soname=$(SONAME)  dwarf_names.o $(dwfzlib) -o $@
-	ln libdwarf.so $(SONAME)
+	$(CC) $(CFLAGS) $(LDFLAGS) -shared $(OBJS) -Wl,-soname=$(SONAME)  dwarf_names.o $(dwfzlib) -o $(SONAME)
+	ln -s $(SONAME) $@
 
 none:
 	echo "do nothing " $@
-dwgetopt.o: $(srcdir)/dwgetopt.c $(srcdir)/dwgetopt.h
-	$(HOSTCC) $(HOSTCFLAGS) -c $(srcdir)/dwgetopt.c
+
 dwarf_loc.o: $(srcdir)/dwarf_loc.c  $(srcdir)/dwarf_loc2.c  $(srcdir)/dwarf_loc.h 
-	$(CC) $(CFLAGS) -c $(srcdir)/dwarf_loc.c
 
 errmsg_check: $(srcdir)/dwarf_errmsg_list.c libdwarf.h
 	grep DW_DLE libdwarf.h >errmsg_check_list
@@ -150,8 +156,9 @@
 	./errmsg_check -f errmsg_check_list
 
 # Gennames builds and runs native, even for a cross-build of libdwarf.
-gennames: $(srcdir)/gennames.c $(srcdir)/dwarf.h dwgetopt.o
-	$(HOSTCC) $(HOSTCFLAGS) $(srcdir)/gennames.c dwgetopt.o $(HOSTLDFLAGS) -o gennames
+gennames: $(GENNAMES_OBJS)
+	gcc -o $@ $(GENNAMES_OBJS)
+
 dwarf_names.h: dwarf_names.c
 dwarf_names.c: gennames $(srcdir)/dwarf.h
 	rm -f dwarf_names.h dwarf_names.c
@@ -159,11 +166,11 @@
 # End gennames build lines
 
 dwarf_line.o: $(srcdir)/dwarf.h libdwarf.h $(srcdir)/dwarf_line_table_reader_common.c $(srcdir)/dwarf_line.c
-	$(CC) $(CFLAGS) -c $(srcdir)/dwarf_line.c -o $@
+
 dwarf_print_lines.o: $(srcdir)/dwarf.h libdwarf.h $(srcdir)/dwarf_line_table_reader_common.c $(srcdir)/dwarf_print_lines.c
-	$(CC) $(CFLAGS) -c $(srcdir)/dwarf_print_lines.c -o $@
+
 dwarf_error.o: $(srcdir)/dwarf.h libdwarf.h $(srcdir)/dwarf_error.c $(srcdir)/dwarf_errmsg_list.c
-	$(CC) $(CFLAGS) -c $(srcdir)/dwarf_error.c -o $@
+
 
 
 
