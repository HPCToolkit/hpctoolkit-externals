This patch brings libmonitor up to Feb 1, 2018.

commit 4b7a20a2a101d46a44563f70dad260cec63d0c85
Author: Mark W. Krentel <krentel@rice.edu>
Date:   Thu Feb 1 14:37:50 2018 -0600

    Rework the choice of the shootdown signal to an early choice in
    monitor_signal_init().  This fixes a deadlock between interrupts
    and sigaction() or sigprocmask().


diff --git a/src/signal.c b/src/signal.c
index b0206d8..82ce25b 100644
--- a/src/signal.c
+++ b/src/signal.c
@@ -51,6 +51,8 @@
 #include "monitor.h"
 #include "spinlock.h"
 
+#define MONITOR_CHOOSE_SHOOTDOWN_EARLY  1
+
 /*
  *----------------------------------------------------------------------
  *  MACROS and GLOBAL DEFINITIONS
@@ -149,6 +151,8 @@ static spinlock_t monitor_signal_lock = SPINLOCK_UNLOCKED;
 static int last_resort_signal = SIGWINCH;
 static int shootdown_signal = -1;
 
+static void monitor_choose_shootdown_early(void);
+
 /*
  *----------------------------------------------------------------------
  *  INTERNAL HELPER FUNCTIONS
@@ -340,8 +344,7 @@ monitor_signal_init(void)
      */
     k = 0;
 #ifdef SIGRTMIN
-    for (i = 6; i < 14; i++) {
-	sig = SIGRTMIN + i;
+    for (sig = SIGRTMIN + 8; sig <= SIGRTMAX - 8; sig++) {
 	mse = &monitor_signal_array[sig];
 	if (sig < MONITOR_NSIG
 	    && !mse->mse_avoid && !mse->mse_invalid
@@ -367,6 +370,7 @@ monitor_signal_init(void)
 
     /*
      * Allow MONITOR_SHOOTDOWN_SIGNAL to set the shootdown signal.
+     * If set, this always has first priority.
      */
     shootdown_str = getenv("MONITOR_SHOOTDOWN_SIGNAL");
     if (shootdown_str != NULL) {
@@ -383,6 +387,12 @@ monitor_signal_init(void)
 	MONITOR_DEBUG("MONITOR_SHOOTDOWN_SIGNAL = %d\n", shootdown_signal);
     }
 
+#if MONITOR_CHOOSE_SHOOTDOWN_EARLY
+    if (shootdown_signal < 0) {
+	monitor_choose_shootdown_early();
+    }
+#endif
+
     if (monitor_debug) {
 	MONITOR_DEBUG("valid: %d, invalid: %d, avoid: %d, max signum: %d\n",
 		      num_valid, num_invalid, num_avoid, MONITOR_NSIG - 1);
@@ -394,10 +404,17 @@ monitor_signal_init(void)
         monitor_signal_list_string(buf, MONITOR_SIG_BUF_SIZE,
 				   monitor_shootdown_list);
 	MONITOR_DEBUG("shootdown list:%s\n", buf);
+	MONITOR_DEBUG("shootdown signal: %d\n", shootdown_signal);
     }
 }
 
 /*
+ *----------------------------------------------------------------------
+ *  SHOOTDOWN SIGNAL and helper functions
+ *----------------------------------------------------------------------
+ */
+
+/*
  *  Delete from "set" any signals on the keep open list.  Always leave
  *  at least one unmasked signal to use for thread shootdown.
  */
@@ -410,6 +427,24 @@ monitor_remove_client_signals(sigset_t *set)
     if (set == NULL) {
 	return;
     }
+
+#if MONITOR_CHOOSE_SHOOTDOWN_EARLY
+
+    for (sig = 1; sig < MONITOR_NSIG; sig++) {
+	mse = &monitor_signal_array[sig];
+	if (!mse->mse_avoid && !mse->mse_invalid && mse->mse_keep_open) {
+	    sigdelset(set, sig);
+	}
+    }
+    return;
+
+#else
+    /*
+     * The old, delayed way of choosing the shootdown signal is broken
+     * when using interrupts (deadlocks with sigprocmask).  This could
+     * be fixed with a non-blocking data structure, but the libunwind
+     * use case makes that pointless.
+     */
     MONITOR_SIGNAL_LOCK;
 
     if (shootdown_signal < 0) {
@@ -459,15 +494,36 @@ monitor_remove_client_signals(sigset_t *set)
 	}
     }
     MONITOR_SIGNAL_UNLOCK;
+
+#endif
 }
 
 /*
- *  Adjust sa_flags according to the required and forbidden sets.
+ *  Choose the shootdown signal and add it to the open list.  In the
+ *  early case, pick something on the shootdown list that's not held
+ *  open for the client.
  */
-static inline int
-monitor_adjust_saflags(int flags)
+static void
+monitor_choose_shootdown_early(void)
 {
-    return (flags | SAFLAGS_REQUIRED) & ~(SAFLAGS_FORBIDDEN);
+    int i, sig;
+
+    if (shootdown_signal > 0) {
+	return;
+    }
+
+    for (i = 0; monitor_shootdown_list[i] > 0; i++) {
+	sig = monitor_shootdown_list[i];
+
+	if (! monitor_signal_array[sig].mse_keep_open) {
+	    shootdown_signal = sig;
+	    monitor_signal_array[sig].mse_keep_open = 1;
+	    return;
+	}
+    }
+
+    shootdown_signal = last_resort_signal;
+    monitor_signal_array[last_resort_signal].mse_keep_open = 1;
 }
 
 /*
@@ -476,12 +532,21 @@ monitor_adjust_saflags(int flags)
 int
 monitor_shootdown_signal(void)
 {
-    struct monitor_signal_entry *mse;
-    int i, sig, ans1, ans2, ans3;
-
     if (shootdown_signal > 0) {
 	return shootdown_signal;
     }
+
+#if MONITOR_CHOOSE_SHOOTDOWN_EARLY
+
+    monitor_signal_init();
+    monitor_choose_shootdown_early();
+    return shootdown_signal;
+
+#else
+
+    struct monitor_signal_entry *mse;
+    int i, sig, ans1, ans2, ans3;
+
     MONITOR_SIGNAL_LOCK;
 
     /*
@@ -530,6 +595,8 @@ monitor_shootdown_signal(void)
     MONITOR_SIGNAL_UNLOCK;
 
     return shootdown_signal;
+
+#endif
 }
 
 /*
@@ -539,6 +606,15 @@ monitor_shootdown_signal(void)
  */
 
 /*
+ *  Adjust sa_flags according to the required and forbidden sets.
+ */
+static inline int
+monitor_adjust_saflags(int flags)
+{
+    return (flags | SAFLAGS_REQUIRED) & ~(SAFLAGS_FORBIDDEN);
+}
+
+/*
  *  The client's sigaction.  If "act" is non-NULL, then use it for
  *  sa_flags and sa_mask, but "flags" are unused for now.
  *
