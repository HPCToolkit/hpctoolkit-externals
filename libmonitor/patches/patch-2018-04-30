Rework the client 'keep open' list.  Previously, we always kept these
signals unmasked.  Instead, change the meaning to, 'the application is
not allowed to change the mask for these signals.'

This fixes a bug where hpcrun would accept a perf events interrupt,
libunwind would try to set the signal mask, libmonitor would open the
interrupt signal, and then hpcrun would get slammed with an interrupt
from the same signal while still in the handler, resulting in
deadlock.


diff --git a/src/common.h b/src/common.h
index 4347ad1..c830a47 100644
--- a/src/common.h
+++ b/src/common.h
@@ -180,7 +180,7 @@ void monitor_thread_release(void);
 void monitor_thread_shootdown(void);
 int  monitor_shootdown_signal(void);
 int  monitor_sigwait_handler(int, siginfo_t *, void *);
-void monitor_remove_client_signals(sigset_t *);
+void monitor_remove_client_signals(sigset_t *, int);
 int  monitor_sigset_string(char *, int, const sigset_t *);
 int  monitor_signal_list_string(char *, int, int *);
 void monitor_get_main_args(int *, char ***, char ***);
diff --git a/src/pthread.c b/src/pthread.c
index 98876b8..f434cb1 100644
--- a/src/pthread.c
+++ b/src/pthread.c
@@ -1116,34 +1116,23 @@ MONITOR_WRAP_NAME(pthread_exit)(void *data)
 
 /*
  *  Allow the application to modify the thread signal mask, but don't
- *  let it block a signal that the client catches.
+ *  let it change the mask for any signal in the keep open list.
  */
 #ifdef MONITOR_USE_SIGNALS
 int
 MONITOR_WRAP_NAME(pthread_sigmask)(int how, const sigset_t *set,
 				   sigset_t *oldset)
 {
-    char buf[MONITOR_SIG_BUF_SIZE];
-    char *type;
     sigset_t my_set;
 
     monitor_signal_init();
     monitor_thread_name_init();
 
-    type = (how == SIG_UNBLOCK) ? "unblock" : "block";
-    if (monitor_debug) {
-	monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, set);
-	MONITOR_DEBUG("(%s) request:%s\n", type, buf);
-    }
-
-    if (set != NULL && (how == SIG_BLOCK || how == SIG_SETMASK)) {
+    if (set != NULL) {
+	MONITOR_DEBUG1("\n");
 	my_set = *set;
-	monitor_remove_client_signals(&my_set);
+	monitor_remove_client_signals(&my_set, how);
 	set = &my_set;
-	if (monitor_debug) {
-	    monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, set);
-	    MONITOR_DEBUG("(%s) actual: %s\n", type, buf);
-	}
     }
 
     return (*real_pthread_sigmask)(how, set, oldset);
diff --git a/src/signal.c b/src/signal.c
index c13d630..cf7b021 100644
--- a/src/signal.c
+++ b/src/signal.c
@@ -415,6 +415,124 @@ monitor_signal_init(void)
  */
 
 /*
+ *  Adjust the signal set so the application can't change the mask for
+ *  any signal in the keep open list.
+ */
+void
+monitor_remove_client_signals(sigset_t *set, int how)
+{
+    struct monitor_signal_entry *mse;
+    char buf[MONITOR_SIG_BUF_SIZE];
+    char *type = "";
+    int sig;
+
+    if (set == NULL) {
+	return;
+    }
+
+    if (monitor_debug) {
+	if (how == SIG_BLOCK) { type = "block"; }
+	else if (how == SIG_UNBLOCK) { type = "unblock"; }
+	else { type = "setmask"; }
+
+	monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, set);
+	MONITOR_DEBUG("(%s) request:%s\n", type, buf);
+    }
+
+    if (how == SIG_BLOCK || how == SIG_UNBLOCK) {
+	/*
+	 * For BLOCK and UNBLOCK, remove from 'set' any signals in the
+	 * keep open list.
+	 */
+	for (sig = 1; sig < MONITOR_NSIG; sig++) {
+	    mse = &monitor_signal_array[sig];
+	    if (!mse->mse_avoid && !mse->mse_invalid && mse->mse_keep_open) {
+		sigdelset(set, sig);
+	    }
+	}
+    }
+    else {
+	/*
+	 * For SETMASK, get the current mask and require that 'set'
+	 * has the same value for all signals in the keep open list.
+	 */
+	sigset_t cur_set;
+	(*real_sigprocmask)(0, NULL, &cur_set);
+
+	if (monitor_debug) {
+	    monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, &cur_set);
+	    MONITOR_DEBUG("(%s) current:%s\n", type, buf);
+	}
+
+	for (sig = 1; sig < MONITOR_NSIG; sig++) {
+	    mse = &monitor_signal_array[sig];
+	    if (!mse->mse_avoid && !mse->mse_invalid && mse->mse_keep_open) {
+		if (sigismember(&cur_set, sig)) {
+		    sigaddset(set, sig);
+		} else {
+		    sigdelset(set, sig);
+		}
+	    }
+	}
+    }
+
+    if (monitor_debug) {
+	monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, set);
+	MONITOR_DEBUG("(%s) actual: %s\n", type, buf);
+    }
+}
+
+/*
+ *  Choose the shootdown signal and add it to the open list.  In the
+ *  early case, pick something on the shootdown list that's not held
+ *  open for the client.
+ */
+static void
+monitor_choose_shootdown_early(void)
+{
+    int i, sig;
+
+    if (shootdown_signal > 0) {
+	return;
+    }
+
+    for (i = 0; monitor_shootdown_list[i] > 0; i++) {
+	sig = monitor_shootdown_list[i];
+
+	if (! monitor_signal_array[sig].mse_keep_open) {
+	    shootdown_signal = sig;
+	    monitor_signal_array[sig].mse_keep_open = 1;
+	    return;
+	}
+    }
+
+    shootdown_signal = last_resort_signal;
+    monitor_signal_array[last_resort_signal].mse_keep_open = 1;
+}
+
+/*
+ *  Return a signal unused by the client or application, if possible.
+ */
+int
+monitor_shootdown_signal(void)
+{
+    if (shootdown_signal > 0) {
+	return shootdown_signal;
+    }
+
+    monitor_signal_init();
+    monitor_choose_shootdown_early();
+    return shootdown_signal;
+}
+
+#if 0
+/*
+ *  Old, delayed way of choosing the shootdown signal and keeping the
+ *  client signals open.  The libunwind use case makes this approach
+ *  of delaying the shootdown choice near impossible.
+ */
+
+/*
  *  Delete from "set" any signals on the keep open list.  Always leave
  *  at least one unmasked signal to use for thread shootdown.
  */
@@ -499,34 +617,6 @@ monitor_remove_client_signals(sigset_t *set)
 }
 
 /*
- *  Choose the shootdown signal and add it to the open list.  In the
- *  early case, pick something on the shootdown list that's not held
- *  open for the client.
- */
-static void
-monitor_choose_shootdown_early(void)
-{
-    int i, sig;
-
-    if (shootdown_signal > 0) {
-	return;
-    }
-
-    for (i = 0; monitor_shootdown_list[i] > 0; i++) {
-	sig = monitor_shootdown_list[i];
-
-	if (! monitor_signal_array[sig].mse_keep_open) {
-	    shootdown_signal = sig;
-	    monitor_signal_array[sig].mse_keep_open = 1;
-	    return;
-	}
-    }
-
-    shootdown_signal = last_resort_signal;
-    monitor_signal_array[last_resort_signal].mse_keep_open = 1;
-}
-
-/*
  *  Return a signal unused by the client or application, if possible.
  */
 int
@@ -599,6 +689,9 @@ monitor_shootdown_signal(void)
 #endif
 }
 
+#endif  // end of old shootdown, client signals code
+
+
 /*
  *----------------------------------------------------------------------
  *  SUPPORT FUNCTIONS
@@ -642,7 +735,9 @@ monitor_sigaction(int sig, monitor_sighandler_t *handler,
     if (act != NULL) {
 	mse->mse_kern_act.sa_flags = monitor_adjust_saflags(act->sa_flags);
 	mse->mse_kern_act.sa_mask = act->sa_mask;
+#if 0
 	monitor_remove_client_signals(&mse->mse_kern_act.sa_mask);
+#endif
 	(*real_sigaction)(sig, &mse->mse_kern_act, NULL);
     }
 
@@ -730,7 +825,7 @@ monitor_appl_sigaction(int sig, const struct sigaction *act,
 	mse->mse_appl_act = *act;
 	mse->mse_kern_act.sa_flags = monitor_adjust_saflags(act->sa_flags);
 	mse->mse_kern_act.sa_mask = act->sa_mask;
-	monitor_remove_client_signals(&mse->mse_kern_act.sa_mask);
+	monitor_remove_client_signals(&mse->mse_kern_act.sa_mask, SIG_BLOCK);
 	(*real_sigaction)(sig, &mse->mse_kern_act, NULL);
     }
 
@@ -762,33 +857,22 @@ MONITOR_WRAP_NAME(signal)(int sig, sighandler_fcn_t *handler)
 }
 
 /*
- *  Allow the application to modify the signal proc mask, but don't
- *  let it block a signal that the client catches.
+ *  Allow the application to modify the signal mask, but don't let it
+ *  change the mask for any signal in the keep open list.
  */
 int
 MONITOR_WRAP_NAME(sigprocmask)(int how, const sigset_t *set,
 			       sigset_t *oldset)
 {
-    char buf[MONITOR_SIG_BUF_SIZE];
-    char *type;
     sigset_t my_set;
 
     monitor_signal_init();
 
-    type = (how == SIG_UNBLOCK) ? "unblock" : "block";
-    if (monitor_debug) {
-	monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, set);
-	MONITOR_DEBUG("(%s) request:%s\n", type, buf);
-    }
-
-    if (set != NULL && (how == SIG_BLOCK || how == SIG_SETMASK)) {
+    if (set != NULL) {
+	MONITOR_DEBUG1("\n");
 	my_set = *set;
-	monitor_remove_client_signals(&my_set);
+	monitor_remove_client_signals(&my_set, how);
 	set = &my_set;
-	if (monitor_debug) {
-	    monitor_sigset_string(buf, MONITOR_SIG_BUF_SIZE, set);
-	    MONITOR_DEBUG("(%s) actual: %s\n", type, buf);
-	}
     }
 
     return (*real_sigprocmask)(how, set, oldset);
